@startuml

participant "LSM2Table" as job
participant "Opera API" as OA
participant "Employee API" as EMP
participant "API Server" as API
database "Postgres" as DB

job -> job: 上傳 LSM 檔案
job -> API: 應用層來 GET /lsm-mapping-history 取得目前所有上傳狀態
API --> job: 回傳資料
job -> job: POST /initialize 觸發初始化流程
note right of job
  目標建立：
  - 所有部門
  - 專案
  - 部門 <> 專案關係表
  - 建立 12 個 Man Month
end note

box "loop 針對每個 LSM Code"
    loop 針對每個 LSM Code
        job -> OA: 透過 L-Station 的 Opera search API
        OA --> job: 回傳結果
        note right of job
          curl https://lstation-stage.linecorp.com/s/opera/v1/search_projects?corp_cd=CORP_ID&service_cd=SERVICE_CD
          Response Body: 
          {
            "projects": [{
              "project_cd": "E0000388400",
              "project_nm_en": "CB*1c598044b2dc7d9922fe*W)",
              ...
              "end": False, 
              "own_type": 'ACTIVITY'
            }]
          }
          projects 陣列裡的專案接算在 LSM Code 下的專案
          透過下個步驟計算每個 project_cd 的 Man Month 總和

          備註： 
          - project_nm_en 為專案名稱，beta API 會有 mock data
          - project_cd 為專案在系統的編號
          - project_nm_en 為專案名稱
          - end 為專案是否結案
          - own_type 為專案類型
        end note
        job -> job: 判斷 OWN_TYPE= PROJECT || ACTIVITY 決定要打哪隻 Opera API
        alt PROJECT
            job-> OA: /man-months/{year}/{month}/projects/{project_cd}
        else ACTIVITY
            job-> OA: /man-months/{year}/{month}/acivities/{project_cd}
        end
        
        OA --> job: 回傳結果
        note right of job
          需要根據 fiscal year 去逐月確認該專案有無人力
          Ex: fiscal year = 2024, 2024/04 ~ 2025/03
          curl https://lstation-stage.linecorp.com/s/opera/v1/man-months/:year/:month/activities/:code
          Response Body:
          {
            "page_size": 10000,
            "row_offset": 0,
            "total": 2,
            "year": 2024,
            "month": 12,
            "man_month_records": [{
              "emp_no": "LW11835",
              "project_cd": "",
              "activity_cd": "E0000388400",
              "self_comment": "",
              "outsourcing": false,
              "ly_technology_management_outsourcing": false,
              "man_months": 0.45
            },{
              "emp_no": "LW13222",
              ...
              "man_months": 0.44
            }]
          }
        end note
        job -> job: 這裡不用計算 man-month
        alt 找每個 emp_no 的部門
          job -> EMP: emp_no 取得 CORP_ID 底下的組織串全部收集起來，並確認 retire_date 
          note right of job
            若 retire_date 有值並在*計算月*中，則該筆 emp_no 不再計算 Man Month

            2025/05/06:
            因為有 re-org 關係，需要把 LTL 底下 group - department - team ... 全部都建立起來
            避免後續公司調整需要再調整架構
          end note
          EMP -> job: 回傳 API 資訊
          job -> API: 建立 LTL 底下所有的 departments，需避免 duplicate data
          note right of API
            需確認 update 前是否需要先 GET

            2025/05/06:
            每一個階層皆需要把 FTE, dispatch 的數量算出來
            可透過 Amaterasu API 去把部門 tree 拿出來算
          end note
          job -> API: 把專案 & department 建立與關聯起來，需避免 duplicate data
          note right of job
            lsm_code & name combine unique
          end note
          note right of job
            如果專案已存在並且 end=true

            * 放入的 project name 為 LSM table 上的名稱
              不是 API 裡面的 project name
          end note
          job -> API: 根據當前 fiscal year 建立 12 個 Man Month record
          note right of job
            ex: Fiscal year = 2024
            Month period: 2024/04~2025/03 
            (依此類推)
          end note
          API -> DB: 透過 transaction 把 Department, Project & 12筆Man Month 關聯資料建立起來
          DB --> API: 回傳是否成功
          API --> job: 回傳輸入結果，完成 Init
        end
    end
end box
job -> API: 用 filename : GET /v1/lsm-mapping-history 用 filename 找 ID
API -> DB: 透過 filename 找 unique id
DB --> API: 回傳結果
API --> job: 回傳結果
job -> API: PATCH /v1/lsm-mapping-history/{id}
API -> DB: 更新 processed_at
DB --> API: 回傳結果
API --> job: 回傳前端資料已寫入

job -> job: 透過 GET /lsm-mapping-history 取得所有上傳狀態
@enduml