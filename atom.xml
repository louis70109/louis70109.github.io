<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忍者工坊</title>
  
  
  <link href="https://nijialin.com/atom.xml" rel="self"/>
  
  <link href="https://nijialin.com/"/>
  <updated>2024-04-03T18:17:40.458Z</updated>
  <id>https://nijialin.com/</id>
  
  <author>
    <name>NiJia Lin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何建立 fly.toml 並快速佈署至 Fly.io</title>
    <link href="https://nijialin.com/2024/04/04/flyio-quick-deploy-your-service/"/>
    <id>https://nijialin.com/2024/04/04/flyio-quick-deploy-your-service/</id>
    <published>2024-04-04T02:16:57.000Z</published>
    <updated>2024-04-03T18:17:40.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>最近因為有些專案需要有 local Volume，但在 Serverless 上要用偏麻煩，除機器上的本身功能以外，還需要另外開 VM 讓 Container 能夠 mount volume，因此需要類似 Heroku、Fly.io 這類的 SaaS 的服務，可以用很少量的費用去使用到 Database&#x2F;Volume 的功能…</p><span id="more"></span><p>過往使用 Heroku 經驗也是會睡眠之後把記憶體(SQLite)內容清乾淨，因此上一篇「<a href="https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/">在 Fly.io 上架設 Uptime Kuma 監控 Side Project</a>」時策之後發現不會被清掉，因此就延續這邊來介紹使用</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有用過 Heroku, Google Cloud, Amazon…+本篇 Fly.io，在一體式與分離式的雲服務基本上都用過</p><ul><li>像是 Heroku &amp; Fly.io 就可以一包 code 直接上，連 Database&#x2F;NoSQL 都可以直接弄</li><li>GCP&#x2F;AWS 則是可以獨立操作想要的功能，需要時在整合，比較乾淨也不會一次佈署搞的霧煞煞</li></ul><p>那基本上就是依需求為主，個別有好處也有各自的 config 需要讀寫，但反正概念上都差不多，先學一套剩下的都好處理 💪</p><h1 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>flyctl</span><br></pre></td></tr></table></figure><p>如果你已經有帳號的話</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fly auth login</span></span><br></pre></td></tr></table></figure><p>第一次還沒有 config 可以使用以下指令，透過 UI 的方式幫忙建立 Fly config</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fly <span class="built_in">launch</span></span><br></pre></td></tr></table></figure><p><img src="https://nijialin.com/images/2024/flyio/launch.png"></p><p>畫面上的東西確認後，會在專案下看到 fly.io 幫你建立的 fly.toml，範例如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fly.toml app configuration file generated for SERVICE_NAME on 2024-04-03T23:36:13+08:00</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See https://fly.io/docs/reference/configuration/ for information about how to use this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">app</span> = <span class="string">&#x27;SERVICE_NAME&#x27;</span></span><br><span class="line"><span class="attr">primary_region</span> = <span class="string">&#x27;sin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[env]</span></span><br><span class="line">  <span class="attr">LINE_CLIENT_ID</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">  <span class="attr">LINE_CLIENT_SECRET</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">  <span class="attr">LINE_REDIRECT_URI</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[http_service]</span></span><br><span class="line">  <span class="attr">internal_port</span> = <span class="number">8080</span></span><br><span class="line">  <span class="attr">force_https</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_stop_machines</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_start_machines</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">min_machines_running</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">processes</span> = [<span class="string">&#x27;app&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[[vm]]</span></span><br><span class="line">  <span class="attr">size</span> = <span class="string">&#x27;shared-cpu-1x&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第二次之後需要部屬："><a href="#第二次之後需要部屬：" class="headerlink" title="第二次之後需要部屬："></a>第二次之後需要部屬：</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fly deploy</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">...</span></span><br><span class="line"><span class="bullet"></span>image size: 1.0 GB</span><br><span class="line"></span><br><span class="line">Watch your deployment at https://fly.io/apps/SERVICE_NAME/monitoring</span><br><span class="line"></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code">Updating existing machines in &#x27;SERVICE_NAME&#x27; with rolling strategy</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code"> ✔ [1/2] Machine 9080110f700387 [app] update succeeded</span></span><br><span class="line"><span class="code"> ✔ [2/2] Machine e784e52b270168 [app] update succeeded</span></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code">Checking DNS configuration for SERVICE_NAME.fly.dev</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">Visit your newly deployed app at https://SERVICE_NAME.fly.dev/</span></span><br></pre></td></tr></table></figure><h2 id="如果-RAM-第一次部屬開太大怎麼辦？"><a href="#如果-RAM-第一次部屬開太大怎麼辦？" class="headerlink" title="如果 RAM 第一次部屬開太大怎麼辦？"></a>如果 RAM 第一次部屬開太大怎麼辦？</h2><p>參閱文件：<a href="https://fly.io/docs/apps/scale-machine/#add-ram">https://fly.io/docs/apps/scale-machine/#add-ram</a></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fly <span class="built_in">scale</span> memory <span class="number">512</span></span><br><span class="line">fly <span class="built_in">scale</span> <span class="keyword">show</span></span><br></pre></td></tr></table></figure><h2 id="我換電腦沒有當初的-fly-toml-檔案怎辦？"><a href="#我換電腦沒有當初的-fly-toml-檔案怎辦？" class="headerlink" title="我換電腦沒有當初的 fly.toml 檔案怎辦？"></a>我換電腦沒有當初的 fly.toml 檔案怎辦？</h2><p>只要電腦現在終端機有透過 <code>fly auth sign</code> 登入，接下來只要把專案 clone 下來，確定 <code>fly.toml</code> 裡面的 app 後面的名字一樣，進到終端機就可以 <code>fly status</code> 看看機器狀態囉！</p><h2 id="flask-deploy-有問題，一直-port-confuse"><a href="#flask-deploy-有問題，一直-port-confuse" class="headerlink" title="flask deploy 有問題，一直 port confuse"></a>flask deploy 有問題，一直 port confuse</h2><p>如果是依靠 gunicorn 部屬的讀者，以下應該會在 Dockerfile 裡面寫上這一段：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="selector-attr">[<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;api:app&quot;</span>, <span class="string">&quot;--log-file=-&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>然而這個啟動方式不論在 app.py 或是 Dockerfile 上寫了 EXPOSE port 為其他的，皆會預設 <code>127.0.0.1:8000</code>，這個舉動會讓 fly.io 感到困惑(confuse)，因為 fly.io 只聽 <code>0.0.0.0</code>，至於 port 應該是不影響，只是在 log 裡面一直看到 port confuse 覺得很奇怪</p><p>其中只要把 Dockerfile 裡面的 CMD 改成以下的就可以上去了，記得自己的 app.py 要改 port 喔！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="selector-attr">[<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;--host&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://technotrampoline.com/articles/deploying-a-python-flask-application-to-fly/">參考文章</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Fly.io 這邊還有很多功能可以使用，但大多都需要透過 command line 來操作，是一個比較開發者導向的 SaaS 的服務，但指令滿直觀的，或許都可以參考使用看看喔！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h1&gt;&lt;p&gt;最近因為有些專案需要有 local Volume，但在 Serverless 上要用偏麻煩，除機器上的本身功能以外，還需要另外開 VM 讓 Container 能夠 mount volume，因此需要類似 Heroku、Fly.io 這類的 SaaS 的服務，可以用很少量的費用去使用到 Database&amp;#x2F;Volume 的功能…&lt;/p&gt;</summary>
    
    
    
    <category term="Serverless" scheme="https://nijialin.com/categories/Serverless/"/>
    
    
    <category term="Serverless" scheme="https://nijialin.com/tags/Serverless/"/>
    
    <category term="Fly.io" scheme="https://nijialin.com/tags/Fly-io/"/>
    
  </entry>
  
  <entry>
    <title>在 Fly.io 上架設 Uptime Kuma 監控 Side Project</title>
    <link href="https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/"/>
    <id>https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/</id>
    <published>2024-03-24T13:21:50.000Z</published>
    <updated>2024-04-03T18:17:40.458Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/kuma/1.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於近期自己蓋了幾隻 side project，慢慢發現有些服務倒了我自己也不知道，但時間久了其實當下也會忘了要修哪…</p><p>也因公司內有 status page 可以看每個服務狀態，想想這需求我也需要，因此萌生了架 status page 來幫忙確認健康狀態，接下來看看怎麼操作吧</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>此次使用的是 <a href="https://github.com/louislam/uptime-kuma/tree/master">uptime-kuma</a>，本來想說可以直接上到 Google Cloud Run 上，除了自己弄不上去以外，也發現 uptime kuma 是使用 SQLite 來儲存資訊，這邊很有可能被 <a href="https://nijialin.com/2020/02/15/serverless-cold-start/">Cold Start 的問題</a>打到，因此這次使用 fly.io 來部署(<a href="https://github.com/louis70109/uptime-kuma-fly/blob/main/fly.toml">民間版本.toml</a>)</p><ol><li>有許多的 notification 可以串接，有支援 LINE Bot &amp; Notify</li></ol><p><img src="https://nijialin.com/images/2024/kuma/notification.png"></p><ol start="2"><li><p>初次進去就可以設帳密，但帳號只能一個還改不了 🫣</p></li><li><p>可設定群組，統一設定 notification 而不用各別弄</p></li><li><p>還沒研究怎麼把 SQLite 拔出來，看來有支援 MySQL</p></li><li><p>備份不求人，直接 Export 就可以了</p></li></ol><p><img src="https://nijialin.com/images/2024/kuma/backup.png"></p><ol start="6"><li>如何部署到 fly.io</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clone 專案到本地</span></span><br><span class="line">git clone https:<span class="string">//github.com/louis70109/uptime-kuma-fly.git</span></span><br><span class="line"><span class="comment"># 進入資料夾</span></span><br><span class="line"><span class="keyword">cd</span> uptime-kume-fly/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署，原先指令是 flyctl</span></span><br><span class="line">fly launch \</span><br><span class="line">  <span class="params">--copy-config</span> \</span><br><span class="line">  <span class="params">--auto-confirm</span> \</span><br><span class="line">  <span class="params">--ha=false</span> \</span><br><span class="line">  <span class="params">--name</span> uptime-kuma-nijia \</span><br><span class="line">  <span class="params">--now</span></span><br></pre></td></tr></table></figure><ol start="7"><li>如果想要在 fly.io 上客製化 domain，例如：<code>status.YOURDOMAIN.com</code></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fly certs <span class="built_in">create</span> <span class="built_in">status</span>.YOURDOMAIN.com</span><br><span class="line">fly certs <span class="built_in">create</span> <span class="string">&quot;*.YOURDOMAIN.com&quot;</span></span><br><span class="line">fly certs show <span class="string">&quot;*.YOURDOMAIN.com&quot;</span></span><br></pre></td></tr></table></figure><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>看 Fly.io 一個月租金寫 5 美元，但因為只有一個服務應該不會用到這麼多流量，這次除了架設 status page 以外，也來看看這邊租金是怎樣，如果 &lt; 100 台幣的話或許可以考慮繼續使用，畢竟人家提供方便的服務來使用也是挺棒的！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/kuma/1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由於近期自己蓋了幾隻 side project，慢慢發現有些服務倒了我自己也不知道，但時間久了其實當下也會忘了要修哪…&lt;/p&gt;
&lt;p&gt;也因公司內有 status page 可以看每個服務狀態，想想這需求我也需要，因此萌生了架 status page 來幫忙確認健康狀態，接下來看看怎麼操作吧&lt;/p&gt;</summary>
    
    
    
    <category term="Serverless" scheme="https://nijialin.com/categories/Serverless/"/>
    
    
    <category term="Serverless" scheme="https://nijialin.com/tags/Serverless/"/>
    
    <category term="Monitor" scheme="https://nijialin.com/tags/Monitor/"/>
    
    <category term="Fly.io" scheme="https://nijialin.com/tags/Fly-io/"/>
    
    <category term="Uptime Kuma" scheme="https://nijialin.com/tags/Uptime-Kuma/"/>
    
  </entry>
  
  <entry>
    <title>【青森】滑雪紀錄, 從秋田機場出發</title>
    <link href="https://nijialin.com/2024/03/02/aomori-sonwboarding-202402/"/>
    <id>https://nijialin.com/2024/03/02/aomori-sonwboarding-202402/</id>
    <published>2024-03-02T14:51:08.000Z</published>
    <updated>2024-04-03T18:17:40.454Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/aomori/S__19750974_0.jpg"></p><h1 id="班機-虎航"><a href="#班機-虎航" class="headerlink" title="班機-虎航"></a>班機-虎航</h1><p>這次跟著朋友一起訂機票，虎航只有禮拜四的班機可以飛秋田，這次訂了 22,000 NTD，雖然比去仙台貴上滿多的，但能下去看一下秋田犬也不錯 😄</p><blockquote><p>個人前往等級: 剛學會 S turn，比較陡的紅線有時候還是會怕怕的，時常還是會卡刃跌倒</p></blockquote><span id="more"></span><table><thead><tr><th align="left"></th><th align="left"></th><th align="left">班機</th><th></th></tr></thead><tbody><tr><td align="left">時間 2&#x2F;22</td><td align="left">08:30</td><td align="left"></td><td>12:40</td></tr><tr><td align="left">地點</td><td align="left">TPE</td><td align="left">IT 256</td><td>AXT</td></tr><tr><td align="left">時間 2&#x2F;29</td><td align="left">14:10</td><td align="left"></td><td>17:25</td></tr><tr><td align="left">地點</td><td align="left">AXT</td><td align="left">IT 257</td><td>TPE</td></tr></tbody></table><h2 id="秋田空港"><a href="#秋田空港" class="headerlink" title="秋田空港"></a>秋田空港</h2><p><img src="https://nijialin.com/images/2024/aomori/S__19750984_0.jpg"></p><p>秋田空港似乎是去年加開給虎航的，算起來也算是一個小機場，因此在這邊虎航的櫃位就很明顯，但回程時不能線上 check-in，不確定是不是小機場的緣故，但排隊其實很快，很多程序也都先手動處理(機票、對名單…etc)</p><h2 id="秋田出發到青森"><a href="#秋田出發到青森" class="headerlink" title="秋田出發到青森"></a>秋田出發到青森</h2><p><img src="https://nijialin.com/images/2024/aomori/S__5595140.jpg"></p><p>秋田機場下飛機後，需要先搭乘巴士到<strong>秋田站</strong>，參考上圖右側，這次我 12:40 抵達機場，小機場應該可以比較快出關，但也要趕在 14:15 抵達巴士站轉乘到秋田駛</p><p><img src="https://nijialin.com/images/2024/aomori/S__5595159.jpg"></p><p>接著需要搭乘 JR 到青森，以巴士約 40 分鐘左右，因此預計要搭乘到 15:00 之後的兩班到青森，抵達時間應該也晚上七點了</p><blockquote><p>如果搞不清楚 JR 怎麼搭，可以參考這邊文章 <a href="https://matcha-jp.com/tw/172">【最新 2024】日本新幹線攻略！一次搞懂購票方式、種類區分、座位</a></p></blockquote><blockquote><p>這次住在<a href="https://www.google.com/maps/place/APA%E9%A3%AF%E5%BA%97+%E9%9D%92%E6%A3%AE%E7%AB%99%E6%9D%B1/@40.8278806,140.7363861,17z/data=!3m1!4b1!4m9!3m8!1s0x5f9b9f1e13da284f:0xc5f50c8652edfa2b!5m2!4m1!1i2!8m2!3d40.8278766!4d140.7389664!16s%2Fg%2F1tnl16vv?authuser=0&entry=ttuhttps:/">APA 青森東</a></p></blockquote><h2 id="回程-秋田-機場"><a href="#回程-秋田-機場" class="headerlink" title="回程 秋田-機場"></a>回程 秋田-機場</h2><p>由於是最後一天住在秋田 <a href="https://www.google.com/maps/place/APA+HOTEL+AKITA-SENSHUKOEN/@39.7206179,140.1166995,17z/data=!3m1!4b1!4m9!3m8!1s0x5f8fc2bfe52953e5:0xc91ceb8b6c1eb81a!5m2!4m1!1i2!8m2!3d39.7206138!4d140.1192798!16s%2Fg%2F12m9km9lj?authuser=0&entry=ttu">APA 酒店 - 秋田千秋公園 (APA Hotel Akita-Senshukoen)</a>，然後 14:10 的飛機，因此先預估 11:30 從飯店出發，搭乘機場接送巴士去機場，時程 40 分鐘</p><blockquote><p><a href="https://maps.app.goo.gl/Ptum5uitHDe5Dkjo9">Google Map</a></p></blockquote><p><img src="https://nijialin.com/images/2024/aomori/2.png"></p><blockquote><p>秋田比較冷門，個人還是喜歡最後一天可以有地方逛，下次應該會去仙台搭飛機了 XD</p></blockquote><h1 id="雪場"><a href="#雪場" class="headerlink" title="雪場"></a>雪場</h1><p><img src="https://nijialin.com/images/2024/aomori/S__19750982_0.jpg"></p><h2 id="moyahills"><a href="#moyahills" class="headerlink" title="moyahills"></a><a href="http://moyahills.jp/index.html">moyahills</a></h2><p><img src="https://nijialin.com/images/2024/aomori/1.png"></p><p>在這裡待上一天熱身，會在這邊租雪具(<a href="https://moyahills.jp/winter/winter.html">URL</a>)，這次一樣會租雪板+鞋+帽子，然後自己帶護膝護臀</p><blockquote><p>租裝備 6000&#x3D;5000 板子鞋子+1000 帽子<br>3060 moyahills 雪票<br>總共 <strong>9060 yen</strong></p></blockquote><p><img src="https://nijialin.com/images/2024/aomori/20231214130801-0001.jpg"></p><p>備存一下地圖，這次只有滑一號纜車而已，其他地方因為雪太少沒辦法滑行(很多冰面)</p><h2 id="八甲田雪場"><a href="#八甲田雪場" class="headerlink" title="八甲田雪場"></a><a href="https://maps.app.goo.gl/dVVYec58396nDwmF7">八甲田雪場</a></h2><p><img src="https://nijialin.com/images/2024/aomori/S__19750976_0.jpg"></p><ul><li>營業時間以及票券的錢 <a href="http://www.hakkoda-ropeway.jp/guide">http://www.hakkoda-ropeway.jp/guide</a></li><li>這次八甲田買 <strong>11 回券</strong>，分別滑行三天 3、4、4 次，<ul><li>總共: <strong>10100 yen</strong></li></ul></li><li>有 Forest 以及 Direct 兩個線路，這次大多都在 Direct line 滑行練感覺</li><li>我來的時間是二月底，營業時間 9:00~15:40</li></ul><blockquote><p>好險第一天有在 Moyahills 練習，前幾天需要先評估滑雪狀態再決定要不要來 😆</p></blockquote><h3 id="現場排隊狀況"><a href="#現場排隊狀況" class="headerlink" title="現場排隊狀況"></a>現場排隊狀況</h3><p><img src="https://nijialin.com/images/2024/aomori/S__19750979_0.jpg"></p><p>排隊中午前平均要排 <strong>1~1.5</strong> 小時，中午之後大概 1 小時，如果像我一樣因為會累或是需要熱機比較久，避開午餐人潮可以第一趟下來 <strong>11 點</strong>餐廳開了就先吃，然後去現場排隊一個小時就消化好了可以開始滑行</p><blockquote><p>體感日本人跟中國人的數量大概 1:0.8 左右</p></blockquote><h3 id="其他雪場內筆記"><a href="#其他雪場內筆記" class="headerlink" title="其他雪場內筆記"></a>其他雪場內筆記</h3><p><img src="https://nijialin.com/images/2024/aomori/S__19750978_0.jpg"></p><ul><li>食物大概一千日元上下</li><li>一天租借裝備:<ul><li>裝備板子鞋子 4000</li><li>帽子 1000</li></ul></li></ul><blockquote><p>裝備 <strong>5000</strong> yen&#x2F;天</p></blockquote><h4 id="巴士時刻表"><a href="#巴士時刻表" class="headerlink" title="巴士時刻表"></a>巴士時刻表</h4><p>以下先做筆記提供給未來的自己看，但這次是跟著朋友包車從青森出發到八甲田</p><blockquote><p>這次去八甲田跟著同行包車，以下資訊提供給之後要去的我一些參考 XD</p></blockquote><h5 id="青森車站-雪場"><a href="#青森車站-雪場" class="headerlink" title="青森車站-雪場"></a>青森車站-雪場</h5><p><img src="https://nijialin.com/images/2024/aomori/491450597338513798.png"></p><ul><li><a href="https://maps.app.goo.gl/WMcRyvHcqBheBnMV9">GOOGLE MAP</a></li><li>地址：日本〒 030-0133 Aomori, Moya, Nashinoki− ６３</li></ul><h5 id="雪場-青森車站"><a href="#雪場-青森車站" class="headerlink" title="雪場-青森車站"></a>雪場-青森車站</h5><p><img src="https://nijialin.com/images/2024/aomori/491450553851708003.png"></p><h2 id="Aomori-Spring-Ski-Resort"><a href="#Aomori-Spring-Ski-Resort" class="headerlink" title="Aomori Spring Ski Resort"></a><a href="https://maps.app.goo.gl/WaRh4C9yDwm2qaV66?g_st=ic">Aomori Spring Ski Resort</a></h2><p><img src="https://nijialin.com/images/2024/aomori/md85_G_01.jpg"></p><p>有一天因為八甲田風太大沒有開，全體人員前往 Aomori spring 滑雪，這次去中間通往山頂的纜車沒開，也剛好藉這個機會把這邊都玩過一遍，體感這邊的紅線跟綠線等及差不多</p><p>這邊可以選擇要 5000 的 snowboard set 或 5500 版本，差異大概是板子跟鞋子都比較高級點，帽子一樣 1000，雪票 6200</p><blockquote><p>總共 🟰 <strong>12700</strong> yen 💴&#x2F;一天</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這次很幸運可以跟到很棒的滑雪團，也遇到補很多雪的日子(不用滑冰塊)，並且可以體驗到八甲田山的魔力，接下來明年再來去日本收集更多雪場！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/aomori/S__19750974_0.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;班機-虎航&quot;&gt;&lt;a href=&quot;#班機-虎航&quot; class=&quot;headerlink&quot; title=&quot;班機-虎航&quot;&gt;&lt;/a&gt;班機-虎航&lt;/h1&gt;&lt;p&gt;這次跟著朋友一起訂機票，虎航只有禮拜四的班機可以飛秋田，這次訂了 22,000 NTD，雖然比去仙台貴上滿多的，但能下去看一下秋田犬也不錯 😄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;個人前往等級: 剛學會 S turn，比較陡的紅線有時候還是會怕怕的，時常還是會卡刃跌倒&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="Japan" scheme="https://nijialin.com/tags/Japan/"/>
    
    <category term="Snowboard" scheme="https://nijialin.com/tags/Snowboard/"/>
    
    <category term="日本滑雪" scheme="https://nijialin.com/tags/%E6%97%A5%E6%9C%AC%E6%BB%91%E9%9B%AA/"/>
    
    <category term="青森" scheme="https://nijialin.com/tags/%E9%9D%92%E6%A3%AE/"/>
    
    <category term="八甲田山" scheme="https://nijialin.com/tags/%E5%85%AB%E7%94%B2%E7%94%B0%E5%B1%B1/"/>
    
  </entry>
  
  <entry>
    <title>【DevFest 2023】Empowering Community-Driven Learning through Serverless Practice</title>
    <link href="https://nijialin.com/2024/02/18/google-devfest-2023-taipei-learn-serverless-from-communities/"/>
    <id>https://nijialin.com/2024/02/18/google-devfest-2023-taipei-learn-serverless-from-communities/</id>
    <published>2024-02-18T16:25:01.000Z</published>
    <updated>2024-04-03T18:17:40.458Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/devfest/1.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>經歷過連續兩週兩場 <a href="https://gdg.community.dev/events/details/google-gdg-taipei-presents-devfest-taipei-2023/">DevFest 2023</a> 的經驗(12&#x2F;9, 12&#x2F;16)，真的是把我畢生所學都拿出來榨乾了😆，但也很高興有機會在台中以及台北跟大家分享我在業餘時間透過 Google Cloud 開發 Side Project 的經驗談，以下內容為台北場內容，有興趣的跟著一起往下看吧！</p><span id="more"></span><h1 id="如何透過社群學習？"><a href="#如何透過社群學習？" class="headerlink" title="如何透過社群學習？"></a>如何透過社群學習？</h1><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/6b62f16e016244e9a9feca2057078f04?slide=6" title="Empowering Community-Driven Learning through Serverless Practice" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><h2 id="Clone-Knowledge"><a href="#Clone-Knowledge" class="headerlink" title="Clone Knowledge"></a>Clone Knowledge</h2><p>知識是可以複製的，開源社群另一個好處就是不用重複造輪子，初學時可能看了許多文件與文章，但終於找到當中了一些範例，這時候當然就先把他抓下來使用看看囉！</p><p>以自學角度來說，我會推薦經常去複製許多專案，了解自己正在研究的東西有哪些方案，但同步要記得 License 的問題唷！如果商用時要記得備註來源，尊重原作者 ✍️</p><h2 id="Build-Example"><a href="#Build-Example" class="headerlink" title="Build Example"></a>Build Example</h2><script defer class="speakerdeck-embed" data-slide="32" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>當我們開始熟悉學習的內容(e.g. Public Cloud, LINE Bot, 程式語言…)，應該本機都有很多 Clone 下來的專案，藉由平日生活中有些週期性的事情，開始可以把前人的經驗拿來改寫，把它變成事宜些有趣的專案。</p><blockquote><p>上圖範例為我近期為了玩滑板做的爬蟲 - <a href="https://github.com/louis70109/skatepark-CCTV-line">louis70109&#x2F;skatepark-CCTV-line</a>，也是幫我解決我在台北時時常下雨不能出去玩的問題</p></blockquote><h2 id="Contribute-Expertise"><a href="#Contribute-Expertise" class="headerlink" title="Contribute Expertise"></a>Contribute Expertise</h2><p>隨著範例越寫越多，會發現有些相依專案有些以下問題：</p><ul><li>註解寫一半</li><li>README label、格式沒對齊</li><li>function name 有錯</li><li>駝峰語言用底線(<code>_</code>)<ul><li>CamelCase(駝峰), JavaScript: 駝峰式居多</li><li>snake*case(蛇行用法), Python: 基本上都用 <code>*</code> 命名變數與 function，但 Class 會用<code>駝峰</code>，這都能送 PR 幫忙調整</li></ul></li></ul><p>不論專案的大小、公司內外，都會有很多以上的問題，順手幫忙一起修，讓每個專案越來越完整！</p><blockquote><p>像前陣子我就剛好找到 nuxt.js 的範例註解沒寫完(<a href="https://github.com/nuxt/nuxt/pull/23999">PR #23999</a>)，幫忙修正掉，雖然看起來只是小事，但開源專案也是需要細心的人來一起幫忙監督，才能讓開源圈子越來越好唷！</p></blockquote><h1 id="為什麼我要用-Cloud-Run？"><a href="#為什麼我要用-Cloud-Run？" class="headerlink" title="為什麼我要用 Cloud Run？"></a>為什麼我要用 Cloud Run？</h1><p>Serverless 是個概念，主要讓開發者可以專注在開發上，資源沒在用時可以先冷卻(<a href="https://nijialin.com/2023/04/04/how-cloud-run-continuely-cronjob-background/">Cold Start 文章</a>)，而使用 Google 的 Cloud 又會有以下的優勢：</p><ul><li>彈性<ul><li>流量計價，我個人專案大概部署五個服務在 Cloud Run 上，資料庫都用 Firebase，一個月大概花費一百塊以內，基本上費用都不會太高</li><li>萬一專案真的紅了，Cloud Run 還能 auto scaling，Infra 的管理我們都不用管，這樣真的對於一個開發者來非常棒！</li></ul></li><li>易用性<ul><li>GCP 在開發者體驗上做得非常好，gcloud 指令方便文件也易讀，甚至部署上去不用寫一堆 config 設定，只要 deploy 上去接下來在介面上找問題即可！</li></ul></li><li>區域性：雖然都知道文件看英文可以獲得一手資訊，但有時候抓蟲看中文還是比較快！<ul><li>GCP 好處就是中文文件大部分都有支援</li><li>台灣也有機房</li><li>真的不行還可以找客服幫忙，若是企業又會更快些 (畢竟有錢)</li></ul></li></ul><h1 id="佈署方式的選擇與適用情況"><a href="#佈署方式的選擇與適用情況" class="headerlink" title="佈署方式的選擇與適用情況"></a>佈署方式的選擇與適用情況</h1><p>以下三種是我常用來部署自己專案的方式：</p><h2 id="gcloud-指令-速度-快"><a href="#gcloud-指令-速度-快" class="headerlink" title="gcloud 指令 (速度: 快)"></a>gcloud 指令 (速度: 快)</h2><script defer class="speakerdeck-embed" data-slide="16" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><ul><li>最直覺的操作方式，任何有部署經驗的人都會習慣的用法</li><li>通常公司電腦有資安阻擋，因此建議使用自己的電腦操作</li><li>多人團隊建議綁定自動部署</li></ul><h2 id="一鍵部署-Cloud-Shell-速度-中"><a href="#一鍵部署-Cloud-Shell-速度-中" class="headerlink" title="一鍵部署 Cloud Shell (速度: 中)"></a>一鍵部署 Cloud Shell (速度: 中)</h2><script defer class="speakerdeck-embed" data-slide="21" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><ul><li>在 quicklab、Cloud Function…etc 很多 GCP 服務都可使用</li><li>主要讓開發者在任何已登入的瀏覽器上直接操作，無需再另外 ssh 進去</li><li>若有資安軟體阻擋，這方式可以直接線上操作，安全又 <del>衛生</del> 守規定</li></ul><h2 id="GitHub-綁定自動部署-速度-慢"><a href="#GitHub-綁定自動部署-速度-慢" class="headerlink" title="GitHub 綁定自動部署 (速度: 慢)"></a>GitHub 綁定自動部署 (速度: 慢)</h2><script defer class="speakerdeck-embed" data-slide="23" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><ul><li>不論團隊大小，都很適合的方式</li><li>通通交給機器處理，不會有手動上沒有參數導致錯誤的問題</li><li>介面直接設定又穩定</li></ul><h1 id="雲端資源整合"><a href="#雲端資源整合" class="headerlink" title="雲端資源整合"></a>雲端資源整合</h1><h2 id="圖床功能比較"><a href="#圖床功能比較" class="headerlink" title="圖床功能比較"></a>圖床功能比較</h2><script defer class="speakerdeck-embed" data-slide="25" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>由於 Side Project 是閒暇時間實作，在求快下就使用 GitHub Repo 作為圖床，但建議別一次傳太大的檔案上去，如果是一些小圖片個人覺得很適合</p><p>如果專案上需要多些權限、階層控管，也需要做後續的整合，這邊就會建議使用 Cloud Storage 作為圖床</p><p>以上就看需求選擇，個人認為這費用不算高(當投資)，讓自己開發順手同時累積經驗比較重要喔！</p><h2 id="資料儲存"><a href="#資料儲存" class="headerlink" title="資料儲存"></a>資料儲存</h2><script defer class="speakerdeck-embed" data-slide="26" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>打從職涯剛開始都是使用 RDBMS 習慣，很常會先以 MySQL、PostgreSQL 為主，如果是自己擁有主機架設這成本較低</p><p>但隨著現在服務都放 Public Cloud，而 SQL 的費用曾經體驗過會非常高 💰，在服務上還可以選擇另一個非常棒的 NoSQL 服務 - <strong>Firebase</strong> 作為資料儲存的地方，這上面不僅有資料儲存功能，同時也能部署網站、分析…etc，文件式的操作方法在 Side Project 上非常快速也方便(<strong>畢竟沒啥邏輯</strong>)，並且能用 JSON 的方式讀取，操作起來就很像呼叫個 API Server 吐資料，上圖比較表也提供給大家～</p><h1 id="選擇適合的-Side-Project"><a href="#選擇適合的-Side-Project" class="headerlink" title="選擇適合的 Side Project"></a>選擇適合的 Side Project</h1><p>以下與大家分享在閒暇時間部署於 GCP 的幾個 Side Project：</p><script defer class="speakerdeck-embed" data-slide="31" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>由於用 LINE 是我每天必經之路，我製作了一個 LINE Bot 記錄我平常收集到的零碎資訊(網站、圖片、點子)，幫我儲存在 GitHub Repo 上，有時在搭交通工具時也會當<strong>暫時的</strong>部落格編輯器(回家再調格式)</p><script defer class="speakerdeck-embed" data-slide="32" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>近期因為愛上滑板 🛹，因此寫了一隻 LINE Bot 來擷取台北滑板場攝影機的畫面，畢竟台北市一個陰晴不定的都市，經常需要靠這隻 Bot 來幫我看看地板是否乾了沒，再決定要不要出門，避免浪費太多時間～</p><p><img src="https://qr-official.line.me/sid/L/556trgib.png" alt="CCTV LINE Bot"></p><blockquote><p>延伸閱讀：<a href="https://nijialin.com/2024/02/13/gcp-cloud-function-gen2-with-line-bot/">如何設定 Cloud Function 2nd gen 來改善截圖爬蟲的效率！</a></p></blockquote><p>另外一隻則是 Calendar Bot，透過 OpenAI 幫我整理凌亂的資訊，變成 Google Calendar 可以使用的方式。</p><p>因為 Google Calendar 可以透過 GET 網址的方式在已登入的瀏覽器上直接加入行事曆，因為個人使用習慣都在手機上安排行事曆，因此在 LINE Bot 這邊需要加上 <code>?openExternalBrowser=1</code> 的參數，強制在外部瀏覽器(Safari)打開，如此才會跳到 App 上操作</p><script defer class="speakerdeck-embed" data-slide="33" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>講了那麼多 LINE Bot，當然也有 Web 的工具，過去因為活動需要，想把 QR Code 變得更好看，能夠在背景放上圖片，因此自己做了一個網站，讓我<code>上傳圖片</code>以及<code>網址</code>，就能變成一個漂亮個 QR Code，看起來吸引力十足也不用靠設計師了 😆</p><h1 id="該帶走點什麼-✍️"><a href="#該帶走點什麼-✍️" class="headerlink" title="該帶走點什麼 ✍️"></a>該帶走點什麼 ✍️</h1><script defer class="speakerdeck-embed" data-slide="34" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>上述介紹了許多，因為是日常需要才使用，也就是有<code>事件</code>才會使用，因此個人認為在事件驅動開發的服務上就會很適合這些 Serverless 的雲服務，當然參數調整好也可以當一般常見的 SPA、CMS…etc</p><h2 id="1st-amp-2nd-Cloud-Function-跟-Cloud-Run-有什麼差嗎？"><a href="#1st-amp-2nd-Cloud-Function-跟-Cloud-Run-有什麼差嗎？" class="headerlink" title="1st &amp; 2nd Cloud Function 跟 Cloud Run 有什麼差嗎？"></a>1st &amp; 2nd Cloud Function 跟 Cloud Run 有什麼差嗎？</h2><script defer class="speakerdeck-embed" data-slide="36" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>另外在 2023&#x2F;8&#x2F;10 Cloud Functions 也升級了，過往要做許多介接其他 GCP 服務大多都會使用 Cloud Run (Big Query、Cloud Storage、Eventarc..etc)，在這次的升級上讓 Functions 的底層置換成 Cloud Run，也就是說把底層都換成 Knative 的方式執行，如此一來 Google 能夠統一格式，用戶在操作上也不會搞混兩邊的 Container 差異</p><blockquote><ul><li>1st 用的方式有點像是 <a href="https://docs.openfaas.com/cli/install/">Open FaaS</a></li><li>2nd 用的 <a href="https://knative.dev/docs/">Knative</a><br>News: <a href="https://cloud.google.com/blog/products/serverless/cloud-functions-2nd-generation-now-generally-available">Cloud Functions 2nd gen is GA, delivering more events, compute and control</a></li></ul></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>最後再次感謝 GDG DevFest 2023 團隊給我這個演講機會來分享 - <a href="https://speakerdeck.com/line_developers_tw/empowering-community-driven-learning-through-serverless-practice?slide=45">Empowering Community-Driven Learning through Serverless Practice</a>，藉由這次的演講跟大家分享我做 Side Project 以來的一些心路歷程以及看法，若有任何的建議與回饋，都歡迎下方留言讓我知道唷！</p><script defer class="speakerdeck-embed" data-slide="45" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/devfest/1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;經歷過連續兩週兩場 &lt;a href=&quot;https://gdg.community.dev/events/details/google-gdg-taipei-presents-devfest-taipei-2023/&quot;&gt;DevFest 2023&lt;/a&gt; 的經驗(12&amp;#x2F;9, 12&amp;#x2F;16)，真的是把我畢生所學都拿出來榨乾了😆，但也很高興有機會在台中以及台北跟大家分享我在業餘時間透過 Google Cloud 開發 Side Project 的經驗談，以下內容為台北場內容，有興趣的跟著一起往下看吧！&lt;/p&gt;</summary>
    
    
    
    <category term="研討會" scheme="https://nijialin.com/categories/%E7%A0%94%E8%A8%8E%E6%9C%83/"/>
    
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
    <category term="Knative" scheme="https://nijialin.com/tags/Knative/"/>
    
    <category term="DevFest" scheme="https://nijialin.com/tags/DevFest/"/>
    
    <category term="Side Project" scheme="https://nijialin.com/tags/Side-Project/"/>
    
    <category term="Community" scheme="https://nijialin.com/tags/Community/"/>
    
  </entry>
  
  <entry>
    <title>如何設定 Cloud Function 2nd gen 來改善截圖爬蟲的效率！</title>
    <link href="https://nijialin.com/2024/02/13/gcp-cloud-function-gen2-with-line-bot/"/>
    <id>https://nijialin.com/2024/02/13/gcp-cloud-function-gen2-with-line-bot/</id>
    <published>2024-02-13T13:34:01.000Z</published>
    <updated>2024-04-03T18:17:40.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介紹"><a href="#背景介紹" class="headerlink" title="背景介紹"></a>背景介紹</h1><p><img src="https://nijialin.com/images/2024/gcp/1.png"></p><p>過年改寫了我自己的在台北常使用的路上攝影機截圖工具，一開始求方便在每次請求來時會在容器當中開啟 chrome 去截圖，但由於是 MVP 以及沒有放 queue 在前面讓請求排隊，因此這樣的做法就無法提供給別人使用。</p><p>因此為了可用性，需要把截圖功能透過排程(cronjob)去實作，所以這次就將截圖功能改搬到 Cloud Function 並搭配 Cloud Scheduler 排程抓取。</p><span id="more"></span><blockquote><p>感謝 @timfanda35 協助糾正錯誤，Cloud Run 也可以透過 Scheduler 來觸發 - <a href="https://cloud.google.com/run/docs/triggering/using-scheduler">Running services on a schedule</a></p></blockquote><p>過往我很習慣在 Cloud Run 上實作任何的功能，這次也是第一次實際操作 Cloud Function，以下就介紹一下兩者是如何搭配使用的！</p><h2 id="台北板場截圖-LINE-Bot"><a href="#台北板場截圖-LINE-Bot" class="headerlink" title="台北板場截圖 LINE Bot"></a>台北板場截圖 LINE Bot</h2><blockquote><p>參考上一篇文章：<a href="https://nijialin.com/2023/11/13/line-bot-capture-image-cloud-run/">在 Google Cloud Run 上安裝 Chromium 抓取 CCTV 影像</a></p></blockquote><p><img src="https://qr-official.line.me/sid/L/556trgib.png"></p><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>以下會簡介 Cloud Function 操作完後如何銜接 Cloud Run 的步驟，那就繼續往下看吧！</p><h2 id="建立第一個-Cloud-Function"><a href="#建立第一個-Cloud-Function" class="headerlink" title="建立第一個 Cloud Function"></a>建立第一個 Cloud Function</h2><p><img src="https://nijialin.com/images/2024/gcp/2.png"></p><p>前往 <a href="https://console.cloud.google.com/functions/list?hl=zh-tw">Cloud Function</a>，並在介面上按下<mark>建立函式</mark>，即可看到相關畫面</p><h2 id="直接線上搭配-Cloud-Shell-開始寫程式測試！"><a href="#直接線上搭配-Cloud-Shell-開始寫程式測試！" class="headerlink" title="直接線上搭配 Cloud Shell 開始寫程式測試！"></a>直接線上搭配 Cloud Shell 開始寫程式測試！</h2><p><img src="https://nijialin.com/images/2024/gcp/3.png"></p><p>把基本資訊設定完後，Cloud Function 這邊跟其他 FaaS 差不多，都有提供編輯界面供撰寫。而這邊夠更棒的是，GCP 的服務很多是搭配 Cloud Shell 讓功能可以在<strong>部署前先測試</strong>好，確認沒問題再部署上去，讓小本開發的我們可以避免來回部署花費了很多流量 💰🤣</p><h2 id="寫完-Cloud-Function-了，那-2nd-Gen-有什麼用？"><a href="#寫完-Cloud-Function-了，那-2nd-Gen-有什麼用？" class="headerlink" title="寫完 Cloud Function 了，那 2nd Gen 有什麼用？"></a>寫完 Cloud Function 了，那 2nd Gen 有什麼用？</h2><p><img src="https://nijialin.com/images/2024/gcp/4.png"></p><p>部署完後進來看看 Cloud Function，會發現上面怎麼會有個<strong>第二代</strong>的字眼，簡單來說是 Google 把 Cloud Function 整合進 Cloud Run，過往 Function 也是另外起 Container 沒錯，但在雲平台上看起來就是兩個不同的服務，藉由這樣整合也讓 Function 能使用到 Cloud Run 上面的很多好處，也可以從介面上直接通往 Cloud Run 開始操作。</p><p>相關操作範例如：「Eventarc、處理來自 Cloud Storage 或 BigQuery 的長請求、更多的 Cloud Events、併發處理…etc」</p><blockquote><p>更多介紹:<br><a href="https://cloud.google.com/blog/products/serverless/introducing-the-next-generation-of-cloud-functions">Supercharge your event-driven architecture with new Cloud Functions (2nd gen)</a> &gt; <a href="https://cloud.google.com/functions/docs/concepts/version-comparison">Cloud Functions version comparison</a></p></blockquote><h2 id="Cloud-Function-怎麼去-Cloud-Run？"><a href="#Cloud-Function-怎麼去-Cloud-Run？" class="headerlink" title="Cloud Function 怎麼去 Cloud Run？"></a>Cloud Function 怎麼去 Cloud Run？</h2><p><img src="https://nijialin.com/images/2024/gcp/5.png"></p><p>此外也能從介面上直接點選 🍔 直接前往 Cloud Run 設定，或是想要複製更多 Function 讓 Cloud Scheduler 使用，也都是沒有問題的！</p><h2 id="換過去有什麼差？"><a href="#換過去有什麼差？" class="headerlink" title="換過去有什麼差？"></a>換過去有什麼差？</h2><p><img src="https://nijialin.com/images/2024/gcp/6.png"></p><p>來到這邊之後就會跟原本使用 Cloud Run 的習慣一樣了 👏，想設定任何的 Cloud Event 或是調整和容器相關的係數，皆能在這邊操作，就不用分兩個畫面去調整了～</p><h2 id="如何在-Cloud-Run-上看？"><a href="#如何在-Cloud-Run-上看？" class="headerlink" title="如何在 Cloud Run 上看？"></a>如何在 Cloud Run 上看？</h2><p><img src="https://nijialin.com/images/2024/gcp/6.png"></p><p>在 Cloud Run 中也能知道這個容器是透過誰來 Build，如此一來也不用擔心說會不會改天就忘了 🤣</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這邊我的實作方式是在本地端先跑過一次 Code，再把程式轉貼上 Cloud Function 去測試，但這手動的步驟有點不優，往後若有開發上能夠讓體驗更好，我在另外寫一篇文章介紹，那就大家下回見囉！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景介紹&quot;&gt;&lt;a href=&quot;#背景介紹&quot; class=&quot;headerlink&quot; title=&quot;背景介紹&quot;&gt;&lt;/a&gt;背景介紹&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/gcp/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;過年改寫了我自己的在台北常使用的路上攝影機截圖工具，一開始求方便在每次請求來時會在容器當中開啟 chrome 去截圖，但由於是 MVP 以及沒有放 queue 在前面讓請求排隊，因此這樣的做法就無法提供給別人使用。&lt;/p&gt;
&lt;p&gt;因此為了可用性，需要把截圖功能透過排程(cronjob)去實作，所以這次就將截圖功能改搬到 Cloud Function 並搭配 Cloud Scheduler 排程抓取。&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
    <category term="Cloud Function" scheme="https://nijialin.com/tags/Cloud-Function/"/>
    
    <category term="Cloud Scheduler" scheme="https://nijialin.com/tags/Cloud-Scheduler/"/>
    
  </entry>
  
  <entry>
    <title>如何在主流前端框架上設定 GTM? 怎麼有些資料看起來沒收到?</title>
    <link href="https://nijialin.com/2024/01/28/google-analytics-and-tag-manager-setting-with-frontend-framework/"/>
    <id>https://nijialin.com/2024/01/28/google-analytics-and-tag-manager-setting-with-frontend-framework/</id>
    <published>2024-01-28T14:40:38.000Z</published>
    <updated>2024-01-30T04:26:32.045Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/ga/0.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於現在主流前端框架(Next, Nuxt)皆會透過 Virtual DOM 的方式渲染網站，在網站當中像是 class 就會有類似 <code>class=&quot;qwe-1234&quot;</code> 的呈現方式，且會階層往下，但這在 google analytics 當中抓資料會有問題，因為跟一般 SPA 網站渲染方式呈現比較不同</p><span id="more"></span><h2 id="延伸閱讀：Why-Virtual-DOM"><a href="#延伸閱讀：Why-Virtual-DOM" class="headerlink" title="延伸閱讀：Why Virtual DOM?"></a>延伸閱讀：Why Virtual DOM?</h2><blockquote><p>Next 或 Nuxt 前端框架使用 virtual DOM 的主要原因是為了提升網頁的效能和開發體驗。virtual DOM 是一種用 JavaScript 物件來模擬真實 DOM 的技術，它可以減少對真實 DOM 的操作，從而避免不必要的 reflow 或 repaint，這些過程會消耗瀏覽器的資源。virtual DOM 還可以利用 diff 演算法來計算出新舊 virtual DOM 之間的差異，並只更新有變動的部分，這樣可以進一步提高效率。<br>除了效能的優勢，virtual DOM 也可以讓開發者更方便地處理資料和畫面的變化，而不需要直接操作 DOM API。這樣可以減少程式碼的複雜度，並提高可讀性和可維護性。virtual DOM 還可以實現服務端渲染 (SSR)，這對於 SEO 和首頁載入速度有很大的幫助。</p></blockquote><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>假設我想在 GA 中監控事件以下範例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;qwe-123&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;asd-456&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;accountSetting&#x27;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我們會想在 GTM 後台設定抓取 <code>id=&#39;accountSetting&#39;</code>，設定就會跟以下很像：</p><p><img src="https://nijialin.com/images/2024/ga/1.png"></p><p>接著到 Tag Assistant (preview page) 中開啟 Debug mode 時，會發現事件似乎沒有被 Fire，以下先附上應該要成功的畫面：</p><p><img src="https://nijialin.com/images/2024/ga/4.png"></p><p>把事件點開之後才發現，怎麼內容都放在 Click Element(?) 初步猜測應該是 Virtual DOM 壓縮後讓 GA 找不到對應的欄位，因此將內容都放入 Element 當中，參考如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">  event:</span> <span class="string">&quot;gtm.click&quot;</span>,</span><br><span class="line"><span class="symbol">  gtm:</span> &#123;</span><br><span class="line"><span class="symbol">    uniqueEventId:</span> <span class="number">16</span>,</span><br><span class="line"><span class="symbol">    start:</span> <span class="number">1706415086221</span>, <span class="comment">// 開始時間</span></span><br><span class="line"><span class="symbol">    element:</span> <span class="string">&quot;HTMLImageElement: html &gt; body &gt; div#__next &gt; div.css-xg&quot;</span> +</span><br><span class="line">             <span class="string">&quot;fukl &gt; div.css-79njnh &gt; a.css-s401k6#accountSetting &gt; img&quot;</span>,</span><br><span class="line"><span class="symbol">    elementClasses:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">    elementId:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">    elementTarget:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">    elementUrl:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">    historyChangeSource:</span> <span class="string">&quot;pushState&quot;</span>,</span><br><span class="line"><span class="symbol">    oldUrl:</span> <span class="string">&quot;https://用戶訪問實際網址&quot;</span>,</span><br><span class="line"><span class="symbol">    newUrl:</span> <span class="string">&quot;https://應該是首頁&quot;</span>,</span><br><span class="line"></span><br><span class="line">    ...其餘監控資料</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="symbol">  eventCallback:</span> <span class="string">&quot;Function&quot;</span></span><br><span class="line"></span><br><span class="line">  ...其他自第義的內容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>經驗分享：在越接近首頁位置的 html id 以及 class 會被放到 Element ID(Class) 欄位當中，但隨著網頁的商業邏輯越來越多，包多層之後 GTM 會搞混，因此建議方式還是可以從 Element 裡面抓</p></blockquote><p>因此這邊能解的方式如下：</p><p><img src="https://nijialin.com/images/2024/ga/2.png"></p><p>透過 <code>CSS Selector</code> 來指定想 tracking 的 HTML tag，但這邊需要 Double confirm 的地方是，有時候實作上後面的階層可能不一定有東西，因此這邊能做的方式大概為:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#accountSetting, #accountSetting *</span><br></pre></td></tr></table></figure><blockquote><p>在 GTM CSS Selector 這邊可以用 <code>,</code> 來劃分條件，空白+<code>*</code> 則是代表後面不論接什麼，只要 ID &#x3D; accountSetting 就能 fire tracking，</p></blockquote><h2 id="Page-Path-的-contains-設定"><a href="#Page-Path-的-contains-設定" class="headerlink" title="Page Path 的 contains 設定"></a>Page Path 的 contains 設定</h2><p>建議使用 <code>contains</code>，因為可能會因為不同網站導流而在後面放了許多參數，只要路徑有符合就可以收進來<br><img src="https://nijialin.com/images/2024/ga/3.png"></p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>會發現這個操作方式是發現，設定了十幾個 click tracking event，結果只有幾個有成功，與同事合力才發現原來有前端框架的 Virtual DOM 影響的問題。</p><p>往後若想透過GA來收集用戶行為時，記得要先知道前端是如何構建而成，SPA or Web framework，才能知道自己抓的東西能夠符合團隊需求喔！</p><blockquote><p>預祝大家資料都能被好好的 tracking，數據收滿滿!!</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/ga/0.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由於現在主流前端框架(Next, Nuxt)皆會透過 Virtual DOM 的方式渲染網站，在網站當中像是 class 就會有類似 &lt;code&gt;class=&amp;quot;qwe-1234&amp;quot;&lt;/code&gt; 的呈現方式，且會階層往下，但這在 google analytics 當中抓資料會有問題，因為跟一般 SPA 網站渲染方式呈現比較不同&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="GTM" scheme="https://nijialin.com/tags/GTM/"/>
    
    <category term="GA" scheme="https://nijialin.com/tags/GA/"/>
    
    <category term="Google Analytics" scheme="https://nijialin.com/tags/Google-Analytics/"/>
    
  </entry>
  
  <entry>
    <title>【雪之忍法帖】白馬滑雪旅程雜記</title>
    <link href="https://nijialin.com/2024/01/06/snowboarding-2023-to-2024/"/>
    <id>https://nijialin.com/2024/01/06/snowboarding-2023-to-2024/</id>
    <published>2024-01-06T07:16:13.000Z</published>
    <updated>2024-01-27T13:03:35.282Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/snowboard/DCDC9CA0-4FAB-4F1D-9A92-BF8A14FFFED9.jpg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大約在 9~10 月安排了這次跨年滑雪的旅程，以下就跟大家分享這次大約的花費，給未來想去白馬滑雪的朋友參考囉！</p><h1 id="TL-DR-大致花費"><a href="#TL-DR-大致花費" class="headerlink" title="TL;DR 大致花費"></a>TL;DR 大致花費</h1><ul><li><p>跨年機票 12&#x2F;27 - 1&#x2F;4 的國泰航空機票買了 16,000</p></li><li><p>一天住宿費大概在 1,500</p><span id="more"></span></li><li><p>一日券：6000 yen，大概台幣 1500</p></li><li><p>夜滑：4200 yen，大約台幣 1000</p></li><li><p>雪板&#x2F;雪鞋&#x2F;安全帽：五天 20,000 yen，一天大約台幣 1,100</p></li><li><p>長野-白馬巴士：大概 300 台幣一趟</p></li><li><p>東京-長野新幹線：2000 台幣</p></li></ul><h1 id="交通-東京-長野-白馬"><a href="#交通-東京-長野-白馬" class="headerlink" title="交通: 東京 - 長野 - 白馬"></a>交通: 東京 - 長野 - 白馬</h1><p>滑雪前因為有其他行程在東京，因此我先從 klook 上預約買了 <strong>東京-長野</strong> 以及 <strong>長野-東京</strong> 的，這邊手續費會被收 300-400 元，而回程因為不好訂票，需在 klook 重複訂幾次，klook app 上有個操作陷阱需要小心</p><blockquote><p>假設訂了 1&#x2F;3 沒成功，按了重新預定之後會在一兩秒後換成訂票當時的下週，當時我就太相信 app 且按太快，只能怪自己沒仔細看，如果有使用 klook 訂票要注意這問題唷！<br>但若是淡季去，建議就在現場買吧！不會被抽手續費唷</p></blockquote><p>關於長野如何到白馬，可以參考 <a href="https://www.alpico.co.jp/tc/timetable/nagano/r-nagano-hakuba/">ALPICO 的網站</a>，裡頭有中文介面，看著 <mark>长野站东口 ➡️ 白马八方巴士总站</mark> 即可，時間上看沒有預約的就好，這樣到現場排隊就可以了</p><h1 id="住宿-パルズイン雷鳥民宿"><a href="#住宿-パルズイン雷鳥民宿" class="headerlink" title="住宿 - パルズイン雷鳥民宿"></a>住宿 - パルズイン雷鳥民宿</h1><p><img src="https://nijialin.com/images/2024/snowboard/A8C5C045-0DA3-4C49-9678-A875FA1423AB.jpg"></p><p>這次 <a href="https://www.airbnb.com.tw/rooms/749618942384864422?source_impression_id=p3_1704449841_LgnAPsH9/fNsed5t">パルズイン雷鳥</a> 我是在 Airbnb 上訂的，這邊早餐會在前一天詢問預計幾點吃，早餐量也是一定讓你吃飽飽，晚餐也可以在裡面付費，附近沒啥吃的，在這裡吃也很美味～</p><p>此外可以在這裡買雪票，5500 yen 一張白馬五龍一日券(500 保證金)、共用衛浴有泡澡池、洗衣服 300 yen、烘乾 100 yen&#x2F;30 mins、有烘乾室、有雪場接駁車(走路比較快但爬山累)</p><blockquote><p>附近走路 15 mins 才有 7-11，因此去的話建議把宵夜跟補給品一次買齊</p></blockquote><h1 id="白馬五龍場地狀況"><a href="#白馬五龍場地狀況" class="headerlink" title="白馬五龍場地狀況"></a>白馬五龍場地狀況</h1><p><img src="https://nijialin.com/images/2024/snowboard/92350069-77F1-4F8D-9BA2-CBFCCD202389.jpg"></p><p>2023&#x2F;12 日本這邊是暖冬，因此今年雪其實不夠多，整體滑起來很像在滑冰塊(快接近小叮噹的人造雪)，但很幸運的在跨年夜滑從下雨換成下雪，至少補充的雪，也讓照片看起來比較美了～～</p><h1 id="坐到山頂先去看看雪地版本的地藏王"><a href="#坐到山頂先去看看雪地版本的地藏王" class="headerlink" title="坐到山頂先去看看雪地版本的地藏王"></a>坐到山頂先去看看雪地版本的地藏王</h1><p><img src="https://nijialin.com/images/2024/snowboard/8A4361C3-4B51-4450-82EE-0293AB2FFB6D.jpg"></p><p>來白馬五龍一定要來看一次山頂的地藏王，這次附近的雪量也算還行，不過因為不太懂爬山跟調整呼吸的技巧，導致這次上去有點缺氧，但整體來說有一次很棒的體驗！推薦大家千里迢迢坐車來，別忘了來山頂看看喔</p><h1 id="滑雪狀態"><a href="#滑雪狀態" class="headerlink" title="滑雪狀態"></a>滑雪狀態</h1><p><img src="https://nijialin.com/images/2024/snowboard/A60AAACA-1F2B-4516-86F0-047FB8D148F0.jpg"></p><p>理論上寫在已經在雪季了，但也因為暖冬所以雪量不夠，但身為滑雪愛好者們來這面也是很瘋狂，排隊也都沒在客氣，五龍新手區排隊應該都需要 5~10 mins，靠近午餐時間都會比較好排些，建議大家身上可以放些巧克力之類即時補充，等大家吃完再去吃，排隊也不用排這麼久。</p><p>雪場吃飯平均應該要花 2000 yen 左右，但來這邊也沒啥東西能吃，都來了還是在這邊吃吧！</p><p>這邊雪場可以滑到白馬 47 那邊，早上熱身完可以先滑過去吃飯，然後搭回山上再回白馬五龍～</p><h1 id="跨年夜-我可終於等到雪了！"><a href="#跨年夜-我可終於等到雪了！" class="headerlink" title="跨年夜: 我可終於等到雪了！"></a>跨年夜: 我可終於等到雪了！</h1><p><img src="https://nijialin.com/images/2024/snowboard/ECC593B7-3F2D-417A-9559-DB241FA90472.jpg"></p><p>這次白馬相關的 IG 都有寫說在五龍會有跨年煙火，當天夜滑 4200 yen 可以滑到 11:30(平常只到 9:00) 相當划算，我大概滑到 10:30 下去民宿洗澡換衣服再回來，時間算的都剛剛好～</p><h1 id="突發事件：-地震"><a href="#突發事件：-地震" class="headerlink" title="突發事件： 地震"></a>突發事件： 地震</h1><p><img src="https://nijialin.com/images/2024/snowboard/003BF295-A275-4C60-8141-0728598A470E.png"></p><p>因為之後要去其他地方滑雪，因此先安裝了 <strong>承換 NAVITIME</strong>，結果當天要地震前 app 一直推播通知，這點日本真的做得非常好，讓日本國內的民眾都可以快速接收到訊息 👍</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><img src="https://nijialin.com/images/2024/snowboard/C2FA518A-C020-4C65-9330-9F55967C8B48.jpg"></p><p>希望以上內容給預計有想之後跨年滑雪的讀者們參考參考，這次體驗也非常棒！雖然花了不少錢，但真的買到很多快樂 😆，那就後續的文章再繼續分享新東西給大家囉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/snowboard/DCDC9CA0-4FAB-4F1D-9A92-BF8A14FFFED9.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大約在 9~10 月安排了這次跨年滑雪的旅程，以下就跟大家分享這次大約的花費，給未來想去白馬滑雪的朋友參考囉！&lt;/p&gt;
&lt;h1 id=&quot;TL-DR-大致花費&quot;&gt;&lt;a href=&quot;#TL-DR-大致花費&quot; class=&quot;headerlink&quot; title=&quot;TL;DR 大致花費&quot;&gt;&lt;/a&gt;TL;DR 大致花費&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;跨年機票 12&amp;#x2F;27 - 1&amp;#x2F;4 的國泰航空機票買了 16,000&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一天住宿費大概在 1,500&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="Japan" scheme="https://nijialin.com/tags/Japan/"/>
    
    <category term="Snowboard" scheme="https://nijialin.com/tags/Snowboard/"/>
    
  </entry>
  
  <entry>
    <title>2023  Personal Review</title>
    <link href="https://nijialin.com/2023/12/23/nijia-2023-review/"/>
    <id>https://nijialin.com/2023/12/23/nijia-2023-review/</id>
    <published>2023-12-23T04:42:18.000Z</published>
    <updated>2024-01-05T10:03:45.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/20231222_222229_ninja_cat.jpg"></p><h1 id="🐔-前言"><a href="#🐔-前言" class="headerlink" title="🐔 前言"></a>🐔 前言</h1><p>趁出國跨年之前來整理今年的一些事情，期許 2024 年的自己可以持續跨出舒適圈</p><p>自覺自己是一個很反骨的個性，不喜歡被定義就是<code>怎樣怎樣</code>的人，因此今年對我來說就是一直跨出舒適圈的一年，對我來說非常有趣，但偶爾有時候也是覺得自己到底在幹嘛，把自己搞這麼累 😄 因此也要適度地透過各種方式來平衡自己的身心健康 (<del>花錢就對了</del>)</p><span id="more"></span><h1 id="🦉-心態轉換"><a href="#🦉-心態轉換" class="headerlink" title="🦉 心態轉換"></a>🦉 心態轉換</h1><p>我覺得這最重要，因此還是要放前面點 👀️ 。進入三十歲之後，有種該為什麼負責的感覺浮現上來：</p><ul><li>許多事情與話在發生之前，總是會先想下它後面帶來的後果到底是什麼？做&#x2F;看到事前需要思考前因後果，在心中盤旋，像是跳舞一樣，需要先算好接下來的節拍大概會怎麼走，讓每一件小事能夠更好的被執行</li><li>今年一直感應不到成就感這件事，直到接觸到滑雪與滑板。一直對於自己運動學習能力相當有自信的我，居然會在這兩個運動上非常受挫，重新考驗自己在<strong>平衡</strong>上的控制力，也有種重新對於任何事情燃起鬥志的感覺</li><li>開始注重自身的需求，今年發生了很嚴重的胃食道逆流，把自己搞超慘，因此很多時候也開始要挑著吃了，不能想到什麼就要開吃<ul><li>但很多時候為了給自己心情好，就…………🎉️</li></ul></li><li>如果不知道當下該怎麼辦才好，就將時間安排好，按表操課，時間會帶你去你該到的地方 (<a href="https://nijialin.com/2023/11/22/nijia-30-years-old-4-quarter/">人生過了三分之一，做點紀錄</a>)</li><li>任何學習的東西都不會沒用，現在的所有選擇皆是過去點點所累積的，千萬別小看自己學的一切</li></ul><h1 id="🐳-工作上的挑戰"><a href="#🐳-工作上的挑戰" class="headerlink" title="🐳 工作上的挑戰"></a>🐳 工作上的挑戰</h1><ul><li><p>從年初的 TECHPULSE，親身經歷與學習許多專案的眉角，在隕石飛來飛去情況下還是讓研討會順利舉辦 🎉️ 現場人流來了 1400 位左右，也讓同仁們可以有個很棒的演講環境！經歷了兩屆的內部畢業展，今年首次將 TECH FRESH 畢業分享會對外，讓畢業的同學能夠有一個活動幫自己在 LINE 的實習生涯畫下個完美句點，擁有一個屬於實習生的活動。也讓這個空間能夠擠下 80 位參加者 🎉️</p></li><li><p>經歷了兩屆的內部畢業展，今年首次將 TECH FRESH 畢業分享會對外，讓畢業的同學能夠有一個活動幫自己在 LINE 的實習生涯畫下個完美句點，擁有一個屬於實習生的活動。也讓這個空間能夠擠下 80 位參加者 🎉️</p></li><li><p>下半年首度挑戰帶產品的專案，初期皆須要花上非常多時間去釐清與互相學習各種開發的習慣，希望這產品能夠越來越好，但既然還沒上線就之後再來分享經驗嚕！</p></li></ul><blockquote><p>今年也很感謝主管們的愛戴，拿了兩次的 spot bonus，讓我在挑戰不同 role 下還能夠被認可，無疑是對我職涯非常棒的推動力！</p></blockquote><h1 id="下班後-🎮🎿"><a href="#下班後-🎮🎿" class="headerlink" title="下班後 🎮🎿"></a>下班後 🎮🎿</h1><ul><li><p>買了小時候最喜歡打的快打旋風，剛好在他出新的時候跟上購買，經歷過瘋狂的研究後，也終於抵達人生第一次玩遊戲抵達最高的牌位 - 白金，雖然後續陸續時間沒調整好，加上需要大量練習而停擺，但這也是個非常棒的經驗！</p></li><li><p>另一個目前很喜歡的運動 - 滑板，一開始加入目標只是為了可以幫助我加強滑雪的技能而買了衝浪滑板，再玩了一陣子之後忽然愛上了地形帶來的誘惑。經驗不夠在美堤滑板場想玩 J 台，太相信自己運動神經下結果摔進醫院急診，搞得自己整個月右腳都怪怪的。 <a href="https://nijialin.com/2023/10/26/skateboard-rainbow-park/">【滑板】彩虹輪狀車練習場道路指引</a></p></li><li><p>而後來買了二手技術板來玩，忽然就著了魔似的一直玩，但因為玩它除了地形外，接下來就是要會玩到輪胎離開地面的動作，想想也是非常的高風險，因此在看同事也去請教練交網球學新技能，自己也找了教練來教學，讓自己的基礎可以打穩之後再來陸續挑戰更難的招式，希望滑雪玩回來之後不要放棄這個運動 👀️</p></li></ul><blockquote><p><a href="https://maps.app.goo.gl/i2FSt9AztSkuLiH78">滑板地圖清單</a></p></blockquote><h1 id="🎲-近期的體悟"><a href="#🎲-近期的體悟" class="headerlink" title="🎲 近期的體悟"></a>🎲 近期的體悟</h1><p>「<mark>價值是跟自己比，旁邊只是參考</mark>」：許多人喜歡各種比較薪水、環境、背景等等，但我想每個人的生活跟成長歷程都不同，不可同期比較，或許大家物以類聚，但終究對手還是自己，如果在當下很努力了卻也沒獲得自認的相對價值，那我相信去其他地方一定可以找到更適合自己的位置。</p><blockquote><p>不論是工作、運動、感情…etc</p></blockquote><p>「<mark>堅持下去</mark>」：去年陪著準備英文，本來以為自己會中斷，結果就持續在 Cambly 堅持到現在了，剛好在專案上也需要跟英文很好的韓國人對口，也讓我在溝通上至少不會怕了，盡可能的表達自己的需求，畢竟大家都不是 native，先怕就輸了！</p><blockquote><p>現在的成就，是過去的種種累積起來的，學的東西都不會沒用，總有一天會用到它</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/20231222_222229_ninja_cat.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;🐔-前言&quot;&gt;&lt;a href=&quot;#🐔-前言&quot; class=&quot;headerlink&quot; title=&quot;🐔 前言&quot;&gt;&lt;/a&gt;🐔 前言&lt;/h1&gt;&lt;p&gt;趁出國跨年之前來整理今年的一些事情，期許 2024 年的自己可以持續跨出舒適圈&lt;/p&gt;
&lt;p&gt;自覺自己是一個很反骨的個性，不喜歡被定義就是&lt;code&gt;怎樣怎樣&lt;/code&gt;的人，因此今年對我來說就是一直跨出舒適圈的一年，對我來說非常有趣，但偶爾有時候也是覺得自己到底在幹嘛，把自己搞這麼累 😄 因此也要適度地透過各種方式來平衡自己的身心健康 (&lt;del&gt;花錢就對了&lt;/del&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>【GCP】Pub/Sub Python 實戰紀錄 | DevFest 2023 台中工作坊</title>
    <link href="https://nijialin.com/2023/11/26/gcp-pubsub-python/"/>
    <id>https://nijialin.com/2023/11/26/gcp-pubsub-python/</id>
    <published>2023-11-26T14:52:34.000Z</published>
    <updated>2023-12-22T07:29:39.451Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/pubsub/OIG.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此篇文章為 <a href="https://gdg.community.dev/events/details/google-gdg-taichung-presents-devfest-taichung-2023/">2023&#x2F;12&#x2F;09 DevFest Taichung Serverless workshop</a> 步驟文章，如果有需要透過 GCP Pub&#x2F;Sub 將訊息轉打給訂閱的 Cloud Run endpoint，可以參考看看這篇文章喔！</p><span id="more"></span><h1 id="前置準備"><a href="#前置準備" class="headerlink" title="前置準備"></a>前置準備</h1><ul><li>需要有 GCP 的帳戶，有綁信用卡可開啟服務，且需要開啟個專案</li><li>需要有 LINE 帳號，且要能登入 <a href="https://developers.line.biz/console/">LINE Developer Console</a><ul><li>要能開啟一個 Provider + Channel</li></ul></li></ul><blockquote><p>範例專案：<a href="https://github.com/gcp-serverless-workshop/notifier-line-bot/tree/main">gcp-serverless-workshop&#x2F;notifier-line-bot</a></p></blockquote><h2 id="本地開發參考以下步驟"><a href="#本地開發參考以下步驟" class="headerlink" title="本地開發參考以下步驟"></a>本地開發參考以下步驟</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.<span class="keyword">com</span>:gcp-serverless-workshop/notifier-<span class="built_in">line</span>.git</span><br><span class="line"><span class="keyword">cd</span> notifier-<span class="built_in">line</span>/</span><br><span class="line"><span class="keyword">python3</span> -<span class="keyword">m</span> venv venv</span><br><span class="line"><span class="keyword">source</span> venv/bin/activate</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="服務使用介紹"><a href="#服務使用介紹" class="headerlink" title="服務使用介紹"></a>服務使用介紹</h1><p><img src="https://nijialin.com/images/2023/pubsub/1.png"></p><p>首先到 GCP 上的 <a href="https://console.cloud.google.com/cloudpubsub/topic/create">Pub&#x2F;Sub 服務</a>中按下<strong>建立主題</strong>，這邊很貼心的下方也有加上晚點會使用到的 topic name</p><p><img src="https://nijialin.com/images/2023/pubsub/2.png"></p><p>進到 Topic 頁面，往下滑找到<strong>建立訂閱項目</strong>，建立一個<strong>項目 ID</strong>，稍候測試與設定會需要用它</p><p><img src="https://nijialin.com/images/2023/pubsub/3.png"></p><h2 id="部署-Cloud-Run"><a href="#部署-Cloud-Run" class="headerlink" title="部署 Cloud Run"></a>部署 Cloud Run</h2><p>接著來到工作坊的專案 <a href="https://github.com/gcp-serverless-workshop/notifier-line-bot">gcp-serverless-workshop&#x2F;notifier-line-bot</a> 下，按下下方的部署按鈕，接下來會進入 Cloud Shell 的部分</p><p><img src="https://nijialin.com/images/2023/pubsub/cloudshell.png"></p><blockquote><p>Cloud Shell 有上限：<a href="https://cloud.google.com/shell/docs/quotas-limits">https://cloud.google.com/shell/docs/quotas-limits</a></p></blockquote><p>跟 cloud build 有關皆需要以下權限 (<a href="https://cloud.google.com/run/docs/deploying-source-code#permissions_required_to_deploy">URL</a>)</p><ul><li>Cloud Build Editor role</li><li>Artifact Registry Admin role</li><li>Storage Admin role</li><li>Cloud Run Admin role</li><li>Service Account User role</li></ul><h2 id="LINE-Bot-建立與設定-Cloud-Run-環境變數"><a href="#LINE-Bot-建立與設定-Cloud-Run-環境變數" class="headerlink" title="LINE Bot 建立與設定 Cloud Run 環境變數"></a>LINE Bot 建立與設定 Cloud Run 環境變數</h2><p>接著是建立官方帳號，詳細步驟請參考 <a href="https://developers.line.biz/en/docs/messaging-api/getting-started/#step-one-enable-use-of-messaging-api">LINE Developers 官方文件</a>，主要我們要做到可以<a href="https://developers.line.biz/en/docs/messaging-api/building-bot/#setting-webhook-url">設定 webhook URL 這個部分</a>，把剛剛佈署完的 Cloud Run 網址複製到 Webhook 欄位上： <code>https://CLOUD_RUN_URL/webhooks/line</code> (如果是使用這個<a href="https://github.com/gcp-serverless-workshop/notifier-line">範例專案</a>)</p><p><img src="https://nijialin.com/images/2023/pubsub/6.png"></p><ul><li>需要到 <a href="https://manager.line.biz/">Official Account Manager</a>將 LINE Bot 群組功能打開，以供測試使用</li><li>將 LINE Bot 的 ACCESS—TOKEN 以及 SECRET 放入 Cloud Run 環境變數中<ul><li>LINE_CHANNEL_ACCESS_TOKEN&#x3D;your_line_channel_access_token</li><li>LINE_CHANNEL_SECRET&#x3D;your_line_channel_secret</li></ul></li><li>把 Event 當中的 LINE 群組 ID 存下來放在 Cloud Run 環境變數中<ul><li>LINE_GROUP_ID&#x3D;</li></ul></li></ul><h2 id="回到-GCP-Pub-x2F-Sub-上"><a href="#回到-GCP-Pub-x2F-Sub-上" class="headerlink" title="回到 GCP Pub&#x2F;Sub 上"></a>回到 GCP Pub&#x2F;Sub 上</h2><p><img src="https://nijialin.com/images/2023/pubsub/4.png"></p><p>這部份把 Cloud Run 的 Domain 設定到 訂閱項目 ID(Subscribe Topic ID)上，進入到上圖的畫面，按下<strong>編輯</strong></p><p><img src="https://nijialin.com/images/2023/pubsub/5.png"></p><p>把傳送類型從 <strong>提取</strong> -&gt; <strong>推送</strong>，並且把**端點網址(Endpoint)**換成 Cloud Run 的 Domain，並加上 <code>/sub</code> (專案設定的路徑)</p><h2 id="寫一個-pub-py-來試試看"><a href="#寫一個-pub-py-來試試看" class="headerlink" title="寫一個 pub.py 來試試看"></a>寫一個 pub.py 來試試看</h2><p>參考 <a href="https://github.com/gcp-serverless-workshop/notifier-line-bot/blob/main/pub.py">gcp-serverless-workshop&#x2F;notifier-line</a>，我們可以針對線上環境去 pub data 去 topic，其中有些需要注意的：</p><ul><li>需到 GCP Service Accounts 中拿取一把金鑰，<code>放到本專案當中</code>，是 JSON 格式，並且把路徑置換<ul><li>第 9 行：<code>os.environ[&#39;GOOGLE_APPLICATION_CREDENTIALS&#39;] = &#39;YOUR_GCP_CA_PATH&#39;</code><ul><li>開啟終端機，執行 <code>pwd</code>，並且把檔案名字加在路徑後方</li></ul></li></ul></li><li>第 12 行：project_id &#x3D; “換成你 GCP Project ID”</li><li>第 13 行：topic_id &#x3D; “你剛剛建立的 TOPIC ID”</li></ul><h2 id="測試看看"><a href="#測試看看" class="headerlink" title="測試看看"></a>測試看看</h2><p><img src="https://nijialin.com/images/2023/pubsub/code.png"></p><p>接著可以在本地端 <code>python pub.py</code> 來把消息疼過 GCP CRED 打上去 Pub&#x2F;Sub，接下來看一下訊息有沒有轉打到 Cloud Run。</p><blockquote><p>如果測試發現有任何環節看不到，可以先在本地端把 API Server 起起來，然後用 ngrok 之類代理本地服務去測試，並且把 Pub&#x2F;Sub 服務的網址先換掉來 debug，接著再看看 pub.py 是否有東西沒準備好</p></blockquote><blockquote><p>ngrok 可以參考這篇文章 - <a href="https://ithelp.ithome.com.tw/articles/10249308">Day 20 GCP 公有雲_雲端事件消息傳遞服務實戰 - Pub&#x2F;Sub 組建測試之路</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><img src="https://nijialin.com/images/2023/pubsub/intro.jpeg"></p><p>由於這次工作坊中的範例專案是先以 LINE 群組推播為主(Push Message)，因此在環境變數中會先有一個 <strong>LINE_GROUP_ID</strong> 來指定推送，如果有其他需求可以把 Flex Message 以及 Push Message 換成你想要的內容喔！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/pubsub/OIG.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;此篇文章為 &lt;a href=&quot;https://gdg.community.dev/events/details/google-gdg-taichung-presents-devfest-taichung-2023/&quot;&gt;2023&amp;#x2F;12&amp;#x2F;09 DevFest Taichung Serverless workshop&lt;/a&gt; 步驟文章，如果有需要透過 GCP Pub&amp;#x2F;Sub 將訊息轉打給訂閱的 Cloud Run endpoint，可以參考看看這篇文章喔！&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="Python" scheme="https://nijialin.com/tags/Python/"/>
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Pub/Sub" scheme="https://nijialin.com/tags/Pub-Sub/"/>
    
  </entry>
  
  <entry>
    <title>人生過了三分之一，做點紀錄</title>
    <link href="https://nijialin.com/2023/11/21/nijia-30-years-old-4-quarter/"/>
    <id>https://nijialin.com/2023/11/21/nijia-30-years-old-4-quarter/</id>
    <published>2023-11-21T16:48:29.000Z</published>
    <updated>2023-11-21T16:48:29.226Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/skateboard/S__15876103.jpg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想想最近又到了年末了，過往都會幫自己的一年做個結尾，但我覺得人生過了三分之一應該要經常的幫自己更新一下，避免未來開始忘東忘西時，卻忘了自己這陣子所獲得的一些寶貴經驗～</p><span id="more"></span><h1 id="近期一週行程-早、中、晚"><a href="#近期一週行程-早、中、晚" class="headerlink" title="近期一週行程(早、中、晚)"></a>近期一週行程(早、中、晚)</h1><ol><li>健身、上班、滑板</li><li>健身、上班、滑板、上英文課</li><li>睡飽、上班、打掃、上英文課</li><li>健身、上班、羽球社(滑板)</li><li>睡飽、上班、滑板<ol><li>近期太多參訪早上都不練 👀</li></ol></li><li>滑板、逛街、寫專案、打遊戲</li><li>滑板、逛街、寫專案、打遊戲</li></ol><p>之前寫過一篇「<a href="https://nijialin.com/2023/10/26/skateboard-rainbow-park/">【滑板】彩虹輪狀車練習場道路指引</a>」，為了年底滑雪去玩滑板，但自己實在太愛玩雙邊平衡，因此就跑來玩技術版，但因為摔太嚴重信心不足，只好請教練來幫我練動作…這邊還是很推薦各種運動初期別為了省錢，導致後面受傷傷錢又傷身 🥲，有點年紀了不能這樣摔。</p><blockquote><p>滑板同時也認識了很多同好，雖然以前都想著這些人應該很難接近，但加入這文化之後才發現他迷人的地方，但任何或運動都一樣，該給人家尊重的地方還是要給夠喔！</p></blockquote><h1 id="工作上的整理"><a href="#工作上的整理" class="headerlink" title="工作上的整理"></a>工作上的整理</h1><p>近期有機會帶專案，雖然性質跟正規專案有點不同，但也因此學了很多技能，也請教了許多公司的前輩，除了基本的敏捷流程以外，也學會整理資訊，讓作為 TPM 角色的我可以對整個專案的狀態更清晰，而不是淪為一個報告機器人的角色，這也讓我在工作的目標上做了一個很大的突破！也在這當中學習到許多合作的細節，讓雙方都能能在最短時間內抓到問題的重點，就算當中有些內容想了很氣，但還是要先回歸主題，到底要的東西是什麼…未來若有機會再來好好的分享過程。</p><h1 id="有什麼遺憾嗎？"><a href="#有什麼遺憾嗎？" class="headerlink" title="有什麼遺憾嗎？"></a>有什麼遺憾嗎？</h1><p>雖然人生過了三分之一，到了人生的其中一個 milestone，身邊很多同學都在結婚生小孩，但想想在這這年紀還可以玩自己喜歡的事情真的滿難得的！目標也是多多培養自己多元的興趣，除了工作上的努力，也要幫自己，並幫助自己重回那熱情滿滿的狀態，避免燃燒殆盡。</p><p>同時也覺得，人生在此時此刻的選擇上沒有一定的對錯，可能會對這陣子的某個行為覺得不應該，但我想這就是人生一部分，過去的點滴造就了現在的自己，想想他是未來的養分，應該就不會那麼的糾結過去那錯誤的選擇了，選錯再調整嘛～哪有什麼一定的對吧！</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>雖然最近過的有點太滋潤了，但我想人生中許多時候就是要多多平衡一下自己身心理的狀態，在可控制的情況下我認為作些踰矩的事情是合理的</p><ul><li>不開心想吃東西但怕胖？吃</li><li>最近穿著都很黯淡？買</li><li>家具缺點什麼更好些？買</li></ul><p>以上也分享最近的一些心態上以及近期的狀態，歡迎分享你的點子跟觀點喔！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/skateboard/S__15876103.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;想想最近又到了年末了，過往都會幫自己的一年做個結尾，但我覺得人生過了三分之一應該要經常的幫自己更新一下，避免未來開始忘東忘西時，卻忘了自己這陣子所獲得的一些寶貴經驗～&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>處理 Python 中的 ImportError: cannot import name &#39;url_quote&#39; from &#39;werkzeug.urls</title>
    <link href="https://nijialin.com/2023/11/20/python-flask-url-quote-import-error-werkzeug/"/>
    <id>https://nijialin.com/2023/11/20/python-flask-url-quote-import-error-werkzeug/</id>
    <published>2023-11-20T04:22:49.000Z</published>
    <updated>2023-11-20T04:22:49.503Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期總算有空寫一些 side project，當然同時也會來 maintain 有在使用的專案，但因為過去都使用 Flask(近期都 FastAPI)，有些Code年久失修，或是有升級版本，都會造成 Cloud Run 上的佈署失敗，以下就提供解法給大家。</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>今天再翻新之前寫的 code，過去是使用 flask 撰寫 <a href="https://github.com/louis70109/line-bot-gitbub-actions-receiver">GitHub Link</a></p><p>因為本來只想說增加個 <a href="https://github.com/louis70109/line-bot-gitbub-actions-receiver/blob/master/controller/line_controller.py#L106">LINE Bot 的判斷式</a>，結果發現 log 一直出現<code>&quot;ImportError: cannot import name &#39;url_quote&#39; from &#39;werkzeug.urls&#39;&quot;</code></p><p>經過了搜尋之後發現可能是 Werkzeug 可能有升版本造成的，近期似乎升到 3.x.x，但由於我使用的 Flask 框架只吃到 2.2.x 版本，因此只要把以下兩個版本<a href="https://github.com/louis70109/line-bot-gitbub-actions-receiver/blob/master/requirements.txt#L9">鎖住在 requirements.txt</a> 就沒問題囉！</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Flask</span>==<span class="number">2</span>.<span class="number">2</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Werkzeug</span>==<span class="number">2</span>.<span class="number">2</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>參考 <a href="https://stackoverflow.com/questions/77213053/why-did-flask-start-failing-with-importerror-cannot-import-name-url-quote-fr">stack overflow</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>大家在做完 side project 時可以使用 <code>pip freeze &gt; requirements.txt</code> 把版本鎖起來喔！這樣才會避免出現像我一樣的問題 😆</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近期總算有空寫一些 side project，當然同時也會來 maintain 有在使用的專案，但因為過去都使用 Flask(近期都 FastAPI)，有些Code年久失修，或是有升級版本，都會造成 Cloud Run 上的佈署失敗，以下就提供解法給大家。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://nijialin.com/categories/Python/"/>
    
    
    <category term="Python" scheme="https://nijialin.com/tags/Python/"/>
    
    <category term="Flask" scheme="https://nijialin.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>在 Google Cloud Run 上安裝 Chromium 抓取 CCTV 影像</title>
    <link href="https://nijialin.com/2023/11/13/line-bot-capture-image-cloud-run/"/>
    <id>https://nijialin.com/2023/11/13/line-bot-capture-image-cloud-run/</id>
    <published>2023-11-13T08:57:13.000Z</published>
    <updated>2023-11-13T08:57:13.047Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期因為有玩滑板，而且身處台北很容易下雨，因此需要找到加入了交流社群，其中設定了一些指令可以讓社群機器人可以提供 CCTV 的畫面，但其中因為需要去社群當中打指令對於一個剛加入的人有點害羞，有這些攝影機畫面真的可以幫助看是否要出門(大部分場地都室外)，但身為工程師會想要按個按鍵就出現，因此就有以下文章囉！</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><h2 id="安裝-Chromium-在-Container-上"><a href="#安裝-Chromium-在-Container-上" class="headerlink" title="安裝 Chromium 在 Container 上"></a>安裝 Chromium 在 Container 上</h2><ol><li>很多人應該在測試時因為歷史關係，環境都已經有安裝，因此在 <code>requirements.txt</code> 上需要裝上:</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">selenium</span></span><br><span class="line"><span class="attribute">webdriver</span>-manager</span><br><span class="line"><span class="attribute">chromedriver</span>-binary==<span class="number">77</span>.<span class="number">0</span>.<span class="number">3865</span>.<span class="number">40</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>參考我的 Dockerfile (<a href="https://github.com/gcp-serverless-workshop/notifier-line/blob/main/Dockerfile#L6">URL</a>):</li></ol><blockquote><p>參考來自 <a href="https://dev.to/googlecloud/using-headless-chrome-with-cloud-run-3fdp">dev.to</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">RUN</span> apt-get update</span><br><span class="line"><span class="attribute">RUN</span> apt-get install -y gconf-service libasound<span class="number">2</span> libatk<span class="number">1</span>.<span class="number">0</span>-<span class="number">0</span> libcairo<span class="number">2</span> libcups<span class="number">2</span> libfontconfig<span class="number">1</span> libgdk-pixbuf<span class="number">2</span>.<span class="number">0</span>-<span class="number">0</span> libgtk-<span class="number">3</span>-<span class="number">0</span> libnspr<span class="number">4</span> libpango-<span class="number">1</span>.<span class="number">0</span>-<span class="number">0</span> libxss<span class="number">1</span> fonts-liberation libappindicator<span class="number">1</span> libnss<span class="number">3</span> lsb-release xdg-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Chrome</span></span><br><span class="line"><span class="attribute">RUN</span> wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd<span class="number">64</span>.deb</span><br><span class="line"><span class="attribute">RUN</span> dpkg -i google-chrome-stable_current_amd<span class="number">64</span>.deb; apt-get -fy install</span><br></pre></td></tr></table></figure><p>如此一來就可以在 <a href="https://github.com/gcp-serverless-workshop/notifier-line/blob/main/utils/image.py#L21">Container 上使用 Selenium </a>操作了，接下來當然就放在 API 去使用，以下講解一些在 LINE Bot 上使用需要的注意事項。</p><blockquote><p>感謝公司的 QA 同事大力協助，真的是術業有專攻！</p></blockquote><h2 id="在-LINE-Bot-上需要的注意事項"><a href="#在-LINE-Bot-上需要的注意事項" class="headerlink" title="在 LINE Bot 上需要的注意事項"></a>在 LINE Bot 上需要的注意事項</h2><ol><li>輸出圖片需要提供 URL (<a href="https://developers.line.biz/en/reference/messaging-api/#image-message">API Doc</a>)，這邊大家可以參考我過去寫的文章-<a href="https://nijialin.com/2022/10/02/upload-image-get-url-ways/#%E6%87%89%E7%94%A8-LINE-Bot-%E6%94%B6%E5%88%B0%E5%9C%96%E7%89%87%E5%BE%8C%E5%82%B3%E5%88%B0-GitHub-%E4%B8%A6%E4%BD%BF%E7%94%A8">應用 - LINE Bot 收到圖片後傳到 GitHub 並使用</a>，透過 <strong>Base64</strong> 的方式從 GitHub API 上傳到 Repo 中</li><li>注意: Repo 要記得是 <strong>Public</strong> 喔! 否則 LINE Server 會讀不到檔案</li><li>網址組成為: <code>f&quot;https://raw.githubusercontent.com/&#123;USER&#125;/&#123;REPO_NAME&#125;/&#123;master || main&#125;/&#123;IMAGE_NAME&#125;.png&quot;</code>，記得別用到網頁上看到的名字喔！</li><li>建議使用 Push Message 的方式發出(可搭配回覆訊息 Quote 功能)，因為抓圖片以及上傳其實很花時間<ol><li>如果回傳速度比較快，或許可以寫判斷式把 Reply 以及 Push Message 兩個搭配使用</li></ol></li></ol><blockquote><p>我自己日常紀錄的東西都放在<a href="https://github.com/louis70109/ideas-tree">這個 Repo</a></p></blockquote><h2 id="佈署在-Cloud-Run"><a href="#佈署在-Cloud-Run" class="headerlink" title="佈署在 Cloud Run"></a>佈署在 Cloud Run</h2><p>因為需要將 FastAPI 佈署在 Google Cloud Run 上面會需要測試，大家有需要可以參考我的<a href="https://github.com/gcp-serverless-workshop/notifier-line/blob/main/Dockerfile">Dockerfile</a>，建議使用 <code>uvicorn</code>，目前使用 <code>gunicorn</code> 遇到滿多問題還不知道怎麼排解，如果有相關經驗歡迎分享喔！</p><p>除了在本地端使用 gcloud Command line 佈署，也可以透過 Cloud Shell 的方式佈署，而在我的 Repo 上都有<a href="https://github.com/gcp-serverless-workshop/notifier-line#google-cloud-platform-%E4%BD%88%E7%BD%B2">設定一鍵佈署</a>，可以直接從 GitHub 直接跳到 GCP 的 Cloud Shell 上操作，相當方便!</p><blockquote><p>如果有需要一直測試佈署上去的環境，建議 Cloud Shell 使用時別急著關閉，可以重複把 Cloud Shell 裡的 Repo 重新 Pull 並且佈署，否則會踩到<strong>開啟 Shell 上限</strong>喔！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近期因為有玩滑板，而且身處台北很容易下雨，因此需要找到加入了交流社群，其中設定了一些指令可以讓社群機器人可以提供 CCTV 的畫面，但其中因為需要去社群當中打指令對於一個剛加入的人有點害羞，有這些攝影機畫面真的可以幫助看是否要出門(大部分場地都室外)，但身為工程師會想要按個按鍵就出現，因此就有以下文章囉！&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
  </entry>
  
  <entry>
    <title>【滑板】彩虹輪狀車練習場道路指引</title>
    <link href="https://nijialin.com/2023/10/26/skateboard-rainbow-park/"/>
    <id>https://nijialin.com/2023/10/26/skateboard-rainbow-park/</id>
    <published>2023-10-26T04:19:46.000Z</published>
    <updated>2023-10-26T04:19:46.086Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/skateboard/S__15876103.jpg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於最近迷上了衝浪滑板，但本身又是一個很喜歡挑戰許多不同的地方，但因為我在<strong>彩虹輪狀車練習場</strong>外面迷路了很久，以下分享一下道路指引 😆</p><p>地點：<a href="https://maps.app.goo.gl/U4GfNdgZdfG4HXrz6">https://maps.app.goo.gl/U4GfNdgZdfG4HXrz6</a></p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>這邊不是一個捷運會到的地方，如果從西湖捷運站過來的話，就需要搭 藍 7 or 藍 26 就可以到附近了；另外的選項也可以使用 GoShare or WeMoo 之類的共享機車即可前往。</p><p><img src="https://nijialin.com/images/2023/skateboard/S__15876101.jpg"></p><p>一般抵達的路徑應該會在<a href="https://maps.app.goo.gl/Vostsxjf578t9HNi9">內湖科工 D-總部大樓</a>附近找不到入口，他有一個地下道可以過馬路，位置請參考如上圖。</p><blockquote><p>我在這邊迷路了好久 XD</p></blockquote><p><img src="https://nijialin.com/images/2023/skateboard/S__15876104.jpg"></p><p>會到一個地下道，這裡進來通常都已經開始滑了</p><p><img src="https://nijialin.com/images/2023/skateboard/S__15876105.jpg"></p><p>出來之後還要爬一下河堤的樓梯，翻牆過去</p><p><img src="https://nijialin.com/images/2023/skateboard/S__15876106.jpg"></p><p>上來之後就會看到很空曠的河堤以及極限運動場，傍晚來真的很漂亮！</p><p><img src="https://nijialin.com/images/2023/skateboard/S__15876107.jpg"></p><p>這邊場地就有很多 pump 的地方，來玩的朋友一定要把護具都帶好再來，護腕、護肘、護膝、護墊都要帶好！我才看到有人裸裝直接摔，看了真的很痛 🥲</p><blockquote><p>之前因為挑戰 J 台而摔了一個大傷，大家來玩的時候要把一些基本的平衡都練好還是比較好喔</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>以上分享<strong>彩虹輪狀車練習場</strong>的道路指引給大家，台北有很多很棒的滑板場，推薦大家都去挑戰看看！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/skateboard/S__15876103.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由於最近迷上了衝浪滑板，但本身又是一個很喜歡挑戰許多不同的地方，但因為我在&lt;strong&gt;彩虹輪狀車練習場&lt;/strong&gt;外面迷路了很久，以下分享一下道路指引 😆&lt;/p&gt;
&lt;p&gt;地點：&lt;a href=&quot;https://maps.app.goo.gl/U4GfNdgZdfG4HXrz6&quot;&gt;https://maps.app.goo.gl/U4GfNdgZdfG4HXrz6&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="Skateboard" scheme="https://nijialin.com/tags/Skateboard/"/>
    
    <category term="滑板" scheme="https://nijialin.com/tags/%E6%BB%91%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>就用 LINE Pay 在 Apple Watch 付款吧</title>
    <link href="https://nijialin.com/2023/10/19/line-pay-apple-watch/"/>
    <id>https://nijialin.com/2023/10/19/line-pay-apple-watch/</id>
    <published>2023-10-19T06:24:15.000Z</published>
    <updated>2023-10-19T06:24:15.875Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到同事用手錶付款想說是什麼功能，去問一下才發現我落後了!這篇文章來跟大家說明遺下我連結 LINE Pay APP 到 Apple Watch 的過程!</p><h1 id="Apple-Watch-安裝-LINE-Pay-APP"><a href="#Apple-Watch-安裝-LINE-Pay-APP" class="headerlink" title="Apple Watch 安裝 LINE Pay APP"></a>Apple Watch 安裝 LINE Pay APP</h1><p><img src="https://nijialin.com/images/2023/linepay/1.jpg"></p><p>首先到手機上搜尋 Watch，找到原生的程式</p><span id="more"></span><p><img src="https://nijialin.com/images/2023/linepay/2.jpg"></p><p>滑到最下面會看到可以安裝的 LINE Pay 選項</p><blockquote><p>APP store 的 LINE Pay APP 記得更新到最新才可以使用喔</p></blockquote><h1 id="換到-LINE-Pay-APP-上連接-Apple-Watch"><a href="#換到-LINE-Pay-APP-上連接-Apple-Watch" class="headerlink" title="換到 LINE Pay APP 上連接 Apple Watch"></a>換到 LINE Pay APP 上連接 Apple Watch</h1><p><img src="https://nijialin.com/images/2023/linepay/3.jpg"></p><p>接著點開 LINE Pay APP，點選最右下角的<strong>全部</strong>，並且滑到最下面按下<strong>設定</strong></p><p><img src="https://nijialin.com/images/2023/linepay/4.jpg"></p><p>接著找到<strong>智慧手錶</strong>的選項，給他大力地點下去</p><p><img src="https://nijialin.com/images/2023/linepay/5.jpg"></p><p>按下連動手錶的開關，這時候請把 Apple Watch 中的 LINE Pay 也一併打開，讓他們互相綁定喔!</p><p>理論上到這邊連接完之後就可以開始使用了</p><h1 id="手錶付款"><a href="#手錶付款" class="headerlink" title="手錶付款"></a>手錶付款</h1><p><img src="https://nijialin.com/images/2023/linepay/6.jpg"></p><p>我自己習慣把 LINE Pay APP 放在錶面當中，這樣我要結帳時就可以快速點一下開啟 Bar Code</p><p><img src="https://nijialin.com/images/2023/linepay/7.jpg"></p><p>輸入完密碼之後就會跳出你的 Bar Code，這時候把手伸過去給店員掃描即可!</p><blockquote><p>一般便利商店的 POS 機應該都滿穩定的，但如果去一些比較小型的店家，若手錶不夠亮可能也會導致掃不到喔</p></blockquote><p><img src="https://nijialin.com/images/2023/linepay/8.jpg"></p><p>付款完成啦! 大功告成</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天看到同事用手錶付款想說是什麼功能，去問一下才發現我落後了!這篇文章來跟大家說明遺下我連結 LINE Pay APP 到 Apple Watch 的過程!&lt;/p&gt;
&lt;h1 id=&quot;Apple-Watch-安裝-LINE-Pay-APP&quot;&gt;&lt;a href=&quot;#Apple-Watch-安裝-LINE-Pay-APP&quot; class=&quot;headerlink&quot; title=&quot;Apple Watch 安裝 LINE Pay APP&quot;&gt;&lt;/a&gt;Apple Watch 安裝 LINE Pay APP&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/linepay/1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先到手機上搜尋 Watch，找到原生的程式&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Apple" scheme="https://nijialin.com/tags/Apple/"/>
    
    <category term="Apple Watch" scheme="https://nijialin.com/tags/Apple-Watch/"/>
    
    <category term="LINE Pay" scheme="https://nijialin.com/tags/LINE-Pay/"/>
    
  </entry>
  
  <entry>
    <title>如何有效使用 Quote Message</title>
    <link href="https://nijialin.com/2023/10/07/line-bot-quote-message-reply-later/"/>
    <id>https://nijialin.com/2023/10/07/line-bot-quote-message-reply-later/</id>
    <published>2023-10-07T16:01:20.000Z</published>
    <updated>2023-10-07T16:01:50.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://nijialin.com/images/2023/quote/1.png" alt="quote message"></p><p>近期 Messaging API 釋出了許久以前期待的 API - 回覆訊息(Quote Message)，讓 LINE Bot 回覆用戶時可以指定特定訊息(如上圖)，在生成式 AI 當下是個非常好用的一個功能(AI 需要運算時間)，接下來就快速跟大家介紹一下相關功能以及操作方式！</p><blockquote><p>新聞：<a href="https://developers.line.biz/en/news/2023/09/14/send-and-receive-quote-messages-using-the-messaging-api/">You can now send and receive quote messages using the Messaging API</a></p></blockquote><span id="more"></span><h1 id="Quote-Message-介紹"><a href="#Quote-Message-介紹" class="headerlink" title="Quote Message 介紹"></a>Quote Message 介紹</h1><p>操作時主要有三個元素需要注意：</p><ol><li><a href="https://developers.line.biz/en/news/2023/09/14/send-and-receive-quote-messages-using-the-messaging-api/#update-20230914-02">從 webhook 當中收到 Quote Message</a></li><li><a href="https://developers.line.biz/en/news/2023/09/14/send-and-receive-quote-messages-using-the-messaging-api/#update-20230914-03">取得 Quote Token</a></li><li><a href="https://developers.line.biz/en/news/2023/09/14/send-and-receive-quote-messages-using-the-messaging-api/#update-20230914-01">透過 Push Message 來發送 Quote</a></li></ol><p>透過上面三個步驟，就可以發送回復訊息啦！但大家操作起來會覺得為什麼不用 reply message 就好，平常回覆都很快啊？使用他有什麼優點嗎？</p><p>大家可以在這停一下思考個，平常在打字跟朋友聊天時也不一定每一則都會按下回覆。同理到了 LINE Bot，在跟用戶互動時，偶爾穿插個 Quote 也會讓用戶覺得這官方帳號非常用心，甚至可以搭配 <a href="https://developers.line.biz/en/docs/messaging-api/icon-nickname-switch/#specifying-icon-and-display-name">Icon Switch API</a> 也會別有一番風味喔</p><h2 id="Quote-message-範例"><a href="#Quote-message-範例" class="headerlink" title="Quote message 範例"></a><a href="https://github.com/louis70109/linebot-find-some/blob/main/main.py#L108">Quote message 範例</a></h2><p>Quote Message 是以 Push Message 的方式使用，可以從 Reply 的 webhook 當中收到 quote token(<a href="https://developers.line.biz/en/reference/messaging-api/#send-reply-message-response">開發文件</a>)，接著在 Push 時帶上 token，即可針對指定的訊息回覆：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> line_bot_api.push_message(push_message_request=PushMessageRequest(</span><br><span class="line">      to=event.source.user_id,</span><br><span class="line">      messages=[TextMessage(</span><br><span class="line">          text=tool_result,</span><br><span class="line">          quoteToken=event.message.quote_token)],</span><br><span class="line">  ))</span><br></pre></td></tr></table></figure><p><img src="https://nijialin.com/images/2023/quote/2.png" alt="quote message2"></p><blockquote><p>分享個使用案例：當大家串接生成式AI時，因為那邊運算普遍會比較慢些，因此可以把 AI 那邊的 code 另外處理，先透過 Reply Message 先請使用者稍等，後續在透過 Push Message 來回覆指定訊息，如此以來用戶在看訊息時就會比較清楚該訊息是回覆哪一則而不會錯亂～<br>參考程式碼: <a href="https://github.com/louis70109/linebot-find-some/blob/main/main.py#L99">GitHub URL</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>一方面透過回覆訊息(Quote)可以讓用戶知道現在 LINE Bot 是針對哪個訊息作回覆；另一方面，也可以讓處理較慢的程式碼另外在 Queue 裡面操作，等到處理完成後在另外回覆，相關的操作皆是看大家在開發 LINE Bot 時的 user story，如果這篇文章有幫助到你，歡迎分享出去唷！感謝大家的觀看✍️</p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/quote/1.png&quot; alt=&quot;quote message&quot;&gt;&lt;/p&gt;
&lt;p&gt;近期 Messaging API 釋出了許久以前期待的 API - 回覆訊息(Quote Message)，讓 LINE Bot 回覆用戶時可以指定特定訊息(如上圖)，在生成式 AI 當下是個非常好用的一個功能(AI 需要運算時間)，接下來就快速跟大家介紹一下相關功能以及操作方式！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新聞：&lt;a href=&quot;https://developers.line.biz/en/news/2023/09/14/send-and-receive-quote-messages-using-the-messaging-api/&quot;&gt;You can now send and receive quote messages using the Messaging API&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="Quote Message" scheme="https://nijialin.com/tags/Quote-Message/"/>
    
    <category term="回覆訊息" scheme="https://nijialin.com/tags/%E5%9B%9E%E8%A6%86%E8%A8%8A%E6%81%AF/"/>
    
    <category term="Push Message" scheme="https://nijialin.com/tags/Push-Message/"/>
    
  </entry>
  
  <entry>
    <title>【GitHub】建立第一個 Issue Template</title>
    <link href="https://nijialin.com/2023/10/05/github-issue-report-yaml-template/"/>
    <id>https://nijialin.com/2023/10/05/github-issue-report-yaml-template/</id>
    <published>2023-10-05T06:44:28.000Z</published>
    <updated>2023-10-05T06:44:28.857Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>準備演講的同時，發現 GitHub 現在在回報 issue 上開始有框架的方式來讓專案開發者可以更快速建立，不用像以前要自己參考網路上的資料，或是自己天馬行空想一個版本。透過 yaml 的制定除了更好看以外，也讓用戶在回報 issue 時有更漂亮的畫面可以填寫，以下就分享一下如何在自己的 report 上加入～</p><span id="more"></span><h1 id="建立一個-Bug-Report-的-Issue-樣板"><a href="#建立一個-Bug-Report-的-Issue-樣板" class="headerlink" title="建立一個 Bug Report 的 Issue 樣板"></a>建立一個 <a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms">Bug Report 的 Issue 樣板</a></h1><p>進入頁面之後，有提供一個如下的 bug report 樣板：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Bug</span> <span class="string">Report</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">File</span> <span class="string">a</span> <span class="string">bug</span> <span class="string">report</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#x27;[Bug]: &#x27;</span></span><br><span class="line"><span class="attr">labels:</span> [<span class="string">&#x27;bug&#x27;</span>, <span class="string">&#x27;triage&#x27;</span>]</span><br><span class="line"><span class="attr">projects:</span> [<span class="string">&#x27;octo-org/1&#x27;</span>, <span class="string">&#x27;octo-org/44&#x27;</span>]</span><br><span class="line"><span class="attr">assignees:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">octocat</span></span><br><span class="line"><span class="attr">body:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">markdown</span></span><br><span class="line">    <span class="attr">attributes:</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">Thanks</span> <span class="string">for</span> <span class="string">taking</span> <span class="string">the</span> <span class="string">time</span> <span class="string">to</span> <span class="string">fill</span> <span class="string">out</span> <span class="string">this</span> <span class="string">bug</span> <span class="string">report!</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">input</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">contact</span></span><br><span class="line">    <span class="attr">attributes:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">Contact</span> <span class="string">Details</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">How</span> <span class="string">can</span> <span class="string">we</span> <span class="string">get</span> <span class="string">in</span> <span class="string">touch</span> <span class="string">with</span> <span class="string">you</span> <span class="string">if</span> <span class="string">we</span> <span class="string">need</span> <span class="string">more</span> <span class="string">info?</span></span><br><span class="line">      <span class="attr">placeholder:</span> <span class="string">ex.</span> <span class="string">email@example.com</span></span><br><span class="line">    <span class="attr">validations:</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">textarea</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">what-happened</span></span><br><span class="line">    <span class="attr">attributes:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">What</span> <span class="string">happened?</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Also</span> <span class="string">tell</span> <span class="string">us,</span> <span class="string">what</span> <span class="string">did</span> <span class="string">you</span> <span class="string">expect</span> <span class="string">to</span> <span class="string">happen?</span></span><br><span class="line">      <span class="attr">placeholder:</span> <span class="string">Tell</span> <span class="string">us</span> <span class="string">what</span> <span class="string">you</span> <span class="string">see!</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&#x27;A bug happened!&#x27;</span></span><br><span class="line">    <span class="attr">validations:</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">dropdown</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">version</span></span><br><span class="line">    <span class="attr">attributes:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">Version</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">What</span> <span class="string">version</span> <span class="string">of</span> <span class="string">our</span> <span class="string">software</span> <span class="string">are</span> <span class="string">you</span> <span class="string">running?</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">1.0</span><span class="number">.2</span> <span class="string">(Default)</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">1.0</span><span class="number">.3</span> <span class="string">(Edge)</span></span><br><span class="line">      <span class="attr">default:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">validations:</span></span><br><span class="line">      <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">dropdown</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">browsers</span></span><br><span class="line">    <span class="attr">attributes:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">What</span> <span class="string">browsers</span> <span class="string">are</span> <span class="string">you</span> <span class="string">seeing</span> <span class="string">the</span> <span class="string">problem</span> <span class="string">on?</span></span><br><span class="line">      <span class="attr">multiple:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Firefox</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Chrome</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Safari</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Microsoft</span> <span class="string">Edge</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">textarea</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">logs</span></span><br><span class="line">    <span class="attr">attributes:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">Relevant</span> <span class="string">log</span> <span class="string">output</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">Please</span> <span class="string">copy</span> <span class="string">and</span> <span class="string">paste</span> <span class="string">any</span> <span class="string">relevant</span> <span class="string">log</span> <span class="string">output.</span> <span class="string">This</span> <span class="string">will</span> <span class="string">be</span> <span class="string">automatically</span> <span class="string">formatted</span> <span class="string">into</span> <span class="string">code,</span> <span class="string">so</span> <span class="literal">no</span> <span class="string">need</span> <span class="string">for</span> <span class="string">backticks.</span></span><br><span class="line">      <span class="attr">render:</span> <span class="string">shell</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">checkboxes</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">terms</span></span><br><span class="line">    <span class="attr">attributes:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">Code</span> <span class="string">of</span> <span class="string">Conduct</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">By</span> <span class="string">submitting</span> <span class="string">this</span> <span class="string">issue,</span> <span class="string">you</span> <span class="string">agree</span> <span class="string">to</span> <span class="string">follow</span> <span class="string">our</span> [<span class="string">Code</span> <span class="string">of</span> <span class="string">Conduct</span>]<span class="string">(https://example.com)</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">label:</span> <span class="string">I</span> <span class="string">agree</span> <span class="string">to</span> <span class="string">follow</span> <span class="string">this</span> <span class="string">project&#x27;s</span> <span class="string">Code</span> <span class="string">of</span> <span class="string">Conduct</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://nijialin.com/images/2023/github-report/1.png"></p><p>接著找到你想要使用的 project，按下 <code>Add file</code> 新增檔案</p><p><img src="https://nijialin.com/images/2023/github-report/2.png"></p><p>在輸入框上面打上 <code>.github/ISSUE_TEMPLATE/bug-report.yaml</code> ，輸入到<strong>斜線</strong><code>/</code>時會在畫面上自動跑階層出來，因此不用太擔心會不會被失敗，然後把剛剛的 yaml code 貼上去 commit 它！</p><p><img src="https://nijialin.com/images/2023/github-report/3.png"></p><p>Commit 完成之後可以現看一下被 GitHub 渲染出來的樣子有沒有符合心中的樣式</p><p><img src="https://nijialin.com/images/2023/github-report/4.png"></p><p>送自己個 issue！成功之後應該要如同上面的畫面，會有一個新的樣板跑出來</p><p><img src="https://nijialin.com/images/2023/github-report/5.png"></p><p>畢竟是 bug report，該有的 prefix 以及 label 都會出現，下拉式選單有都可以使用，甚至編輯器也都是 Markdown 格式，如此以來 GitHub 專案又更完整了一些！</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>快速筆記一下自己在做 issue template 這邊的發現，如果大家有發現更有趣的內容，歡迎下方留言讓我知道！想參考的 <a href="https://github.com/louis70109/youtube-search-langchain">repo 可以看這邊</a>，那我們就下次見囉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;準備演講的同時，發現 GitHub 現在在回報 issue 上開始有框架的方式來讓專案開發者可以更快速建立，不用像以前要自己參考網路上的資料，或是自己天馬行空想一個版本。透過 yaml 的制定除了更好看以外，也讓用戶在回報 issue 時有更漂亮的畫面可以填寫，以下就分享一下如何在自己的 report 上加入～&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="GitHub" scheme="https://nijialin.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>【入坑記】衝浪滑板</title>
    <link href="https://nijialin.com/2023/10/01/surfing-skateboard-rookie/"/>
    <id>https://nijialin.com/2023/10/01/surfing-skateboard-rookie/</id>
    <published>2023-10-01T05:04:58.000Z</published>
    <updated>2023-10-01T11:44:53.269Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/louis70109/ideas-tree/master/images/475307204158423368.png" alt="surfing skateboard"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於年初時到日本滑雪因而接觸板類運動，雖然挫折感很高(又一直摔)，但能夠滑行真的是成就感滿點！而在過程中去小叮噹兩趟延續滑雪的腳感，不過一直處於要抽空找團才能去滑，地點在新竹成本又很高 🥲，在同事 Daniel 的推坑下(<a href="https://medium.com/%E8%A1%9D%E6%B5%AA%E6%BB%91%E6%9D%BF%E4%BA%8C%E4%B8%89%E4%BA%8B">系列文章</a>)，為了培養年底滑雪的一些腳感，跳坑衝浪滑板讓我在日常也可以抽空出來玩玩！</p><span id="more"></span><h1 id="想那麼多幹嘛？買"><a href="#想那麼多幹嘛？買" class="headerlink" title="想那麼多幹嘛？買"></a>想那麼多幹嘛？買</h1><p><img src="https://raw.githubusercontent.com/louis70109/ideas-tree/master/images/475303260036006002.png"></p><blockquote><p>剛買它的第一天 2023&#x2F;9&#x2F;28</p></blockquote><p>我是在內湖的 ALL RIDE 購買 <a href="https://www.allride.com.tw/product/detail/15354">Hydroponic Fish 31.5” x 9.75” 衝浪滑板</a>，我的板子本身是 32” 的，店員提到差 0.5”是沒啥差的，主要還是在輪子跟靈敏度需要什麼，在考量上我可能會在河濱公園玩滑板(有柏油的地方)，因此推薦起來我還是選擇靈敏度低些，有些時候需要自主加速的衝浪板。</p><p>剛來到店裡時店員臉真的很跩很有距離感 😆，但其實聊起來只是非常的做自己而已，只要稍微知道自己想購買的方向，但有許多不清楚的地方，都可以請他跟你解釋，當店員講完時就會發現自己想要的是什麼，幫助你選擇可以更快喔！但因為我一開始就打算買最便宜的(NTD 6,800)，因此我就以這款為主跟他討論～</p><blockquote><p>至於為什麼滑板店員臉都很跩，可以看看下面的影片 XD</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/vr_jyGYcqS8?si=6orijF-txomUW5OR" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h1 id="護具：降低受傷的風險"><a href="#護具：降低受傷的風險" class="headerlink" title="護具：降低受傷的風險"></a>護具：降低受傷的風險</h1><p><img src="https://raw.githubusercontent.com/louis70109/ideas-tree/master/images/475303237705793734.png" alt="迪卡儂"></p><p>護具我本來想皮不想戴，但想想如果都只基本滑行好像滿弱的？因此這邊跟大家了起來覺得可以先買個基本的全套 <strong>(手掌、護肘、護膝)</strong> ，至少要先保護好關節，誰知道初學一次的噴飛摔下去受傷會噴多少錢修復呢？因此我就先買個基本的保護著。</p><blockquote><p>護具在我玩的第三天就發會功用，我在學著 kick turn 時滑掉，在我下去時就剛好磨到手掌的地方，真的是好險有帶著，只是屁股剛好沒有防摔褲，寫文章✍️的當下，半邊水蜜桃還是受傷的狀態🥲</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><img src="https://raw.githubusercontent.com/louis70109/ideas-tree/master/images/475303716225548738.png"></p><p>雖然入坑真的是不便宜，荷包君再次哭泣，不過整體的體驗算是滿讚的，尤其練習平衡感以及各種轉彎真的是耗盡本肥宅的洪荒之力，每次出去玩都大噴汗，希望可以讓我稍微地瘦身一些些😆，更多內容就先讓我把水蜜桃的摔傷養好，後續再來繼續分享心得！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/louis70109/ideas-tree/master/images/475307204158423368.png&quot; alt=&quot;surfing skateboard&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由於年初時到日本滑雪因而接觸板類運動，雖然挫折感很高(又一直摔)，但能夠滑行真的是成就感滿點！而在過程中去小叮噹兩趟延續滑雪的腳感，不過一直處於要抽空找團才能去滑，地點在新竹成本又很高 🥲，在同事 Daniel 的推坑下(&lt;a href=&quot;https://medium.com/%E8%A1%9D%E6%B5%AA%E6%BB%91%E6%9D%BF%E4%BA%8C%E4%B8%89%E4%BA%8B&quot;&gt;系列文章&lt;/a&gt;)，為了培養年底滑雪的一些腳感，跳坑衝浪滑板讓我在日常也可以抽空出來玩玩！&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="Skateboard" scheme="https://nijialin.com/tags/Skateboard/"/>
    
    <category term="Surfing" scheme="https://nijialin.com/tags/Surfing/"/>
    
    <category term="路滑" scheme="https://nijialin.com/tags/%E8%B7%AF%E6%BB%91/"/>
    
    <category term="運動" scheme="https://nijialin.com/tags/%E9%81%8B%E5%8B%95/"/>
    
  </entry>
  
  <entry>
    <title>新米到上手 LangChain: 藉由 Function Agent 在 LINE Bot 上處理 Calendar 資訊！</title>
    <link href="https://nijialin.com/2023/08/18/first-time-langchain-line-bot/"/>
    <id>https://nijialin.com/2023/08/18/first-time-langchain-line-bot/</id>
    <published>2023-08-18T04:23:46.000Z</published>
    <updated>2023-08-27T16:20:30.035Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#%E4%BB%8B%E7%B4%B9">介紹</a><ul><li><a href="#%E7%82%BA%E4%BB%80%E9%BA%BC%E9%81%B8%E6%93%87-google-calender">為什麼選擇 Google Calender?</a><ul><li><a href="#%E5%96%9C%E6%AD%A1%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E9%80%99%E9%82%8A">喜歡程式碼可以看這邊</a></li></ul></li><li><a href="#%E9%81%8E%E5%8E%BB%E6%88%91%E6%80%8E%E9%BA%BC%E4%B8%8B-prompt">過去我怎麼下 prompt？</a></li><li><a href="#%E4%BB%80%E9%BA%BC%E6%98%AF-langchain">什麼是 LangChain？</a></li><li><a href="#langchain-function-agent-%E5%B8%B6%E4%BE%86%E4%BA%86%E4%BB%80%E9%BA%BC%E5%A5%BD%E8%99%95">LangChain Function Agent 帶來了什麼好處？</a></li><li><a href="#%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E5%9C%A8-line-bot-%E7%94%A8">為什麼要在 LINE Bot 用？</a></li><li><a href="#%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8-youtube-%E4%BB%A5%E5%8F%8A-wikipedia-tool">更新：使用 Youtube 以及 wikipedia Tool</a></li></ul></li><li><a href="#%E7%B5%90%E8%AB%96">結論</a></li><li><a href="#%E6%B4%BB%E5%8B%95%E5%B0%8F%E7%B5%90">活動小結</a></li><li><a href="#%E9%97%9C%E6%96%BCline-%E9%96%8B%E7%99%BC%E7%A4%BE%E7%BE%A4%E8%A8%88%E7%95%AB">關於「LINE 開發社群計畫」</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平時我們經常需要管理&#x2F;安排行程和資訊。這篇文章將介紹我是如何透過 Google Calendar 與 LangChain，讓我更快在 LINE Bot 上可以加入個人行事曆。同時，我也將分享有關使用 Google Calendar 的好處，以及如何更有效地利用 LangChain Function Agent 來簡化程式碼開發過程。相信這對於建立 LINE Bot 以及各種相關應用的開發者來說會是一個不錯的範例，讓我們就往下看下去吧！</p><p>Slide: <a href="https://speakerdeck.com/line_developers_tw/first-time-lanchain-line-bot">https://speakerdeck.com/line_developers_tw/first-time-lanchain-line-bot</a><br>範例程式碼：<a href="https://github.com/louis70109/BookingStep">https://github.com/louis70109/BookingStep</a><br>歡迎試玩 LINE Bot：<a href="https://lin.ee/92O5Od8">https://lin.ee/92O5Od8</a></p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><h2 id="為什麼選擇-Google-Calender"><a href="#為什麼選擇-Google-Calender" class="headerlink" title="為什麼選擇 Google Calender?"></a>為什麼選擇 Google Calender?</h2><p>我一直在使用 Google 日曆，主要是基於以下原因：</p><ul><li>在 Cambly 上課時，我可以將課程資訊直接綁定到 Google Calender，方便我管理下班後的時間</li><li>Apple Calender 可以收來自 Google Calender 的事件，這對於熱愛使用蘋果產品的我來說非常便利，可以在手機、電腦和平板上同步查看我的行事曆 (只需要一個 iCloud)</li><li>Google 日曆的同步速度很快，幾乎可以立即反應行事曆狀態，讓我在規劃時間方面更加順暢<ul><li>同步很快，體感約&lt;60s</li></ul></li></ul><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=7" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><ul><li>標題、時間：對於我來說是必須的，個人行事曆不用像公司的這麼完整，我只要知道時間跟要做什麼事情就好</li><li>地點、描述：話雖如此，如果行事曆裡面能有更完整的內容當然更好，但沒有也沒關係，只要能幫助我回想就可以了，因此這兩個對我來說是選田</li></ul><h3 id="喜歡程式碼可以看這邊"><a href="#喜歡程式碼可以看這邊" class="headerlink" title="喜歡程式碼可以看這邊"></a>喜歡程式碼可以看這邊</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=8" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>以 python 來說，因為是打 GET，不一定每個瀏覽器都會幫忙處理 unicode 的問題，為保險起見都需要先用 <code>urllib.parse.quote(&quot;STRING&quot;)</code> 來包，<code>openExternalBrowser</code> 後面在說～</p><h2 id="過去我怎麼下-prompt？"><a href="#過去我怎麼下-prompt？" class="headerlink" title="過去我怎麼下 prompt？"></a>過去我怎麼下 prompt？</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=10" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>在公司內部的工作坊中，學到了上圖的 prompt 可以告訴 AI 如何幫我產生我對應要的東西，從角色到要作的事情說清楚，但在這裡有沒有發現，我下面寫的一些髒 code，都要確保它(AI)若沒給東西時我應該怎麼處理，甚至還因為他只能給字串版本的 dict，要暴力破解把他轉成 dict，實在是不太好的作法…哈哈</p><h2 id="什麼是-LangChain？"><a href="#什麼是-LangChain？" class="headerlink" title="什麼是 LangChain？"></a>什麼是 LangChain？</h2><p>引用至 Evan 寫的文章 - <a href="https://engineering.linecorp.com/zh-hant/blog/cloud-summit-2023-gal-linebot">Cloud Summit 2023 - 結合生成式 AI 打造有趣的 LINE Bot 應用</a></p><p>要讓你的 LINE Bot 做出以上的事情，你需要很多很多的相關 Prompt 。不論是定義 LLM 的模型該如何解讀你的文字，該如何挑選即將要執行的動作，或是如何將結果作為有效的拆解，到把以往訊息得內容加以存在 Prompt 之中。</p><p>但是透過 LangChain 你可以將這些工作拆解成一個個的小方塊，讓你打造相關服務與應用的時候不用在重複使用那些的 Prompt ，就可以快速打造出來。 以下透過一些簡單的程式碼範例來講解使用了 LangChain 之後，你的程式碼會變得多簡潔。</p><h2 id="LangChain-Function-Agent-帶來了什麼好處？"><a href="#LangChain-Function-Agent-帶來了什麼好處？" class="headerlink" title="LangChain Function Agent 帶來了什麼好處？"></a>LangChain Function Agent 帶來了什麼好處？</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=11" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>如果有在 Python 作過型別定義，一定對於 Pydantic 不陌生，因為 LangChain 有引入它方式，幫助 LLM 定義需求時可以下相關訊息(description)，透過定義完成後，在 <code>def _run()</code> 裡面 LLM 會幫你把參數放入對應的欄位，並且讓開發者可以快速拿參數做事情。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=12" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>而更神奇的是，你可以在 description 裡面多寫一些內容，像是把 <code>台</code> &lt;-&gt; <code>臺</code>之類的幫你對應好，這樣是不是想到能解決了超多事情呢？</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=13" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>用 Function Agent 的好處是，Web 開發者可以把<code>生成式</code>這件事，用 web server 的邏輯開發，以上述為例：定義環境變數-前處理-init-Run server，霎那間還真的以為自己在寫 web service？如此一來就可以更直覺得去寫你想要的 AI 解決方案，前處理想要放更多資訊，只要定義好 class，基本上很多事情都很好解決了！</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=19" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>透過 LangChain，我可以少學&#x2F;寫很多的黑魔法，甚至在 description 中就可以判斷今天、明天、兩天後…等等的只有人類對話能懂的東西，雖然還不太懂 LangChain 後面怎麼作，但如此一來我也省處理了很多把 prompt 一直串起來的功了。</p><h2 id="為什麼要在-LINE-Bot-用？"><a href="#為什麼要在-LINE-Bot-用？" class="headerlink" title="為什麼要在 LINE Bot 用？"></a>為什麼要在 LINE Bot 用？</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=19" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>一直沒說為什麼要在 LINE Bot 裡面使用，主要是我個人日常就會準備一隻 Bot 來存我臨時的訊息，抑或是在群組時常常都會有很片段的消息來約時間，通常最後都會有感覺某個時間要出門，結果往往時間到就忘了也找不到訊息在哪…</p><p>考慮使用的原因是，因為 LINE Bot 是 event-driven 的方式，我會在桌機板的 LINE 把群組訊息複製起來貼到 LINE Bot，訊息樣是會很像以下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">01</span>:<span class="number">52</span> 🤖測試用🐤 你明天想去吃範嗎？</span><br><span class="line"><span class="attribute">01</span>:<span class="number">52</span> 🤖測試用🐤 可能在內湖附近</span><br><span class="line"><span class="attribute">01</span>:<span class="number">53</span> 🥷NiJia   可啊，但幾點？</span><br><span class="line"><span class="attribute">01</span>:<span class="number">53</span> 🤖測試用🐤 應該七點下班後吧</span><br><span class="line"><span class="attribute">01</span>:<span class="number">53</span> 🤖測試用🐤 你看你要不要來在說</span><br><span class="line"><span class="attribute">01</span>:<span class="number">54</span> 🥷NiJia   喔好</span><br></pre></td></tr></table></figure><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b3671167886945a3b1231f981d95a172?slide=17" title="新米到上手 LangChain: 別再更新了，快學不動了" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>如此一來就能達到類似上述的功能，讓 LangChain 幫忙整理訊息並放到對應 Google Calendar 的 query parameter，這樣就能加到個人行事曆中了！</p><h2 id="更新：使用-Youtube-以及-wikipedia-Tool"><a href="#更新：使用-Youtube-以及-wikipedia-Tool" class="headerlink" title="更新：使用 Youtube 以及 wikipedia Tool"></a>更新：使用 Youtube 以及 wikipedia Tool</h2><p>看 LangChain 文件時發現它其實有<a href="https://python.langchain.com/docs/integrations/tools/">許多 Tool Plugin</a>，支援了各式各樣的服務，依照我這個行事曆機器人，我選擇支援了 <a href="https://python.langchain.com/docs/integrations/tools/youtube">Youtube</a> &amp; <a href="https://python.langchain.com/docs/integrations/tools/wikipedia">Wikipedia</a>，只要把相依套件安裝完，基本上就可以引入使用，大概如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> youtube_search</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.tools <span class="keyword">import</span> YouTubeSearchTool</span><br></pre></td></tr></table></figure><p>YouTubeSearchTool API Reference:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">tool</span> = <span class="function"><span class="title">YouTubeSearchTool</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="variable">tool.run</span>(<span class="string">&quot;lex friedman&quot;</span>)</span><br></pre></td></tr></table></figure><p>結果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;<span class="selector-attr">[<span class="string">&#x27;/watch?v=VcVfceTsD0A&amp;pp=ygUMbGV4IGZyaWVkbWFu&#x27;</span>, <span class="string">&#x27;/watch?v=gPfriiHBBek&amp;pp=ygUMbGV4IGZyaWVkbWFu&#x27;</span>]</span>&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>官方文件中其實有很多大密寶，我也透過這樣挖了好多東西～哈哈哈</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這次的分享先來了解一下 LangChain Function Agent 帶來的魔力！讓我少研究很多 OpenAI 黑魔法的時間，甚至很多程式碼寫起來跟平常寫法都很像，在大 AI 時代對於日常用 Python 寫應用的工程師是非常友善的！如果你也正在關注相關應用，或許可以參考本篇文章唷！</p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BB%8B%E7%B4%B9&quot;&gt;介紹&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%82%BA%E4%BB%80%E9%BA%BC%E9%81%B8%E6%93%87-google-calender&quot;&gt;為什麼選擇 Google Calender?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%96%9C%E6%AD%A1%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E9%80%99%E9%82%8A&quot;&gt;喜歡程式碼可以看這邊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%81%8E%E5%8E%BB%E6%88%91%E6%80%8E%E9%BA%BC%E4%B8%8B-prompt&quot;&gt;過去我怎麼下 prompt？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BB%80%E9%BA%BC%E6%98%AF-langchain&quot;&gt;什麼是 LangChain？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#langchain-function-agent-%E5%B8%B6%E4%BE%86%E4%BA%86%E4%BB%80%E9%BA%BC%E5%A5%BD%E8%99%95&quot;&gt;LangChain Function Agent 帶來了什麼好處？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E5%9C%A8-line-bot-%E7%94%A8&quot;&gt;為什麼要在 LINE Bot 用？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8-youtube-%E4%BB%A5%E5%8F%8A-wikipedia-tool&quot;&gt;更新：使用 Youtube 以及 wikipedia Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B5%90%E8%AB%96&quot;&gt;結論&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%B4%BB%E5%8B%95%E5%B0%8F%E7%B5%90&quot;&gt;活動小結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%97%9C%E6%96%BCline-%E9%96%8B%E7%99%BC%E7%A4%BE%E7%BE%A4%E8%A8%88%E7%95%AB&quot;&gt;關於「LINE 開發社群計畫」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;平時我們經常需要管理&amp;#x2F;安排行程和資訊。這篇文章將介紹我是如何透過 Google Calendar 與 LangChain，讓我更快在 LINE Bot 上可以加入個人行事曆。同時，我也將分享有關使用 Google Calendar 的好處，以及如何更有效地利用 LangChain Function Agent 來簡化程式碼開發過程。相信這對於建立 LINE Bot 以及各種相關應用的開發者來說會是一個不錯的範例，讓我們就往下看下去吧！&lt;/p&gt;
&lt;p&gt;Slide: &lt;a href=&quot;https://speakerdeck.com/line_developers_tw/first-time-lanchain-line-bot&quot;&gt;https://speakerdeck.com/line_developers_tw/first-time-lanchain-line-bot&lt;/a&gt;&lt;br&gt;範例程式碼：&lt;a href=&quot;https://github.com/louis70109/BookingStep&quot;&gt;https://github.com/louis70109/BookingStep&lt;/a&gt;&lt;br&gt;歡迎試玩 LINE Bot：&lt;a href=&quot;https://lin.ee/92O5Od8&quot;&gt;https://lin.ee/92O5Od8&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="ChatGPT" scheme="https://nijialin.com/tags/ChatGPT/"/>
    
    <category term="OpenAI" scheme="https://nijialin.com/tags/OpenAI/"/>
    
    <category term="LangChain" scheme="https://nijialin.com/tags/LangChain/"/>
    
    <category term="Google Calendar" scheme="https://nijialin.com/tags/Google-Calendar/"/>
    
    <category term="Function Agent" scheme="https://nijialin.com/tags/Function-Agent/"/>
    
  </entry>
  
  <entry>
    <title>【快打6】新玩法與硬體選擇</title>
    <link href="https://nijialin.com/2023/08/06/why-buy-street-fighter-6/"/>
    <id>https://nijialin.com/2023/08/06/why-buy-street-fighter-6/</id>
    <published>2023-08-06T12:23:22.000Z</published>
    <updated>2023-08-08T07:54:32.189Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E5%89%8D%E8%A8%80">1. 前言</a></li><li><a href="#2-%E4%BB%8B%E7%B4%B9">2. 介紹</a><ul><li><a href="#21-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E8%B2%B7">2.1. 為什麼要買？</a></li><li><a href="#22-%E7%8F%BE%E4%BB%A3%E6%A8%A1%E5%BC%8F%E5%A5%BD%E9%A6%99%E5%95%8A%E4%B8%8D%E7%94%A8%E8%87%AA%E5%B7%B1%E5%B0%BB%E6%8C%89%E9%8D%B5">2.2. 現代模式好香啊！不用自己尻按鍵</a></li><li><a href="#23-%E4%B8%80%E5%AE%9A%E8%A6%81%E5%A4%A7%E6%90%96%E5%97%8E%E6%90%96%E6%A1%BF--%E8%A1%8C%E4%B8%8D%E8%A1%8C">2.3. 一定要大搖嗎？搖桿 🎮 行不行？</a></li><li><a href="#24-%E6%A0%BC%E9%AC%A5%E9%81%8A%E6%88%B2--%E5%B8%B6%E4%BE%86%E7%9A%84%E6%8C%AB%E6%8A%98%E6%84%9F">2.4. 格鬥遊戲 🥊 帶來的挫折感</a></li><li><a href="#25-%E5%BE%9E-100-%E5%88%B0-115-">2.5. 從 10:0 到 11:5 🥈</a></li><li><a href="#26-%E5%85%B6%E4%BB%96">2.6. 其他</a></li></ul></li><li><a href="#3-%E7%B5%90%E8%AB%96">3. 結論</a></li></ul><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>暨上篇分享的<a href="https://nijialin.com/2023/07/29/why-i-buy-rog-ally/">關於我衝動買了 ROG Ally 的夜晚 ⋯</a>，分享買它的過程與設備狀態，其中買它最主要就是要打 LOL 跟<a href="https://www.streetfighter.com/6/zh-hant">快打旋風 6</a> (今天的主角)，雖然因為硬體需求畫質不能開到頂，但可以隨身攜帶並且不佔空間就深得我心了 ✨，因此今天就來分享玩快打 6 的一些心得 👀</p><span id="more"></span><h1 id="2-介紹"><a href="#2-介紹" class="headerlink" title="2. 介紹"></a>2. 介紹</h1><h2 id="2-1-為什麼要買？"><a href="#2-1-為什麼要買？" class="headerlink" title="2.1. 為什麼要買？"></a>2.1. 為什麼要買？</h2><p>快打旋風在我很還很小的時候就有機台可以打，以當時的價格一場🎮 10 元，贏的繼續輸的就要在投幣，看輸幾場就是 10 上去，假設我玩一百場輸了 40 場，那我就是等於花 400 玩遊戲 💸💸💸。</p><p>而按照 <a href="https://store.steampowered.com/app/1364780/Street_Fighter_6/">Steam 價 - 1680 元</a>，等於輸 120 場就回本了 (?)，發現自己進入遊戲還是手殘，這樣想就不虧了。</p><blockquote><p>好像不是這樣說捏？？？輸愈多越賺 😆😆😆</p></blockquote><h2 id="2-2-現代模式好香啊！不用自己尻按鍵"><a href="#2-2-現代模式好香啊！不用自己尻按鍵" class="headerlink" title="2.2. 現代模式好香啊！不用自己尻按鍵"></a>2.2. 現代模式好香啊！不用自己尻按鍵</h2><p><img src="https://nijialin.com/images/2023/sf6/1.png"></p><p>剛開始完並看到上面按鍵時，光要把連段學完大概一兩個禮拜去了，而通常這也會最挫折的地方。在六代裡面，出了一個<strong>現代模式</strong>，讓遊玩的玩家可以透過組合鍵連段，也可以一鍵必殺技，非常大幅度的降低新米們加入這遊戲後的挫折感，初期可以先透過這模式學會格鬥遊戲判斷時機，未來不論要轉<strong>經典模式</strong>或維持，這模式都是快打 6 出的一個超棒的功能！</p><blockquote><p>這裡有<a href="https://forum.gamer.com.tw/C.php?bsn=173&snA=14847">巴哈的大大寫的文章</a>，我就分享使用心得</p></blockquote><h2 id="2-3-一定要大搖嗎？搖桿-🎮-行不行？"><a href="#2-3-一定要大搖嗎？搖桿-🎮-行不行？" class="headerlink" title="2.3. 一定要大搖嗎？搖桿 🎮 行不行？"></a>2.3. 一定要大搖嗎？搖桿 🎮 行不行？</h2><p><img src="https://github.com/louis70109/ideas-tree/raw/master/images/466056084298924484.png"></p><p>由於我是買 ROG Ally💻，某些時間上我可能也是操作搖桿 🎮，而我本身也是有買一個上章節的搖桿，就個人體驗上，過去玩了許多 PS &amp; Switch 遊戲，很習慣使用搖桿遊玩各種遊戲，在適應上會快上很多；另一方面，畢竟一般搖桿對於玩家來說，基本上有玩主機遊戲都會人手一隻，對於玩家加入門檻也相對較低，不用另外在買一個只給快打旋風，萬一退坑不玩格鬥遊戲，那豈不是浪費了呢？</p><blockquote><p>甚至看到這幾天的 EVO 2023 大賽上也很多高手都用搖桿玩</p></blockquote><p>但我個人對於街機還是有信仰的，覺得格鬥遊戲就是要有一個大搖才對(<strong>小朋友別學</strong>)，但我還是先以便宜的入手，若自己真的想繼續玩快打 6，在考慮入手高階的大搖！</p><h2 id="2-4-格鬥遊戲-🥊-帶來的挫折感"><a href="#2-4-格鬥遊戲-🥊-帶來的挫折感" class="headerlink" title="2.4. 格鬥遊戲 🥊 帶來的挫折感"></a>2.4. 格鬥遊戲 🥊 帶來的挫折感</h2><blockquote><p>這裡內容是從 youtube 頻道上聽到的，分享給大家</p></blockquote><p>一般我們在玩各種對戰遊戲，如 LOL, PUBG, 爐石…etc，因為這些遊戲大部分都有防碎玻璃機制，怎麼說呢，就是你可以怪打野不會幫、跳傘下面都沒東西、運氣不好手牌差，諸如許多案例都是可以幫助玩家分攤挫折感。</p><p>而在快打旋風之類的格鬥遊戲，被電就是被電，三不五時就被一套接到死，沒反應時間，幾十秒就被 KO，如此的遊戲真的需要有愛以前一定的耐心才行，不然這遊戲錢真的會丟水溝 💦。但快打 6 已經出了現代模式，幫助大家度過接技苦手的階段，也推薦大家來玩玩看！</p><blockquote><p>我用現代模式從鐵牌爬到銀牌，具影片說法我應該已經贏過 35%玩家左右的玩家了！</p></blockquote><h2 id="2-5-從-10-0-到-11-5-🥈"><a href="#2-5-從-10-0-到-11-5-🥈" class="headerlink" title="2.5. 從 10:0 到 11:5 🥈"></a>2.5. 從 10:0 到 11:5 🥈</h2><p><img src="https://github.com/louis70109/ideas-tree/raw/master/images/466911630275117300.png"></p><p>這代很棒的是有<strong>街機模式</strong>，對於喜歡挑戰但牌位一直上不去的人很有幫助，一場牌位賽最多三場結束，很常還沒習慣角色或是出招方式，就輸的很莫名其妙。</p><p>透過街機模式，可以隨機找路人對戰，只要對方願意跟你打，就可以一直打下去，好處就是一開始很不習慣對方節奏，隨著被打久了，也知道跳就會被升龍拳，那就學到一課了唄！進而開始有機會贏下一個燈 💡💡</p><p>而我也是透過街機模式 🥊，從 10:0 開始習慣對方節奏後，開始連凹五場回來，打到對手都開始不讓，願意繼續跟我打下去了呢！(成就感滿點)</p><blockquote><p>個人推薦 CPU 💻 打到等級 7 會贏就可以去街機跟人家玩，會進步非常快喔！</p></blockquote><h2 id="2-6-其他"><a href="#2-6-其他" class="headerlink" title="2.6. 其他"></a>2.6. 其他</h2><ul><li>大概 140 元台幣可以買到五個 SKIN(顏色、套裝)</li><li>體驗版約 16G，正式版約 50G，可以先抓來試玩看看在決定要不要買</li></ul><h1 id="3-結論"><a href="#3-結論" class="headerlink" title="3. 結論"></a>3. 結論</h1><p><img src="https://github.com/louis70109/ideas-tree/raw/master/images/466911640273551763.png"></p><p>上次玩快打也差不多五年前了，這代真的作得很優秀！推薦大加入坑玩玩看，會發現有很多不同的體驗唷！</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E5%89%8D%E8%A8%80&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E4%BB%8B%E7%B4%B9&quot;&gt;2. 介紹&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E8%B2%B7&quot;&gt;2.1. 為什麼要買？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-%E7%8F%BE%E4%BB%A3%E6%A8%A1%E5%BC%8F%E5%A5%BD%E9%A6%99%E5%95%8A%E4%B8%8D%E7%94%A8%E8%87%AA%E5%B7%B1%E5%B0%BB%E6%8C%89%E9%8D%B5&quot;&gt;2.2. 現代模式好香啊！不用自己尻按鍵&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-%E4%B8%80%E5%AE%9A%E8%A6%81%E5%A4%A7%E6%90%96%E5%97%8E%E6%90%96%E6%A1%BF--%E8%A1%8C%E4%B8%8D%E8%A1%8C&quot;&gt;2.3. 一定要大搖嗎？搖桿 🎮 行不行？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#24-%E6%A0%BC%E9%AC%A5%E9%81%8A%E6%88%B2--%E5%B8%B6%E4%BE%86%E7%9A%84%E6%8C%AB%E6%8A%98%E6%84%9F&quot;&gt;2.4. 格鬥遊戲 🥊 帶來的挫折感&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#25-%E5%BE%9E-100-%E5%88%B0-115-&quot;&gt;2.5. 從 10:0 到 11:5 🥈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#26-%E5%85%B6%E4%BB%96&quot;&gt;2.6. 其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E7%B5%90%E8%AB%96&quot;&gt;3. 結論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h1&gt;&lt;p&gt;暨上篇分享的&lt;a href=&quot;https://nijialin.com/2023/07/29/why-i-buy-rog-ally/&quot;&gt;關於我衝動買了 ROG Ally 的夜晚 ⋯&lt;/a&gt;，分享買它的過程與設備狀態，其中買它最主要就是要打 LOL 跟&lt;a href=&quot;https://www.streetfighter.com/6/zh-hant&quot;&gt;快打旋風 6&lt;/a&gt; (今天的主角)，雖然因為硬體需求畫質不能開到頂，但可以隨身攜帶並且不佔空間就深得我心了 ✨，因此今天就來分享玩快打 6 的一些心得 👀&lt;/p&gt;</summary>
    
    
    
    <category term="遊戲" scheme="https://nijialin.com/categories/%E9%81%8A%E6%88%B2/"/>
    
    
    <category term="快打旋風" scheme="https://nijialin.com/tags/%E5%BF%AB%E6%89%93%E6%97%8B%E9%A2%A8/"/>
    
    <category term="ROG Ally" scheme="https://nijialin.com/tags/ROG-Ally/"/>
    
    <category term="搖桿" scheme="https://nijialin.com/tags/%E6%90%96%E6%A1%BF/"/>
    
  </entry>
  
  <entry>
    <title>寶可夢苦難日: 結局不是重點 重點是我爬不上大師啊</title>
    <link href="https://nijialin.com/2023/07/30/how-to-deploy-pokemon-line-bot/"/>
    <id>https://nijialin.com/2023/07/30/how-to-deploy-pokemon-line-bot/</id>
    <published>2023-07-30T07:21:56.000Z</published>
    <updated>2023-09-19T03:43:12.760Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/coscup/2.jpg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我是 LINE Taiwan 的技術傳教士 Nijia (a.k.a 忍者)，這次很榮幸可以來 <a href="https://coscup.org/2023/zh-TW/session/VAHKVH">COSCUP 2023</a> 分享過年期間實做關於寶可夢 Side project 的一些心得，透過以下文章跟大家分享經驗談！</p><blockquote><p>本次分享簡報：<a href="https://speakerdeck.com/line_developers_tw/how-to-deploy-pokemon-line-bot">https://speakerdeck.com/line_developers_tw/how-to-deploy-pokemon-line-bot</a></p></blockquote><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>以下介紹為個人業餘時間所開發的 Side Project 經驗分享～</p><h2 id="主要的功能流程圖"><a href="#主要的功能流程圖" class="headerlink" title="主要的功能流程圖"></a>主要的功能流程圖</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/36feeffa79e3497ca7e5a04176ddc5ce?slide=9" title="寶可夢苦難日: 結局不是重點 重點是我爬不上大師啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><ul><li>使用 LINE Bot 作為操作介面</li><li>尋找指定寶可夢的個體值</li><li>運用 Flex Message 整理資訊</li><li>透過指定寶可夢，往下延伸操作<ul><li>尋找招式、隊友、道具、個性、努力值</li><li>Flex Message 皆可操作，到 wiki 查看細節功能</li></ul></li><li>錯誤回覆則用生成圖片替代</li><li>另外尋找 Pokemon Showdown 模擬器的對戰資訊來複習</li></ul><h2 id="為什麼要用-LINE-Bot-當介面？"><a href="#為什麼要用-LINE-Bot-當介面？" class="headerlink" title="為什麼要用 LINE Bot 當介面？"></a>為什麼要用 LINE Bot 當介面？</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/36feeffa79e3497ca7e5a04176ddc5ce?slide=15" title="寶可夢苦難日: 結局不是重點 重點是我爬不上大師啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><ul><li>不用撰寫太多前端 code<ul><li>對 CSS 的 Flexbox 有概念尤佳</li></ul></li><li>呈上，可以驗證介面可行性</li><li>畫面很容易就做的漂亮 (<a href="https://developers.line.biz/flex-simulator/">Flex Message Simulator</a>)</li><li>人手一機，親朋好友都可以測試 (Single source)</li></ul><h2 id="突發事件：日本同事的黃金週，兩天內支援日文"><a href="#突發事件：日本同事的黃金週，兩天內支援日文" class="headerlink" title="突發事件：日本同事的黃金週，兩天內支援日文"></a>突發事件：日本同事的黃金週，兩天內支援日文</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/36feeffa79e3497ca7e5a04176ddc5ce?slide=19" title="寶可夢苦難日: 結局不是重點 重點是我爬不上大師啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>我們在寫正規表達式(Regex)久了，大概知道[A-Za-z0-9]，但其他語系的 unicode 範圍都不一樣，就算中文我也不知道在哪！在這方面，只能依靠全民小助手(生成式 AI)來幫忙產生，雖然沒辦法驗證正確性，但語言基本上都固定的，就可以直接相信它了！</p><p>這邊就寫個基本的 Class 來驗證，收到訊息時先進來 match 看看，就可以驗證嚕！</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/36feeffa79e3497ca7e5a04176ddc5ce?slide=18" title="寶可夢苦難日: 結局不是重點 重點是我爬不上大師啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>最後就可以支援三個語言去驗證了(灑花)！可以到黃金週的分享會上跟日本同事分享成果了～～</p><h2 id="Python-小工具推薦"><a href="#Python-小工具推薦" class="headerlink" title="Python 小工具推薦"></a>Python 小工具推薦</h2><h3 id="Ruff"><a href="#Ruff" class="headerlink" title="Ruff"></a><a href="https://github.com/astral-sh/ruff">Ruff</a></h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/36feeffa79e3497ca7e5a04176ddc5ce?slide=22" title="寶可夢苦難日: 結局不是重點 重點是我爬不上大師啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 314;" data-ratio="1.78343949044586"></iframe><p>它是一個由 Rust 撰寫的 Python lint 工具，除了一般的 lint 規則之外，它也支援許多功能：</p><ul><li><a href="https://github.com/astral-sh/ruff-pre-commit">Pre-commit</a><ul><li>過去在寫 JavaScript 時有這功能，設定完 <code>.pre-commit-config.yaml</code> 在 commit 之前就會處理</li></ul></li><li>Github Actions<ul><li>可在 CI 階段協助確認，保障品質</li></ul></li><li>VScode<ul><li>支援在編輯器上安裝 plugin</li><li>個人常用 <code>autofix</code> 的功能，把沒用到的套件與行別處理掉，就不用自己動手了！</li></ul></li></ul><h2 id="testcontainer"><a href="#testcontainer" class="headerlink" title="testcontainer"></a>testcontainer</h2><p>Test Container 是一個 Java 的函式庫，支援 JUnit 來做測試，在跑測試時可以幫忙起個容器(Container)，並可以放上各式資料庫、Selenium 瀏覽器…等等可以放在 Docker 上面跑的內容，那 Test Container 很好的地方就是他也提供 Python 的解決方案(<a href="https://github.com/testcontainers/testcontainers-python">testcontainers&#x2F;testcontainers-python</a>)，讓我這個 Python 開發者可以有機會在 Docker 裡面很快地起一個 Container 來跑資料庫相關的整合測試。</p><ul><li>建立資料庫作真實的測試</li><li>不用 mock data 假裝過的很好(?)</li><li>隔離：可在 Docker 裡執行</li><li>省空間：執行完就刪除</li><li>普遍資料庫都支援</li></ul><blockquote><p><a href="https://nijialin.com/2021/11/24/python-testcontainer-fasstapi-database/">參考文章</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>因為日常玩遊戲需要找很多資訊，我們透過 LINE Bot 可以很快速的把資訊都整理進去，開發時也會發現很多不同的方法與解決方案，運用網路上許多人整理好的資料可以更快速開發，推薦大家可以參考 GDD – Game Driven Development，推動自己解決日常所遇到的小問題！</p><blockquote><p>Side Project 佈署的小建議請參考： <a href="https://engineering.linecorp.com/zh-hant/blog/how-to-develop-side-project-into-public-cloud">【從零開始養】透過 Side Project 增加你的能見度！以 LINE Bot 為例</a></p></blockquote><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/coscup/2.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我是 LINE Taiwan 的技術傳教士 Nijia (a.k.a 忍者)，這次很榮幸可以來 &lt;a href=&quot;https://coscup.org/2023/zh-TW/session/VAHKVH&quot;&gt;COSCUP 2023&lt;/a&gt; 分享過年期間實做關於寶可夢 Side project 的一些心得，透過以下文章跟大家分享經驗談！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本次分享簡報：&lt;a href=&quot;https://speakerdeck.com/line_developers_tw/how-to-deploy-pokemon-line-bot&quot;&gt;https://speakerdeck.com/line_developers_tw/how-to-deploy-pokemon-line-bot&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="研討會" scheme="https://nijialin.com/categories/%E7%A0%94%E8%A8%8E%E6%9C%83/"/>
    
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="Pokemon" scheme="https://nijialin.com/tags/Pokemon/"/>
    
  </entry>
  
</feed>
