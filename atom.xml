<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忍者工坊</title>
  
  
  <link href="https://nijialin.com/atom.xml" rel="self"/>
  
  <link href="https://nijialin.com/"/>
  <updated>2025-07-03T03:46:50.014Z</updated>
  <id>https://nijialin.com/</id>
  
  <author>
    <name>NiJia Lin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【標題】題目</title>
    <link href="https://nijialin.com/2025/07/03/5-years-to-taipei-2025/"/>
    <id>https://nijialin.com/2025/07/03/5-years-to-taipei-2025/</id>
    <published>2025-07-03T12:46:16.000Z</published>
    <updated>2025-07-03T03:46:50.014Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>這陣子經歷太多內心上的變化，想說趁著出差期間，回顧並整理來台北後第五年的一些經歷，好好思考一下這些日子來的想法，希望未來在回顧這篇時不會太尷尬 😆</p><span id="more"></span><h2 id="Change-Responsibility-from-DevRel-to-Software-Engineer"><a href="#Change-Responsibility-from-DevRel-to-Software-Engineer" class="headerlink" title="Change Responsibility from DevRel to Software Engineer"></a>Change Responsibility from DevRel to Software Engineer</h2><p>2024 時，我參與了公司的 side project，試著從專案管理的角度參與開發項目，雖然專案最後 sunset，但經歷過這次經驗，從前輩們身上學到很多過往的經驗以及技巧，從專案的視野廣闊度到每行 code 的細節都要盡可能掌握</p><p>爾後，除了日常招募與活動之外，也開始跟在資深同事身邊學習系統架構與設計，並在今年組織重整之後，正式被調到內部研發團隊，開始著手系統設計以及服務維運的工作內容</p><p>期間開始了第一個系統設計，公司內設有架構審核的機制，所有專案都得送審，在這流程我也是被徹底的電了一波 😆，也體會到自己在思考架構的細心程度還不透徹，就目前的專案也靠著現在的團隊夥伴幫忙，從開發上給予&amp;討論不同的設計方式，讓系統可以順利開發</p><p>有了這段日子的經驗與反思，才知道當時資深前輩們提醒的東西重要性在哪，日後有其他專案時，要想清楚再做，避免開發後多浪費了其他時間</p><h3 id="Keep-doing-DevRel-things"><a href="#Keep-doing-DevRel-things" class="headerlink" title="Keep doing DevRel things"></a>Keep doing DevRel things</h3><blockquote><p>在 DevRel 新職缺打開之後，沒想到迴響非常大，內外都有許多人來應徵此職缺</p></blockquote><p>去年很可惜因為骨折無法參加 Tech Week，感恩公司今年提供我個工作人員名額可以參加這盛會，這次活動安排期間剛好有現在專案上的東西在燒腦，兩個並行真的是特別燒腦😱，好在 Evan 幫忙了非常多事情，才能讓這次的活動順利出發，然後同事們順利抵達日本並順利執行</p><p>而在這次的 Tech Week 演講期間也獲得到許久不見的成就感，帶著講者同事從休息室到講台，確保整體活動順利外，也在當中幫忙心理建設，提供一些演講上的建議跟注意事項，看著他們能夠順利分享完內容，內心就放下大石鬆一口氣，我就覺得有幫助到特別有成就感。日後要將這重責大任交棒給新人，希望她能夠做出更不一樣風格，而我還是會懷念在每個時刻所獲得的能量！</p><blockquote><p>雖然站了兩天腳都起水泡了，但這樣的負擔是值得的！</p></blockquote><h3 id="Handover-book"><a href="#Handover-book" class="headerlink" title="Handover book"></a>Handover book</h3><p>說到工作上相關事情，近期在公司內開始洋洋灑灑的寫交接日誌，把古今中外 DevRel 要做的事情都寫下來，發現寫的內容是平常做事習慣都沒感覺，寫的當下才發現這些細節，過去在執行上踩了非常多坑，時至今日發現一旦漏了誰，都會讓每次的案子出麻煩…也希望透過文件的方式，讓後續接手的人能基於這些內容，更進一步發揮職能跟個人特色 🏆</p><h3 id="I-have-another-opinions-with-DevRel…"><a href="#I-have-another-opinions-with-DevRel…" class="headerlink" title="I have another opinions with DevRel…"></a>I have another opinions with DevRel…</h3><p>日常在社交過程中，偶爾會有人認為不就只是做做活動，弄得光鮮亮麗就好。其實在這邊的工作過程中，大至跨部門會議小至每次的對談，都會需要事先準備並且要有 take away，我們很把握每次對談的機會，延續每次的對談甚至可以合作，讓未來的專案上不只是個普通活動，而是可以蹦出更多新的作法跟別的公司不一樣</p><p>我也常跟人家分享，其實在對話中是有技巧的，這些方法可不是短時間可以學會，而是要透過大量閱讀、資訊吸收、反思、練習才能學會的技能，雖然很多時候我們都會希望直話直說，但就直話直說也是有技巧的，需要考量當下氣氛跟對方狀態，很多時候即便你無心，話語中都會帶刺，做一個能溫柔對話的人，才能讓人願意幫你在人生這條路上推進一些事情💡</p><blockquote><p>也有可能我從小耳濡目染學會了一些現在能用的對話技巧</p></blockquote><p>DevRel 有別於一般的工程職位，除了要會公關&#x2F;行銷技巧外，更有程式能力來執行一些天馬行空的點子，才能在許多地方脫癮而出，也或許這樣，才造成這麼多迴響？</p><h2 id="About-my-other-working"><a href="#About-my-other-working" class="headerlink" title="About my other working"></a>About my other working</h2><p>當 R&amp;R 開始逐步混合執行到管理層面，許多事情的期待就不會是只有做好那麼簡單，而是要開始思考團隊發展、配合開發治理、系統通用性…等等，雖然在這過程中異常的繁雜以及需要大量的溝通，也是普遍大家都會很討厭這樣的事情，但我想任何一種挑戰來都會是個成長機會，當掌握的資訊越多，對於整體的效率以及團隊的發展就會越有幫助，也期待哪天摸熟了之後能夠讓自己的才能發揮最大化</p><p>另外也常跟公司內剛開始工作的小伙子提到，在本職該做到的事情逐漸上手時，要開始嘗試不同的領域的東西，才不會把自己眼光限縮在一個領域，看得廣才知道自己想要什麼，想學深&#x2F;廣才會有選擇權</p><p><img src="https://nijialin.com/images/2025/important.jpg"></p><p>就像我在加入 LINE 之前，常常會很執著於一些無傷大雅的小事上，經歷過這幾年的洗禮，回頭更能清楚知道這些小細節的重要性以及優先權，日後再做任何事情都需要先冷靜下來，將事情規劃好再執行，可以避免浪費掉太多時間</p><blockquote><p>畢竟我是個單核單頻的生物 😆</p></blockquote><h2 id="Mentality"><a href="#Mentality" class="headerlink" title="Mentality"></a>Mentality</h2><p>在 Threads 上寫過一段話想給新進同事：「不論剛剛工作上發生什麼事情，下一秒都要想盡辦法正向往前看」，作為一個稱職的文化傳遞者除了要非常非常 非 常 外向以外，還要能隨時給予正能量，幫助團隊成員正向看事情，引進不同的想法並試著讓它融入於團隊中，才能養成團隊文化，進而讓所有事情有所變化，甚至在日常作業上能夠更通順</p><p>但在上半年突然心態很容易受影響，不論是工作上或是生活上都會有些小挫折，雖然這些挫折都不是大事，但卻會讓我覺得異常的沮喪，做任何事都會想太多調整不回來，導致很多安排都失衡</p><p>分水嶺應該在開刀日子確定好之後，才逐漸雨過天晴，也許是因為有了明確的目標，讓我能夠有努力的目標，並且開始調整自己的心態並開始走出戶外，讓自己能夠回復狀態來面對生活與工作</p><p>經歷過心態被來回拉扯的狀態實在是很不好受，導致經常半夜嚇醒，這時也會回想去年這時候也是因此過勞狀態。因此花了一些時間，接受自己的情緒，消化負能量，接受胡思亂想的自己，把自己的生活跟感情的知覺重新拉出來，才不會讓自己淪為工作機器，變成一個無知覺的生物</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>在工作上作為一個 DevRel 要懂的東西需要很廣，也因為有了這段經歷，才有辦法有條有理的處理掉身邊說有遇到的事情，而且在任何關係上，能同時運用在家族學的經驗，更懂的飲水思源，該報恩的時候就要即時</p><p>其實很多工作上的經驗也是反映到日常生活上的待人處事，如果人品跟品格不夠好，其實很多時候就不小心打壞關係，導致事情非常難做，甚至就接著影響到未來工作&#x2F;任何機會</p><p>既然現在也選擇轉換跑道繼續前進，也要把曾經最沒自信的部分給拉起來，並且帶著過往所學的總總+個人特質繼續前進，不能讓這些年所學的東西被浪費掉！</p><p>最後，這篇不是離職文，只是剛好有空檔時間有感而發🫢，在這份工作當中真的學到太多東西，如果有機會實體遇到我，我可以再來分享更多的歷程❤️‍🔥</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;這陣子經歷太多內心上的變化，想說趁著出差期間，回顧並整理來台北後第五年的一些經歷，好好思考一下這些日子來的想法，希望未來在回顧這篇時不會太尷尬 😆&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
  </entry>
  
  <entry>
    <title>【Artale】楓之谷 32~60 槍騎兵練法</title>
    <link href="https://nijialin.com/2025/06/15/artale-Lancer-32up/"/>
    <id>https://nijialin.com/2025/06/15/artale-Lancer-32up/</id>
    <published>2025-06-15T21:07:16.000Z</published>
    <updated>2025-07-03T03:46:50.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近從私服轉戰繁中版的 Artale 楓之谷，享受過四倍經驗值之後來玩真的痛苦萬分ＸＤ，不過在經歷一陣子之後發現越來越多朋友進來一起玩了！因此坐牢起來就覺得還行～</p><span id="more"></span><p>以下就來分享一下我目前練到 57 左右的練功路徑給大家！</p><h1 id="32-41-火肥肥"><a href="#32-41-火肥肥" class="headerlink" title="32~41 火肥肥"></a>32~41 火肥肥</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/1z6pq27D56c?si=hknRrft6wasDms_j" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><p>參考上述影片，當時裝備：</p><ul><li>海神叉（沒衝過）</li><li>女上下衣（有加移動速度）</li><li>移動鞋子</li></ul><h2 id="基本打法："><a href="#基本打法：" class="headerlink" title="基本打法："></a>基本打法：</h2><p><img src="https://nijialin.com/images/2025/artale/1.PNG"></p><p>下方：從<strong>右下</strong>拖怪到<strong>左下</strong>繩索前，然後劍氣縱橫一次打完之後爬上去，樹妖就跳打的過程中加減打即可</p><p><img src="https://nijialin.com/images/2025/artale/2.PNG"></p><p>上方：從<strong>左上</strong>拖怪到<strong>右上</strong>小平台，站在小平台當中就好(如圖)，一般來說會有<strong>搓的</strong>跟<strong>劈的</strong>打法各半，通常都打得完</p><blockquote><p>基本上這時候還是喝紅水還頂得住</p></blockquote><h1 id="41-50-青龍"><a href="#41-50-青龍" class="headerlink" title="41~50 青龍"></a>41~50 青龍</h1><p>這時候可以買一把<strong>衝過的命中雙天戟</strong>來升級裝備，當時買應該在 40w 左右，到 Discord 應該就超多人在脫手賣，青龍地圖基本上就四個平台在打而已，這邊基本上會開始花些水錢，不過打到的裝備不論賣商店還是賣玩家都有一定價位，運氣好還可以打到飛鏢賣人！</p><blockquote><p>這時候就開始搭配白水，紅水在這有點撐不住</p></blockquote><h1 id="50-60-巨人之森"><a href="#50-60-巨人之森" class="headerlink" title="50~60 巨人之森"></a>50~60 巨人之森</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/q29TSC9xspI?si=8Sk6oRnpUCPyv3Xa" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="繞圖打法"><a href="#繞圖打法" class="headerlink" title="繞圖打法"></a>繞圖打法</h2><p>基本上在這裡的打法，我會習慣把地圖切一半，從右手邊一路往下打，再從右下打到左下，一路在爬上去打，怪物重生速度也差不多，而且怪物密集度也很夠，邊看影片邊打也很舒服！</p><blockquote><p>50~53 應該魔天一擊才陸續快滿，剛開始剩一兩隻可能會單下會打不太痛，可以用劍氣縱橫先加減打</p></blockquote><h2 id="主力裝備"><a href="#主力裝備" class="headerlink" title="主力裝備"></a>主力裝備</h2><p>這邊我的敏捷已經點了 60 點，剛開始來還偶爾會 MISS，可能還要搭配命中藥丸才行</p><ul><li>長八蛇矛：9 敏 14 命 78 攻，當時 Discord 上隨意買的 200w</li><li>7 敏頭盔</li><li>101 眼鏡</li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>雖然現在也只玩到 57 等，不過比較時候只練不到二轉還厲害很多了 😆，度過了還沒有魔天一擊時的痛苦，往後要練的時候應該要搭配直播一起看，不然一定會練到睡著ＸＤ</p><blockquote><p>如果覺得這篇文章不錯，歡迎留言或分享出去喔！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近從私服轉戰繁中版的 Artale 楓之谷，享受過四倍經驗值之後來玩真的痛苦萬分ＸＤ，不過在經歷一陣子之後發現越來越多朋友進來一起玩了！因此坐牢起來就覺得還行～&lt;/p&gt;</summary>
    
    
    
    <category term="遊戲" scheme="https://nijialin.com/categories/%E9%81%8A%E6%88%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>【Playwright】打造更聰明瀏覽器自動化測試 | Model Context Protocol 入門</title>
    <link href="https://nijialin.com/2025/04/22/playwright-mcp-testing/"/>
    <id>https://nijialin.com/2025/04/22/playwright-mcp-testing/</id>
    <published>2025-04-22T14:30:01.000Z</published>
    <updated>2025-07-03T03:46:50.026Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期在開發 LLM 應用時，常需要讓模型與網頁進行互動，無論是自動填寫表單、爬取資料或執行測試。過去這類任務往往依賴於截圖或視覺模型，不僅效率低下且易出錯。今天要介紹的 Playwright Model Context Protocol (MCP) 提供了一個全新的解決方案，讓 LLM 能夠直接透過結構化的方式與瀏覽器互動，大幅提升自動化效率。</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><h2 id="什麼是-Playwright-MCP？"><a href="#什麼是-Playwright-MCP？" class="headerlink" title="什麼是 Playwright MCP？"></a>什麼是 Playwright MCP？</h2><p>Playwright MCP 是一個提供瀏覽器自動化功能的協議伺服器，它基於 Microsoft 的 <a href="https://playwright.dev/">Playwright</a> 開發。與傳統的瀏覽器自動化方法不同，MCP 不依賴截圖或視覺模型，而是透過結構化的 accessibility tree 讓 LLM 能夠理解和操作網頁內容。</p><p><img src="https://nijialin.com/images/2024/playwright/mcp.png"></p><blockquote><p><a href="https://github.com/microsoft/playwright-mcp">參考來自 GitHub</a></p></blockquote><h2 id="核心優勢"><a href="#核心優勢" class="headerlink" title="核心優勢"></a>核心優勢</h2><ol><li><strong>高效輕量</strong>：利用 Playwright 的 accessibility tree，而非像素級輸入，大幅降低資源消耗</li><li><strong>對 LLM 友好</strong>：不需要視覺模型，純粹基於結構化資料運作</li><li><strong>確定性工具應用</strong>：避免截圖方法常見的模糊性問題</li><li><strong>易於整合</strong>：與各種 LLM 和開發環境相容</li></ol><h2 id="安裝-Playwright-MCP"><a href="#安裝-Playwright-MCP" class="headerlink" title="安裝 Playwright MCP"></a>安裝 Playwright MCP</h2><p>在 VS Code 中安裝 Playwright MCP 非常簡單，只需在終端機中執行以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --add-mcp <span class="string">&#x27;&#123;&quot;name&quot;:&quot;playwright&quot;,&quot;command&quot;:&quot;npx&quot;,&quot;args&quot;:[&quot;@playwright/mcp@latest&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>Playwright MCP 能夠幫助我們在以下場景中提升效率：</p><ol><li><strong>網頁導航與表單填寫</strong>：自動化登入流程、問卷填寫等</li><li><strong>結構化內容的資料擷取</strong>：從網頁中擷取特定資訊</li><li><strong>LLM 驅動的自動化測試</strong>：讓 AI 協助執行 UI 測試</li><li><strong>為 AI 代理提供瀏覽器互動能力</strong>：使 AI 助手能夠執行網頁操作</li></ol><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>Playwright MCP 的工作原理主要基於以下步驟：</p><ol><li><strong>啟動伺服器</strong>：MCP 啟動一個本地伺服器，與 Playwright 通訊</li><li><strong>建立會話</strong>：建立一個瀏覽器會話，用於網頁互動</li><li><strong>取得結構化快照</strong>：從頁面取得 accessibility tree，包含網頁的結構化資訊</li><li><strong>LLM 分析</strong>：將結構化資訊發送給 LLM 進行分析</li><li><strong>執行操作</strong>：根據 LLM 的建議透過 MCP 執行瀏覽器操作</li><li><strong>收集回饋</strong>：取得操作後的頁面狀態，繼續與 LLM 互動</li></ol><h2 id="與傳統截圖方法的比較"><a href="#與傳統截圖方法的比較" class="headerlink" title="與傳統截圖方法的比較"></a>與傳統截圖方法的比較</h2><p>傳統的基於截圖的自動化方法存在幾個問題：</p><ol><li><strong>資源消耗大</strong>：處理圖像需要更多計算資源</li><li><strong>精確度問題</strong>：視覺模型可能誤解UI元素</li><li><strong>延遲高</strong>：圖像處理通常需要更長時間</li></ol><p>Playwright MCP 透過直接提供結構化資料解決了這些問題：</p><table><thead><tr><th>特性</th><th>基於截圖方法</th><th>Playwright MCP</th></tr></thead><tbody><tr><td>資源消耗</td><td>高</td><td>低</td></tr><tr><td>精確度</td><td>受限於視覺模型</td><td>高（結構化資料）</td></tr><tr><td>速度</td><td>慢</td><td>快</td></tr><tr><td>依賴視覺模型</td><td>是</td><td>否</td></tr><tr><td>結構化資料</td><td>無</td><td>有</td></tr></tbody></table><h1 id="實際應用"><a href="#實際應用" class="headerlink" title="實際應用"></a>實際應用</h1><h2 id="自動化測試"><a href="#自動化測試" class="headerlink" title="自動化測試"></a>自動化測試</h2><p>在自動化測試中，Playwright MCP 可以讓 LLM 理解頁面結構並產生測試案例，甚至可以自動驗證 UI 元素的正確性與可訪問性。</p><h2 id="資料擷取"><a href="#資料擷取" class="headerlink" title="資料擷取"></a>資料擷取</h2><p>對於資料擷取任務，Playwright MCP 能夠幫助 LLM 精確定位需要的資訊，並以結構化的方式擷取，無需複雜的 CSS 選擇器或 XPath。</p><h2 id="AI-助手增強"><a href="#AI-助手增強" class="headerlink" title="AI 助手增強"></a>AI 助手增強</h2><p>將 Playwright MCP 與 AI 助手結合，可以讓助手直接與網頁互動，幫助使用者完成表單填寫、訂票、預約等任務。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Playwright MCP 為 LLM 與瀏覽器的互動提供了一種全新的範式，不再依賴截圖或視覺模型，而是透過結構化的 accessibility tree 實現更高效、更準確的自動化。無論是進行網頁爬取、表單填寫、自動化測試還是建構智能代理，Playwright MCP 都提供了強大而靈活的工具。</p><p>透過以上的內容為一些範例，在完成之後接可以請 Agent 幫忙把 playwright script 寫出來，如此一來只要靠打字就可以做自動測試，然後等測試完成之後再請 AI 幫忙寫出來，如此一來真的很方便！</p><p>而隨著 LLM 在軟體開發和測試中的應用日益廣泛，Playwright MCP 這類工具將成為連接 AI 與網頁世界的重要橋樑。我期待看到更多創新的應用案例出現，也歡迎大家分享使用 Playwright MCP 的經驗與心得！</p><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近期在開發 LLM 應用時，常需要讓模型與網頁進行互動，無論是自動填寫表單、爬取資料或執行測試。過去這類任務往往依賴於截圖或視覺模型，不僅效率低下且易出錯。今天要介紹的 Playwright Model Context Protocol (MCP) 提供了一個全新的解決方案，讓 LLM 能夠直接透過結構化的方式與瀏覽器互動，大幅提升自動化效率。&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="Playwright" scheme="https://nijialin.com/tags/Playwright/"/>
    
    <category term="MCP" scheme="https://nijialin.com/tags/MCP/"/>
    
    <category term="自動化測試" scheme="https://nijialin.com/tags/%E8%87%AA%E5%8B%95%E5%8C%96%E6%B8%AC%E8%A9%A6/"/>
    
    <category term="LLM" scheme="https://nijialin.com/tags/LLM/"/>
    
    <category term="瀏覽器自動化" scheme="https://nijialin.com/tags/%E7%80%8F%E8%A6%BD%E5%99%A8%E8%87%AA%E5%8B%95%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【札幌】滑雪紀錄, 一天一雪場復健之旅</title>
    <link href="https://nijialin.com/2025/03/25/2025-03-snowboarding-at-hokkaido/"/>
    <id>https://nijialin.com/2025/03/25/2025-03-snowboarding-at-hokkaido/</id>
    <published>2025-03-25T23:04:43.000Z</published>
    <updated>2025-07-03T03:46:50.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://nijialin.com/images/2025/snowboard/bird.jpg"></p><p>本來預計跨年就要來北海道，但在腳受傷之後，原先的計劃就泡湯，多了三個月的恢復期才來到的北海道。</p><p>這次安排了三天的滑雪日，一天一雪場的計畫，也將這次的內容記錄下來，給未來有需要的朋友參考看看喔！</p><span id="more"></span><h1 id="Day-1-KIRORO-雪場"><a href="#Day-1-KIRORO-雪場" class="headerlink" title="Day 1 - KIRORO 雪場"></a>Day 1 - <a href="https://maps.app.goo.gl/Xx7hJjJToE7oerru6">KIRORO 雪場</a></h1><p><img src="https://nijialin.com/images/2025/snowboard/kiroro-card.jpg"></p><p>這次預約的巴士位置在 <a href="https://maps.app.goo.gl/Rrg1GhzbACFneKo67">OMO3 札幌薄野 by 星野集團</a>，預約的話建議提早個幾天，巴士容易預約滿 (感謝同學幫預約)，其實 OMO3 當天看房價一天大概也在 2000-2300 NTD 左右，其實可以乾脆住這邊，可以睡到時間夠再下去搭車 🚘</p><p>雪票+巴士我記得大概在 <strong>8000 日幣</strong>左右，是日本工作的同學幫買的，算巴士 2,200 + <a href="https://www.kiroro.co.jp/lift_price/">雪票 8,000</a>，其實還是比較划算，但套票位置可能需要再找找</p><blockquote><p>原本我是想住在小樽附近，當時也有存小樽 JR 旁的接駁車(<a href="https://maps.app.goo.gl/LMtX9AoUmvRQux327">位置</a>)</p></blockquote><p><img src="https://nijialin.com/images/2025/snowboard/kiroro-top.jpg"></p><p>剛好 2024 年底<del>2025 三月初雪下得很誇張，這次剛好跟到鬆雪日，過去在三月時刻理論上都很有可能滑到思樂冰，因此在出發前的 11</del>12 月可以觀察一下雪況，來決定到時候要安排多久</p><p><img src="https://nijialin.com/images/2025/snowboard/kiroro-snow.jpg"></p><p>因為第一天還是在熱身狀態，進去吃完飯出來之後就一直下雪，後來上山頂滑下來整個腳感都非常棒！</p><h1 id="Day-2-札幌國際雪場"><a href="#Day-2-札幌國際雪場" class="headerlink" title="Day 2 - 札幌國際雪場"></a>Day 2 - <a href="https://maps.app.goo.gl/Y1C1YGXhRPcQt1nh7">札幌國際雪場</a></h1><p><img src="https://nijialin.com/images/2025/snowboard/sapporo.jpg"></p><p>巴士+纜車套票可以<a href="https://www.sapporo-kokusai.jp/tw/price/tourpack.php">參考官方網站</a>，官網還有中文化其實很方便，套票當下看是 7800 日幣，方便又划算的選擇，一樣建議提早幾天前就要預約喔！</p><blockquote><p>我這次也是在 OMO3 翻店門口搭</p></blockquote><p><img src="https://www.sapporo-kokusai.jp/rule/images/rule_image1.jpg"></p><p>雪場路線相較 KIRORO 比較沒那麼多元，纜車選項也比較少，最下面的 gondola 上去要做 15 分鐘，但雪場是非常大，其實很適合剛學會 S turn 的人來這邊練習，真的累了還可以在路邊好好休息，比較不用像湯澤之類的人太多很擔心擋到別人</p><p><img src="https://nijialin.com/images/2025/snowboard/sapporo-top.jpg"></p><p>當天的雪況也是持續在下，第二天腳感比較回來了，也有稍微去樹林小鑽一下，但還是很擔心腳的狀態，因此有玩到就好～ 大部分還是在雪道裡面滑</p><p><img src="https://nijialin.com/images/2025/snowboard/sapporo-2.jpg"></p><p>今年的雪況真的很瘋，有一條纜車直接雪厚到停擺，同團友人還有進去裡面玩，真的很慶幸今年還有機會來看看看這盛況！</p><h1 id="Day-3-手稻滑雪場"><a href="#Day-3-手稻滑雪場" class="headerlink" title="Day 3 - 手稻滑雪場"></a>Day 3 - <a href="https://maps.app.goo.gl/ZhEJdaMz4xsbu6Zi6">手稻滑雪場</a></h1><p><img src="https://nijialin.com/images/2025/snowboard/teine-restaurant.jpg"></p><p>這天很幸運同團友人有車可以跟，就不用多花額外的交通時間，我記得當時找到是可以在<a href="https://maps.app.goo.gl/oEsCowKyAEfd3NBP9">手稻車站搭 70 號巴士</a>，大家<a href="https://maps.app.goo.gl/oEsCowKyAEfd3NBP9">可以參考連結</a>來看看，其實整體來說都算方便</p><p><img src="https://sapporo-teine.com/snow/lang/assets/images/course/course-map.jpg"><br>手稻這邊其實有分兩段，中間有一段路太平不好走，因此這次都在山上玩，最後才回下半部搭車，如果你是 park 派，這邊有各種竿子、跳台、箱子等著你來跳，這邊也會看到各種高手飛來飛去，真的很猛！</p><p><img src="https://nijialin.com/images/2025/snowboard/teine-status.jpg"></p><p>當天天氣我記得在 -10 度左右，而且雪一直下，雪道裡面的雪也都非常棒，纜車下面的雪也都很厚，喜歡到處鑽一定會覺得來這裡滑非常棒</p><p><img src="https://nijialin.com/images/2025/snowboard/teine-cold.jpg"></p><p>因為之前的經驗，其實雪衣裡面只有一件薄長袖，當下冷到頭超痛，還因此衝回食堂多吃個豬排飯冷靜一下再回去滑 🫢</p><p><img src="https://nijialin.com/images/2025/snowboard/teine-top.jpg"></p><p>唯一一個清楚的照片，上山天氣不太好，風很大也是一直下雪，可惜當下應該要帶夜滑鏡片來，應該會看得比較清楚</p><p><img src="https://nijialin.com/images/2025/snowboard/teine-black.jpg"></p><p>被同學帶去黑線體驗一下，當下看得陡&#x2F;抖度應該跟照片差不多👀，礙於受傷的腳還是只有 Heel side 下去</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><img src="https://nijialin.com/images/2025/snowboard/city-snow.jpg"></p><p>這次真的很幸運，在滑雪的三天內走了三個雪場，然後都是下雪日，到了逛街日接下也就開始融雪，這真的運氣點滿了，但坐飛機四小時真的很折磨…但仗著今年雪很多還是一定要來看看盛況才行！很多地方還有開到五月多，如果想去春滑練練可以考慮一下最近的機票喔！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2025/snowboard/bird.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;本來預計跨年就要來北海道，但在腳受傷之後，原先的計劃就泡湯，多了三個月的恢復期才來到的北海道。&lt;/p&gt;
&lt;p&gt;這次安排了三天的滑雪日，一天一雪場的計畫，也將這次的內容記錄下來，給未來有需要的朋友參考看看喔！&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="滑雪" scheme="https://nijialin.com/tags/%E6%BB%91%E9%9B%AA/"/>
    
    <category term="日本" scheme="https://nijialin.com/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="Snowboarding" scheme="https://nijialin.com/tags/Snowboarding/"/>
    
    <category term="北海道" scheme="https://nijialin.com/tags/%E5%8C%97%E6%B5%B7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>如何復原 Steam 遊戲紀錄檔 | 黑神話悟空</title>
    <link href="https://nijialin.com/2024/09/14/steam-recover-by-backup-windows/"/>
    <id>https://nijialin.com/2024/09/14/steam-recover-by-backup-windows/</id>
    <published>2024-09-14T13:10:00.000Z</published>
    <updated>2025-07-03T03:46:50.027Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/steam-backup/1.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>事情是這樣的，由於我跟家人個別有一台 PC，參考了巴哈上面的說法(<a href="https://forum.gamer.com.tw/C.php?bsn=60599&snA=31999">URL</a>)，為了省錢登入同樣的帳號，想說用<strong>離線模式</strong>就可以一起玩，但殊不知…操作上出了點失誤，結果我從 9&#x2F;9 ~ 9&#x2F;14 的記錄都消失(被覆蓋)，找了一下網路上的做法，看了檔案路徑中發現 Steam 居然有備份(超感動)，以下介紹一下如何救回來～</p><span id="more"></span><h1 id="步驟-1：打開-Steam-並找到你的遊戲"><a href="#步驟-1：打開-Steam-並找到你的遊戲" class="headerlink" title="步驟 1：打開 Steam 並找到你的遊戲"></a>步驟 1：打開 Steam 並找到你的遊戲</h1><p><img src="https://nijialin.com/images/2024/steam-backup/2.png"></p><p>首先來到最傷心的地方 😣，這就是我被覆蓋回去的版本…打開 Steam 客戶端，在左側的遊戲列表中找到《黑神話：悟空》，右鍵點擊遊戲名稱，選擇「管理」。</p><h1 id="步驟-2：瀏覽本機檔案"><a href="#步驟-2：瀏覽本機檔案" class="headerlink" title="步驟 2：瀏覽本機檔案"></a>步驟 2：瀏覽本機檔案</h1><p><img src="https://nijialin.com/images/2024/steam-backup/3.png"></p><p>在「管理」選單中，選擇「瀏覽本機檔案」，這會打開 Windows 檔案總管並顯示該遊戲的安裝目錄，開啟的樣子如下圖，找到 <code>b1/</code> 的資料夾。</p><p><img src="https://nijialin.com/images/2024/steam-backup/4.png"></p><h1 id="步驟-3：找到存檔資料夾"><a href="#步驟-3：找到存檔資料夾" class="headerlink" title="步驟 3：找到存檔資料夾"></a>步驟 3：找到存檔資料夾</h1><p><img src="https://nijialin.com/images/2024/steam-backup/5.png"></p><p>在遊戲的安裝目錄中，找到名為 Saved 的資料夾。存檔通常位於 Saved 資料夾內的 SaveGames 或 SaveGamesBackup 資料夾中。</p><p><img src="https://nijialin.com/images/2024/steam-backup/6.png"></p><h1 id="步驟-4：備份存檔位置"><a href="#步驟-4：備份存檔位置" class="headerlink" title="步驟 4：備份存檔位置"></a>步驟 4：備份存檔位置</h1><p><img src="https://nijialin.com/images/2024/steam-backup/7.png"></p><p>點進 <code>SaveGamesBackup</code>資料夾當中，這些都是 Steam 會定期幫忙備份的檔案，有分 即時、小時、每日。</p><h1 id="步驟-5：恢復存檔"><a href="#步驟-5：恢復存檔" class="headerlink" title="步驟 5：恢復存檔"></a>步驟 5：恢復存檔</h1><p><img src="https://nijialin.com/images/2024/steam-backup/8.png"></p><p>如果需要恢復存檔，這邊我選擇 01ReamtimeBackup，備份檔案裡面因為我的黑神話悟空裡面有兩個存檔，所以會看到 ArchiveSaveFile.1.sav 以及 ArchiveSaveFile.2.sav，這邊檔案比較大的就是我玩比較前面的進度，因此就把他複製起來來放到<strong>步驟三</strong> SaveGames 資料夾當中，會先看到有一串數字的資料夾，再點進去之後就會看到以下圖片的樣子，把檔案複製進去即可。<br><img src="https://nijialin.com/images/2024/steam-backup/9.png"></p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>經過這次才發現原來 Steam 做得這麼棒，都有即時在 local 幫玩家去備份，讓紀錄不小心被覆蓋的玩家可以輕鬆地在 Windows 上備份和恢復 Steam 遊戲的存檔，確保你的遊戲進度不會丟失，這次真的是有驚無險，紀錄起來下次發生時才不會手足無措～ 👀️</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/steam-backup/1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;事情是這樣的，由於我跟家人個別有一台 PC，參考了巴哈上面的說法(&lt;a href=&quot;https://forum.gamer.com.tw/C.php?bsn=60599&amp;snA=31999&quot;&gt;URL&lt;/a&gt;)，為了省錢登入同樣的帳號，想說用&lt;strong&gt;離線模式&lt;/strong&gt;就可以一起玩，但殊不知…操作上出了點失誤，結果我從 9&amp;#x2F;9 ~ 9&amp;#x2F;14 的記錄都消失(被覆蓋)，找了一下網路上的做法，看了檔案路徑中發現 Steam 居然有備份(超感動)，以下介紹一下如何救回來～&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="Windows" scheme="https://nijialin.com/tags/Windows/"/>
    
    <category term="Steam" scheme="https://nijialin.com/tags/Steam/"/>
    
    <category term="Backup" scheme="https://nijialin.com/tags/Backup/"/>
    
  </entry>
  
  <entry>
    <title>透過圖片或網址，讓 LINE Bot 產生行事曆來成為活動達人</title>
    <link href="https://nijialin.com/2024/09/06/linebot-image-to-google-calendar/"/>
    <id>https://nijialin.com/2024/09/06/linebot-image-to-google-calendar/</id>
    <published>2024-09-06T17:22:43.000Z</published>
    <updated>2025-07-03T03:46:50.025Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平時我們在收到各種平台上都很容易收到各式各樣的廣告文宣(職棒比賽、系上活動、社團…etc)，收到後卻因為忘了放進行事曆而錯過了很多活動跟獎品…🥲</p><p>而在這些文宣中有很多重要資訊，像是：標題、時間、地點、簡述、美美的圖，有沒有發現一些共同點？就是跟平常我們再加行事曆時的內容基本上一樣啊！(除了圖片以外)</p><p>這兩個相性這麼像，想當然一定是要把它組合再一起才對！因此透過這個專案，只要把圖片或圖片網址給 LINE Bot，就能夠幫你產生一個 Google Calendar 連結，讓你變成一個活動達人！</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>一般來說可以分兩種情況：</p><ol><li>收到系上群組轉發的<code>圖片</code></li><li>收到一個活動圖片<code>連結</code>，讓你自己看</li></ol><p>以上兩點在我記憶中的大學日子中很常收到的文宣，因此接下來我們就透過圖片跟連結來做行事曆！</p><h2 id="收到一則轉傳的圖片要如何變成行事曆連結呢？"><a href="#收到一則轉傳的圖片要如何變成行事曆連結呢？" class="headerlink" title="收到一則轉傳的圖片要如何變成行事曆連結呢？"></a>收到一則轉傳的圖片要如何變成行事曆連結呢？</h2><h3 id="確認-LINE-Bot-是否已建立"><a href="#確認-LINE-Bot-是否已建立" class="headerlink" title="確認 LINE Bot 是否已建立"></a>確認 LINE Bot 是否已建立</h3><blockquote><p>2024&#x2F;09&#x2F;04 更新了新的 LINE Bot 申請方式，請參考 <a href="https://techblog.lycorp.co.jp/zh-hant/linebot-2024-create-steps">如何透過新的建立方式，開啟你第一隻 LINE Bot 【2024&#x2F;09&#x2F;04】</a></p></blockquote><p>如果已經透過上述文章建立完 LINE Bot，接下來可以參考<a href="https://github.com/louis70109/linebot-image2calendar">GitHub 專案</a>，並將 LINE Bot 部署起來</p><h3 id="圖片處理"><a href="#圖片處理" class="headerlink" title="圖片處理"></a>圖片處理</h3><p>參考<a href="https://github.com/louis70109/linebot-image2calendar/blob/main/main.py">程式碼中</a>以下的 decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@handler.add(<span class="params">MessageEvent, message=ImageMessageContent</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_github_message</span>(<span class="params">event</span>):</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>在 Python 中很特別的是，可以透過 decorator(裝飾) 來判斷訊息類別，如此一來才不會 main function 有滿滿的判斷式，透過這方法大家可以更清楚程式碼當中是如何運行</p><p>圖片方面，則是透過以下的方式先取得圖片內容：</p><blockquote><p>小補充，過去在取的 image binary 時候，還需要另外寫迴圈將 binary 全部加起來成一個變數，現在僅需透過 <code>get_message_content</code> 就可以拿到整個圖片內容囉！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> ApiClient(configuration) <span class="keyword">as</span> api_client:</span><br><span class="line">        line_bot_blob_api = MessagingApiBlob(api_client)</span><br><span class="line">        image_content = line_bot_blob_api.get_message_content(event.message.<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><h3 id="圖片處理-1"><a href="#圖片處理-1" class="headerlink" title="圖片處理"></a>圖片處理</h3><p>回到正題，我在<a href="https://github.com/louis70109/linebot-image2calendar/blob/main/utils.py#L57">程式碼這邊</a>是透過 <code>gemini-1.5-flash</code> 來針對圖片說文解字</p><p>現在 AI 相比一兩年前聰明太多了，在 prompt 上把需求提出來，並且根據 Google Calendar 網址上 timestamp 的需求、以及所需格式，這樣就能夠輸出穩定圖片當中內容</p><p>另一方面，LINE 在文字上如果一次貼上太多時，會變成文本，也就是不會是連結產生。那這跟今天實作有什麼關係？</p><p>因為在使用上會傳送網址給用戶並帶上<code>?ExternalBrowser=1</code>，讓用戶在裝置上可以打開已登入的 Google Calendar 並把行事曆內容附上。且中文字在網址上都需要 urlencode，否則有些瀏覽器會編碼過不了，這情況就會導致文字太長變成文本</p><p>因此在這次專案中是<a href="https://github.com/louis70109/linebot-image2calendar/blob/main/utils.py#L85">透過 reurl API 來幫忙縮短網址</a>，透過短網址就可以處理掉相關問題 😇，除了行事曆內容更完整以外，也可以避免文字過長的困擾</p><h3 id="展示結果"><a href="#展示結果" class="headerlink" title="展示結果"></a>展示結果</h3><p><img src="https://nijialin.com/images/2024/image2calendar/image.png"></p><p>傳一張廣告文宣給 LINE Bot，請他整理裡面的內容，其中要含有標題、時間、內容，並且要針對這次活動說明一些注意事項</p><p><img src="https://nijialin.com/images/2024/image2calendar/calendar.png"></p><p>點選網址之後即會開啟行事曆，僅需要按確認或調整一下內容後即可唷！</p><h2 id="若是收到群組傳來一個網址讓我自己看圖片呢？"><a href="#若是收到群組傳來一個網址讓我自己看圖片呢？" class="headerlink" title="若是收到群組傳來一個網址讓我自己看圖片呢？"></a>若是收到群組傳來一個網址讓我自己看圖片呢？</h2><p>在這個步驟上，先預想大家會收到一串網址，點開是一個活動的網站內容，可能在系上的網頁、活動網頁…etc</p><p>在 LINE Bot 上因為是透過文字的方式，因此需要透過<a href="https://github.com/louis70109/linebot-image2calendar/blob/main/utils.py#L16">正規表達式判斷文字是否為網址</a>，只要判斷起來是，後面的操作步驟基本上跟上一章節一樣，丟給 Gemini 處理完，然後回傳 Google Calendar 網址來點選</p><h3 id="展示結果-1"><a href="#展示結果-1" class="headerlink" title="展示結果"></a>展示結果</h3><p><img src="https://nijialin.com/images/2024/image2calendar/url.png"></p><p>透過 LINE 將網址傳送給 LINE Bot 去解析，解析完成之後會回傳一個縮網址，讓用戶可以去點選</p><p>若是手機上，則會跳到 APP 上讓用戶去新增行事曆</p><p><img src="https://nijialin.com/images/2024/image2calendar/calendar2.png"></p><p>結果如同上一章節一樣，會把對應內容放入行事曆當中，只要按下<strong>送出</strong>即可！</p><h2 id="其他需要注意"><a href="#其他需要注意" class="headerlink" title="其他需要注意"></a>其他需要注意</h2><p>很多時候我們在處理網址上會很直覺把中文字都放進去，會發現時而正常時而壞，這種情況大多是因為有些瀏覽器有先幫忙預處理，才會看起來是好的，而有些瀏覽器功能比較簡潔，就有可能會壞掉</p><p>這時候就需要透過 urlencode 去把中文字的內容給 parse 掉，我們就以最低能執行的狀態去處理，因此就會使用 <code>urllib.parse.quote(content)</code> 來把文字處理掉，如此以來就不會有電腦正常，手機瀏覽器不正常的情況啦！</p><blockquote><p>詳細程式碼<a href="https://github.com/louis70109/linebot-image2calendar/blob/main/utils.py#L30">請見 URL</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這次的範例透過圖片判斷的方式，讓大家生活中收到的各種圖文可以整理近行事曆當中，有效管理大家在繁忙生活中的點點滴滴，希望透過這次應用讓大家有個初步的發想，運用 AI 的技術製作讓生活上方便應用的 LINE Bot！</p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;平時我們在收到各種平台上都很容易收到各式各樣的廣告文宣(職棒比賽、系上活動、社團…etc)，收到後卻因為忘了放進行事曆而錯過了很多活動跟獎品…🥲&lt;/p&gt;
&lt;p&gt;而在這些文宣中有很多重要資訊，像是：標題、時間、地點、簡述、美美的圖，有沒有發現一些共同點？就是跟平常我們再加行事曆時的內容基本上一樣啊！(除了圖片以外)&lt;/p&gt;
&lt;p&gt;這兩個相性這麼像，想當然一定是要把它組合再一起才對！因此透過這個專案，只要把圖片或圖片網址給 LINE Bot，就能夠幫你產生一個 Google Calendar 連結，讓你變成一個活動達人！&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="Google Calendar" scheme="https://nijialin.com/tags/Google-Calendar/"/>
    
    <category term="AI" scheme="https://nijialin.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>如何透過新的建立方式，開啟你第一隻 LINE Bot 【2024/09/04】</title>
    <link href="https://nijialin.com/2024/09/04/linebot-create-steps-2024/"/>
    <id>https://nijialin.com/2024/09/04/linebot-create-steps-2024/</id>
    <published>2024-09-04T19:00:51.000Z</published>
    <updated>2025-07-03T03:46:50.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 2024&#x2F;09&#x2F;04 發布關於 Messaging API 的建立方式有<a href="https://developers.line.biz/en/news/2024/09/04/no-longer-possible-to-create-messaging-api-channels-from-console/">所變更的新聞</a>，過去因為 LINE Developer Console 與 Official Account Manager 皆可以建立官方帳號(LINE Bot, OA…etc)，導致大家很容易搞混。</p><p>而這次的更新當中，透過統一介面，讓大家可以可以在一樣的介面中建立官方帳號，至於詳細操作步驟請見下文 ✨</p><span id="more"></span><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>1️⃣ 前往 <a href="https://entry.line.biz/form/entry/unverified">https://entry.line.biz/form/entry/unverified</a><br>2️⃣ 簡訊 📱 驗證<br>3️⃣ 輸入 Channel 相關資訊<br>4️⃣ 前往 Official Account Manager 啟動 Messaging API<br>🏆 透過 Webhook 開始開發 👨‍💻<br>以上步驟，你學會了嗎？<br>Messaging API Channel 將在 2024 年 9 月 4 日 起正式變更！</p><p>📖 詳情請見：<a href="https://lin.ee/RSw9UxH/yltz">https://lin.ee/RSw9UxH/yltz</a></p><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><h2 id="1-前往我們熟悉的-LINE-Developer-Console"><a href="#1-前往我們熟悉的-LINE-Developer-Console" class="headerlink" title="1. 前往我們熟悉的 LINE Developer Console"></a>1. 前往我們熟悉的 <a href="https://developers.line.biz/console/">LINE Developer Console</a></h2><p><img src="https://nijialin.com/images/2024/linebot-create/1.png"></p><p>這邊先預設各位已經有建立過 Provider，然後選擇 <strong>Create a Messaging API Channel</strong></p><blockquote><p>如果對於 Provider 以及官方帳號之間的關係，歡迎參考這篇 - <a href="https://tw.linebiz.com/manual/line-official-account/line-porvider-and-channel-intro/">【LINE Developers】 Provider 及 Channel 設定說明</a></p></blockquote><h2 id="2-引導至新的建立入口"><a href="#2-引導至新的建立入口" class="headerlink" title="2. 引導至新的建立入口"></a>2. 引導至<a href="https://entry.line.biz/form/entry/unverified">新的建立入口</a></h2><p><img src="https://nijialin.com/images/2024/linebot-create/2.png"></p><p>由於統一入口的關係，這邊新增了一段敘述文字以及<strong>建立按鈕</strong>，讓大家可以到<a href="https://entry.line.biz/form/entry/unverified">新的建立入口</a>去填寫相關資訊</p><h2 id="3-建立屬於你的官方帳號"><a href="#3-建立屬於你的官方帳號" class="headerlink" title="3. 建立屬於你的官方帳號"></a>3. 建立屬於你的官方帳號</h2><p><img src="https://nijialin.com/images/2024/linebot-create/3.png"></p><p>接著這步驟跟往常一樣，把該填的資訊填寫清楚，如果是測試帳號的話建議加入<strong>前綴符號</strong>(prefix)，避免與正式環境的官方帳號搞混喔！</p><h2 id="4-確認資訊是否有誤"><a href="#4-確認資訊是否有誤" class="headerlink" title="4. 確認資訊是否有誤"></a>4. 確認資訊是否有誤</h2><p><img src="https://nijialin.com/images/2024/linebot-create/4.png"></p><h2 id="5-建立完成！"><a href="#5-建立完成！" class="headerlink" title="5. 建立完成！"></a>5. 建立完成！</h2><p><img src="https://nijialin.com/images/2024/linebot-create/5.png"></p><p>過往想升級官方帳號時都會找老半天，這次在這步驟可以選擇是否要升級官方帳號，減少操作人員的步驟～</p><p>若是想先開發測試的話，可以點選<strong>稍後驗證</strong>，前往 Official Account Manager</p><h2 id="6-同意條款"><a href="#6-同意條款" class="headerlink" title="6. 同意條款"></a>6. 同意條款</h2><p><img src="https://nijialin.com/images/2024/linebot-create/6.png"></p><p>由於 LINE 非常重視大家的使用權益，請大家在操作時務必閱讀相關條款喔</p><h2 id="7-如何啟用官方帳號的-Webhook"><a href="#7-如何啟用官方帳號的-Webhook" class="headerlink" title="7. 如何啟用官方帳號的 Webhook?"></a>7. 如何啟用官方帳號的 Webhook?</h2><p><img src="https://nijialin.com/images/2024/linebot-create/7.png"></p><p>首先先來到<a href="https://manager.line.biz/">Official Account Manager</a>，點選右方的<strong>設定</strong>，找到左邊的 <strong>Messaging API</strong> 選項，就會看到<strong>啟用 Messaging API</strong>的按鈕囉！</p><h2 id="8-選擇欲綁定的-Provider"><a href="#8-選擇欲綁定的-Provider" class="headerlink" title="8. 選擇欲綁定的 Provider"></a>8. 選擇欲綁定的 Provider</h2><p><img src="https://nijialin.com/images/2024/linebot-create/8.png"></p><p>這邊可能操作人員會有點疑惑，剛剛不是已經在 Provider 裡面選了，怎麼沒有自動綁定？</p><p>因為好多時候一開始 Provider 大家還沒確定好就建立，透過這樣的設計，或許可以讓大家在啟用 Messaging API 時，可以想想要放那個 Provider 比較好～</p><h2 id="9-建立完成！"><a href="#9-建立完成！" class="headerlink" title="9. 建立完成！"></a>9. 建立完成！</h2><p><img src="https://nijialin.com/images/2024/linebot-create/9.png"></p><p>這邊看到 Webhook 相關資訊之後，就代表可以開始開發囉！</p><h2 id="10-回-Developer-Console-確認"><a href="#10-回-Developer-Console-確認" class="headerlink" title="10. 回 Developer Console 確認"></a>10. 回 Developer Console 確認</h2><p><img src="https://nijialin.com/images/2024/linebot-create/10.png"></p><p>除了 Official Account Manager 那邊確定之外，也要記得回 Developer Console 確認一下官方帳號是否有建立完成，然後就可以拿 Channel Secret &amp; Access Token 開始做事囉！</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>透過本文的介紹，你已經學會了在 2024 年 9 月 4 日之後建立 Messaging API Channel 的步驟。你已經賣出了開發 LINE Bot 的第一步。現在你可以開始使用 Webhook 開發你的 LINE Bot 了！</p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 2024&amp;#x2F;09&amp;#x2F;04 發布關於 Messaging API 的建立方式有&lt;a href=&quot;https://developers.line.biz/en/news/2024/09/04/no-longer-possible-to-create-messaging-api-channels-from-console/&quot;&gt;所變更的新聞&lt;/a&gt;，過去因為 LINE Developer Console 與 Official Account Manager 皆可以建立官方帳號(LINE Bot, OA…etc)，導致大家很容易搞混。&lt;/p&gt;
&lt;p&gt;而這次的更新當中，透過統一介面，讓大家可以可以在一樣的介面中建立官方帳號，至於詳細操作步驟請見下文 ✨&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="Backend" scheme="https://nijialin.com/tags/Backend/"/>
    
  </entry>
  
  <entry>
    <title>【Threads SDK】透過程式發送你的第一篇 Threads 貼文</title>
    <link href="https://nijialin.com/2024/08/17/python-threads-sdk-introduction/"/>
    <id>https://nijialin.com/2024/08/17/python-threads-sdk-introduction/</id>
    <published>2024-08-17T23:54:23.000Z</published>
    <updated>2025-07-03T03:46:50.027Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期接收到 Threads 也開出 API 可以使用，看網路上有許多人討論相關做法，同時也閱讀了許多大大們的文章，以下就將我這幾天測試發文的結果記錄下來，給有需要使用的讀者們～</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><h2 id="1-建立應用程式"><a href="#1-建立應用程式" class="headerlink" title="1. 建立應用程式"></a>1. 建立應用程式</h2><p><img src="https://nijialin.com/images/2024/threads-sdk/1-createapp.png"></p><p>至 <a href="https://developers.facebook.com/apps/">Meta Developer Tool</a> 右上角按下 <strong>Create App</strong>，因為是要串接 Threads，選擇 <strong>Access the Threads API</strong></p><h2 id="2-選擇-Threads"><a href="#2-選擇-Threads" class="headerlink" title="2. 選擇 Threads"></a>2. 選擇 Threads</h2><p><img src="https://nijialin.com/images/2024/threads-sdk/2-name.png"></p><p>期間把需要填上的資訊補上即可，就可以建立成功</p><h2 id="3-開啟-APIs"><a href="#3-開啟-APIs" class="headerlink" title="3. 開啟 APIs"></a>3. 開啟 APIs</h2><p><img src="https://nijialin.com/images/2024/threads-sdk/3-apis.png"></p><p>建立完成之後，預設 Threads 只會幫忙開一個 API，其他的可以按下去把它打開，基本上要用也都是全開，應該沒有不想開的 (?)</p><h2 id="4-加入-IG-帳號"><a href="#4-加入-IG-帳號" class="headerlink" title="4. 加入 IG 帳號"></a>4. 加入 IG 帳號</h2><p><img src="https://nijialin.com/images/2024/threads-sdk/4-add-account.png"></p><p>這邊一開始會有點誤導，以為自己 Facebook 帳號有登入就可以，要再把自己的 IG 帳號加入為測試帳號，輸入帳號不用加上 <strong>＠</strong></p><h2 id="5-允許-Threads-與應用程式連動"><a href="#5-允許-Threads-與應用程式連動" class="headerlink" title="5. 允許 Threads 與應用程式連動"></a>5. 允許 Threads 與應用程式連動</h2><p><img src="https://nijialin.com/images/2024/threads-sdk/5-thread-connect.png"></p><p>這邊在第四步加入帳號之後，理論上會導過去，如果沒有的話，也可以找設定頁面中的<strong>邀請</strong>，這邊點進來之後就會看到剛剛送出的測試邀請，<strong>接受</strong>即可</p><h2 id="6-開始測試"><a href="#6-開始測試" class="headerlink" title="6. 開始測試"></a>6. 開始測試</h2><p><img src="https://nijialin.com/images/2024/threads-sdk/7-dev-tool.png"></p><p>大家剛到 <strong>Graph 測試頁</strong>之後，要先產生出 Access Token 之後才可以合法拿到相關的資料，這邊點下 Generate Token 之後，就會來到跳轉頁面</p><p><img src="https://nijialin.com/images/2024/threads-sdk/6-access.png"></p><p>這邊跟各種網頁應用程式一樣，都會跳一個同意頁面之後才可以開始</p><h2 id="7-拿取個人帳號資訊"><a href="#7-拿取個人帳號資訊" class="headerlink" title="7. 拿取個人帳號資訊"></a>7. 拿取個人帳號資訊</h2><p><img src="https://nijialin.com/images/2024/threads-sdk/7-dev-tool.png"></p><p>最後就可以把 Threads API 們都打過一遍，可以透過 <code>/me</code> 先取得自己的 <code>User ID</code>，後面 API 路徑都會需要 id 才可以執行</p><h2 id="8-如何透過-SDK-上傳第一篇貼文？"><a href="#8-如何透過-SDK-上傳第一篇貼文？" class="headerlink" title="8. 如何透過 SDK 上傳第一篇貼文？"></a>8. 如何透過 SDK 上傳第一篇貼文？</h2><p>安裝 Threads SDK，要透過其他方式安裝也行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install threads-sdk</span><br></pre></td></tr></table></figure><p>接著準備三個主要的參數，USER_ID、ACCESS_TOKEN、APP_SECRET，其中前兩個上面已經有先取到了，APP_SECRET 可以透過下圖的方式到 Dashboard 中找到詳細資訊後取得</p><p><img src="https://nijialin.com/images/2024/threads-sdk/8-app-secret.png"></p><p>來到了發文環節，建立一個 main.py 之後，將這三個參數帶進初始化當中，由於 Threads 特性可以一次發多個文，因此需要先建立 Container 先將文章儲存起來，之後在把 Container publish</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threads.api <span class="keyword">import</span> ThreadsAPI</span><br><span class="line"></span><br><span class="line">threads = ThreadsAPI(</span><br><span class="line">    user_id=USER_ID, access_token=ACCESS_TOKEN, app_secret=APP_SECRET</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得個人資訊</span></span><br><span class="line"><span class="comment"># user_info = threads.get_user_bio()</span></span><br><span class="line"><span class="comment"># print(user_info)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立發文的 Container，因為 Threads 可以一次發多個文</span></span><br><span class="line">media_json = threads.create_media_container(text=<span class="string">&quot;Hello, World! \n This is a test post.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(media_json)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將 Container 發文</span></span><br><span class="line">threads.publish_container(media_json.get(<span class="string">&quot;id&quot;</span>))</span><br></pre></td></tr></table></figure><p><img src="https://nijialin.com/images/2024/threads-sdk/9-post.png"></p><p>執行之後就可以發現自己的測試文出去啦！</p><h1 id="結論-amp-注意事項"><a href="#結論-amp-注意事項" class="headerlink" title="結論 &amp; 注意事項"></a>結論 &amp; 注意事項</h1><ul><li>透過 Graph 拿到的 Token 是 short-live 的，<strong>期限是 24h</strong>，如果想要用比較久，請拿 short-live ACCESS_TOKEN + APP_SECRET 並透過<a href="https://github.com/louis70109/threads-sdk/blob/main/threads/api.py#L45">這支 API</a>來取得 <strong>long-live ACCESS_TOKEN</strong></li><li>發文需要先建立 Container，後續可以一起推出</li><li>相關的 API 如果不敷使用，歡迎<a href="https://github.com/louis70109/threads-sdk">透過 Pull Request </a>來更新 SDK 唷！</li></ul><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul><li><a href="https://cowton0517.medium.com/come-on-%E4%BD%BF%E7%94%A8-threads-api-%E4%BE%86%E8%87%AA%E5%8B%95%E7%99%BC%E6%96%87%E5%90%A7-792797a68437">Come on！使用 Threads API 來自動發文吧</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近期接收到 Threads 也開出 API 可以使用，看網路上有許多人討論相關做法，同時也閱讀了許多大大們的文章，以下就將我這幾天測試發文的結果記錄下來，給有需要使用的讀者們～&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="SDK" scheme="https://nijialin.com/tags/SDK/"/>
    
    <category term="Threads" scheme="https://nijialin.com/tags/Threads/"/>
    
    <category term="Meta" scheme="https://nijialin.com/tags/Meta/"/>
    
  </entry>
  
  <entry>
    <title>只有 Status page 還不夠！講人話才知道 Infra 發生什麼事</title>
    <link href="https://nijialin.com/2024/08/05/line-bot-gemini-for-status-page-analyze/"/>
    <id>https://nijialin.com/2024/08/05/line-bot-gemini-for-status-page-analyze/</id>
    <published>2024-08-05T19:10:13.000Z</published>
    <updated>2025-07-03T03:46:50.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好，以下是我在 <a href="https://coscup.org/2024/zh-TW/session/AEJHAC">COSCUP 2024</a> 所分享的內容，帶大家了解在日常開發之餘，Side Project 也能夠透過 Status Page 來了解監控的重要性，以及如何透過 AI 來初步分析錯誤的發生原因，接著就一起往下看吧！</p><span id="more"></span><h1 id="什麼是-Status-Page"><a href="#什麼是-Status-Page" class="headerlink" title="什麼是 Status Page?"></a>什麼是 Status Page?</h1><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/09271d7b0369482d8046a13ff93550a0?slide=17" title="只有 Status page 還不夠！講人話才知道 Infra 發生什麼事" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>Status Page 是一個專門用來確認與查看系統、服務或是各種應用程式執行狀態的網頁。除了監測狀態，大部分也都能接上各家通知系統，當服務出現狀況時，可以即時通知服務開發者，通常 Status Page 的功能包括：</p><ul><li>即時狀態：顯示當前服務的執行狀態，大致份為「正常」、「部分中斷」、「完全中斷」…etc</li><li>歷史記錄：記錄過去的服務中斷事件、維護活動和其他相關事件，更多可以往後推算 SLA、SLO…etc</li><li>通知：讓用戶訂閱狀態更新通知，透過電子郵件、通訊軟體或其他方式接收通知</li></ul><h2 id="使用-Status-Page-的優點"><a href="#使用-Status-Page-的優點" class="headerlink" title="使用 Status Page 的優點"></a>使用 Status Page 的優點</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/09271d7b0369482d8046a13ff93550a0?slide=21" title="只有 Status page 還不夠！講人話才知道 Infra 發生什麼事" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe>- 對內部開發團隊來說，它能即時更新狀態、防止問題擴大、降低維護成本、提高跨團隊的資訊共享和透明度，並節省溝通時間<ul><li>對外部客戶來說，狀態頁面能幫助他們確認問題來源、提高對服務的信任度、提供透明度和可追溯性，並減少對客服的依賴</li></ul><blockquote><p>每當服務越來越多時，很多時候都分身乏術，或許大家可以考慮架設一個 Status Page 來監控自家服務，幫忙分攤一些 effort</p></blockquote><h2 id="為什麼要自架-Uptime-Kuma？他又是什麼？"><a href="#為什麼要自架-Uptime-Kuma？他又是什麼？" class="headerlink" title="為什麼要自架 Uptime Kuma？他又是什麼？"></a>為什麼要自架 Uptime Kuma？他又是什麼？</h2><p>Uptime Kuma 是一個開源且能夠自行管理的監控工具，專門用來監控各種網站和服務的可用性。以下簡單列出一些使用 Uptime Kuma 的優點：</p><ul><li>開源和免費：開源的監控系統，任何人都可以根據自家需求免費使用和調整</li><li>自主管理：你可以在自己的伺服器上運行 Uptime Kuma，完全掌控數據和配置，確保數據隱私和安全。</li><li>簡單易用：Uptime Kuma 提供直觀的用戶界面，易於設置和使用，適合各種技術水平的用戶。</li><li>多種監控選項：支援多種監控類型，包括 HTTP(s)、TCP、Ping、DNS、Push 等，滿足不同的監控需求</li><li>各種通知管道：如電子郵件、Slack、LINE Messaging API、Webhook…etc，確保重要的狀態變更能夠及時傳達</li><li>歷史數據和報告：提供詳細的歷史數據和報告，幫助你分析服務性能和可用性</li></ul><h2 id="架設建議"><a href="#架設建議" class="headerlink" title="架設建議"></a>架設建議</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/09271d7b0369482d8046a13ff93550a0?slide=27" title="只有 Status page 還不夠！講人話才知道 Infra 發生什麼事" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>很多時候服務都會放在同一家的雲上(ex: Verda, GCP, AWS..)，但很多時候發生問題時都會是在不同的網路下發生，為了讓監控上能夠更有說服力，會建議將 Status Page 架設在不同的雲上，即便今天雲發生了任何事件，都不會影響到監控系統。</p><blockquote><p>以我自己來說，個人的 Side Project 都放在 GCP 上，而 Status Page 則是放在 fly.io 上面，如果想試看看可以參考<a href="https://github.com/louis70109/uptime-kuma-fly">我的 GitHub</a></p></blockquote><h1 id="如何整合？怎麼讓他人聽懂工程師的語言？"><a href="#如何整合？怎麼讓他人聽懂工程師的語言？" class="headerlink" title="如何整合？怎麼讓他人聽懂工程師的語言？"></a>如何整合？怎麼讓他人聽懂工程師的語言？</h1><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/09271d7b0369482d8046a13ff93550a0?slide=34" title="只有 Status page 還不夠！講人話才知道 Infra 發生什麼事" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>對比我工作經驗，以及周遭朋友的工作上，很多時候工作內容都會透過 LINE 傳來傳去，很多時候除了公司最大的群組之外，另外都會有各式小群組去討論不一樣的事情，因此很多時候需要有個 LINE Bot 自動化消化一些錯誤處理，讓第一線工程師可以趕快滅火，以下快速說明可以如何整合</p><h2 id="想像中-Status-Page-能幫到的地方"><a href="#想像中-Status-Page-能幫到的地方" class="headerlink" title="想像中 Status Page 能幫到的地方"></a>想像中 Status Page 能幫到的地方</h2><p><img src="https://nijialin.com/images/2024/status-page/1.png"></p><p>當服務遇到任何問題時</p><ol><li>先透過 webhook 傳進 LINE Bot Server</li><li>Server 依照相關 log 查詢服務的倉庫裡面是否有囤放其他 log (prometheus, loki, SQL…etc)</li><li>將相關資料傳送給 Server 去分析 (<a href="https://github.com/louis70109/line-bot-status-analyze/blob/main/controller/kuma_controller.py#L37">prompt URL</a>) 並傳到 LINE 群組裡</li><li>依照嚴重程度決定要轉發到哪個群組<ol><li>分享案例：Error Log 也可以依照嚴重程度決定讓 Bot 自動發到指定群組，普遍會有 1~3 個群組，大的服務有機會到 5 個</li><li>適時的接上 oncall 系統也是不錯</li></ol></li><li>人手一個 LINE，透過 LINE Bot 來推送訊息可以做更多客製化的內容</li></ol><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>普遍的 Error log 在網路上通常都會有解法，同等來說 AI 在訓練時應該也都有放入相關的材料，因此依照這些日常系統出現的錯誤來說，都可以透過 AI 有條理的幫忙分析，更直接點可以幫忙 Senior 去教育 Junior 對於錯誤分析的體感，讓團隊對於系統的熟悉程度能夠更快 ✍️</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/09271d7b0369482d8046a13ff93550a0?slide=38" title="只有 Status page 還不夠！講人話才知道 Infra 發生什麼事" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>有鑒於最近許多 Vision 的 AI 分析越來越多，個人用起來的體感真的滿不錯，雖然費用不便宜，但各家 AI 也應該都還有免費方案可以用</p><p>最後，有些跟資安或是個資的東西其實不適合透過 API 打給雲端廠商，有些開發者應該會被要求要自架 AI model(<a href="https://ai.google.dev/gemma?hl=zh-tw">Gemma</a> || <a href="https://llama.meta.com/">Llama</a>)，這時可以透過 <a href="https://groq.com/">GROQ</a> 這個服務測試看看，雖然在串接上還是透過 API 實驗，但至少可以先測測 model 帶來的火力，再決定要不要花時間架起來～</p><p>如果以上的內容對你有幫助，歡迎各位分享出去！</p><p><a href="https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/">在 Fly.io 上架設 Uptime Kuma 監控 Side Project</a></p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家好，以下是我在 &lt;a href=&quot;https://coscup.org/2024/zh-TW/session/AEJHAC&quot;&gt;COSCUP 2024&lt;/a&gt; 所分享的內容，帶大家了解在日常開發之餘，Side Project 也能夠透過 Status Page 來了解監控的重要性，以及如何透過 AI 來初步分析錯誤的發生原因，接著就一起往下看吧！&lt;/p&gt;</summary>
    
    
    
    <category term="研討會" scheme="https://nijialin.com/categories/%E7%A0%94%E8%A8%8E%E6%9C%83/"/>
    
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="Uptime Kuma" scheme="https://nijialin.com/tags/Uptime-Kuma/"/>
    
    <category term="Gemini" scheme="https://nijialin.com/tags/Gemini/"/>
    
    <category term="AI" scheme="https://nijialin.com/tags/AI/"/>
    
    <category term="Status Page" scheme="https://nijialin.com/tags/Status-Page/"/>
    
  </entry>
  
  <entry>
    <title>AI practice of LINE Bot first conversation</title>
    <link href="https://nijialin.com/2024/07/02/line-bot-ai-practice-of-conversation/"/>
    <id>https://nijialin.com/2024/07/02/line-bot-ai-practice-of-conversation/</id>
    <published>2024-07-02T15:28:01.000Z</published>
    <updated>2025-07-03T03:46:50.022Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/line-bot-gemini/1.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在以前開發 LINE Bot 的過程中，我們常常面臨一個問題：用戶輸入的文字千變萬化，可能包含錯字、口語化表達等。這使得我們需要設計非常複雜的判斷邏輯，才能確保 Bot 能正確地辨識並回應用戶的輸入。這不僅需要投入大量時間和精力，還需要不斷調整和維護這些判斷規則。這種方式不僅效率低下，而且容易出現錯誤。</p><span id="more"></span><p>在本文中，將快速介紹如何利用生成式 AI 技術來幫助 LINE Bot 在對話開始之前主動判斷適合的條件，並根據這些條件自動執行相關的任務。讓我們一起來看看具體的實現方法吧！</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>以前開發 LINE Bot 時，開發者往往需要投入大量時間來設計和實現正規化的判斷邏輯。這些正規化規則用於判斷用戶輸入的各種文字，進而觸發相應的功能。然而，這種方法存在一些挑戰：</p><ol><li><strong>多樣化輸入</strong>：用戶輸入的文字千變萬化，可能包含錯字、口語化表達等，這使得單純依靠正規化規則難以精確判斷。</li><li><strong>維護成本高</strong>：由於正規化規則需要手動設計和調整，隨著需求增加，維護這些規則的成本也會不斷上升。</li></ol><p>為了解決這個問題，這次引入了生成式 AI。可以根據預定的條件，來幫助 LINE Bot 做初期的條件判斷。這樣一來，我們就不再需要手動設計和維護大量的判斷規則，大大提高了開發效率和準確性。</p><h2 id="如何實作"><a href="#如何實作" class="headerlink" title="如何實作"></a>如何實作</h2><p>參考 GitHub 中的範例(<a href="https://github.com/louis70109/linebot-gemini-earthquake/blob/main/main.py#L110">URL</a>)，以下是這次主要展示的片段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定義條件對應字典</span></span><br><span class="line">bot_condition = &#123;</span><br><span class="line">    <span class="string">&quot;清空&quot;</span>: <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;摘要&quot;</span>: <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;地震&quot;</span>: <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;氣候&quot;</span>: <span class="string">&#x27;D&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;其他&quot;</span>: <span class="string">&#x27;E&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化生成式 AI 模型</span></span><br><span class="line">model = genai.GenerativeModel(<span class="string">&#x27;gemini-1.5-pro&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型生成內容並進行條件判斷</span></span><br><span class="line">response = model.generate_content(</span><br><span class="line">    <span class="string">f&#x27;請判斷 <span class="subst">&#123;text&#125;</span> 裡面的文字屬於 <span class="subst">&#123;bot_condition&#125;</span> 裡面的哪一項？符合條件請回傳對應的英文文字就好，不要有其他的文字與字元。&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gemini 產生的字會有多餘的空白，因此需要清除</span></span><br><span class="line">text_condition = re.sub(<span class="string">r&#x27;[^A-Za-z]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根據判斷結果執行相應任務</span></span><br><span class="line"><span class="keyword">if</span> text_condition == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> text_condition == <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">    <span class="comment"># 添加處理摘要的邏輯</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 處理其他情況</span></span><br></pre></td></tr></table></figure><ul><li>透過事前定義一個 bot_condition 的 JSON，來對應每個條件</li><li>透過生成式 AI 來判斷用戶輸入的文字所對應的選項</li><li>由於 Gemini 在這條件中會產生多餘的空白，因此還是用 regex 來清除空白</li><li>對應事件就用選擇題的方式讓 Bot 判斷</li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>本文介紹了如何利用生成式 AI 技術來幫助 LINE Bot 在對話開始之前主動判斷適合的條件，並根據這些條件自動執行相關的任務。透過事先定義條件對應選項和使用生成式 AI，開發者可以大大提高開發效率和準確性，同時減少維護成本。</p><p>這種方法不僅能夠應對用戶輸入的多樣化文字，還能夠根據預定的條件快速判斷並執行相應的任務。這將為 LINE Bot 的開發帶來更高的效率和更好的用戶體驗。</p><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><p>以下是一些關於 LINE Bot 開發的參考連結：</p><ul><li><a href="https://developers.line.biz/en/docs/messaging-api/">LINE Messaging API 官方文件</a></li><li><a href="https://github.com/line/line-bot-sdk-python">LINE Bot SDK for Python 官方文件</a></li></ul><p>希望以上資訊對您有所幫助！</p><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/line-bot-gemini/1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在以前開發 LINE Bot 的過程中，我們常常面臨一個問題：用戶輸入的文字千變萬化，可能包含錯字、口語化表達等。這使得我們需要設計非常複雜的判斷邏輯，才能確保 Bot 能正確地辨識並回應用戶的輸入。這不僅需要投入大量時間和精力，還需要不斷調整和維護這些判斷規則。這種方式不僅效率低下，而且容易出現錯誤。&lt;/p&gt;</summary>
    
    
    
    <category term="AI" scheme="https://nijialin.com/categories/AI/"/>
    
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Gemini" scheme="https://nijialin.com/tags/Gemini/"/>
    
    <category term="AI" scheme="https://nijialin.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>LINE TECH FRESH 2024 畢業分享會精彩回顧</title>
    <link href="https://nijialin.com/2024/06/27/line-techfresh-graduation-2024-result/"/>
    <id>https://nijialin.com/2024/06/27/line-techfresh-graduation-2024-result/</id>
    <published>2024-06-27T18:00:43.000Z</published>
    <updated>2025-07-03T03:46:50.024Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://vos.line-scdn.net/landpress-content-v2-vcfc68aynwenkh3bno0ixfx8/1719472774665.png?updatedAt=1719472776000"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好，我們是 LINE Developer Relations 團隊，不曉得大家從 LINE TECH FRESH 畢業分享會中是否有獲得哪些有趣的收穫呢？從 <a href="https://techblog.lycorp.co.jp/zh-hant/line-tech-fresh-graduation-2024">Save your time - TECH FRESH 畢業分享會 2024 @ LINE</a>活動當中有許多介紹，以下就帶大家回味一下當天的內容囉！</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p><img src="https://vos.line-scdn.net/landpress-content-v2-vcfc68aynwenkh3bno0ixfx8/1719472773499.png?updatedAt=1719472774000"></p><h1 id="為什麼要參加軟體實習生研討會？"><a href="#為什麼要參加軟體實習生研討會？" class="headerlink" title="為什麼要參加軟體實習生研討會？"></a>為什麼要參加軟體實習生研討會？</h1><p>參加一場 LINE TECH FRESH 畢業分享會會帶來以下好處：</p><ul><li>學習機會：可以從優秀的 LINE TECH FRESH 講者獲得寶貴的實習經驗和見解</li><li>知識分享：參加活動要把握機會是與 LINE 的實習生以及 Mentor 交流和分享軟體領域的知識</li><li>自我推廣：除了聆聽演講外，參加活動也是展示自己專業知識和技能的好機會，多交流絕對是個好的選擇！</li></ul><h2 id="蔡-EC：24-歲開發一次成功"><a href="#蔡-EC：24-歲開發一次成功" class="headerlink" title="蔡 EC：24 歲開發一次成功"></a>蔡 EC：24 歲開發一次成功</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/525f03367bc34088b006617b6b46b216?slide=4" title="蔡EC：24歲開發一次成功" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>由 Winnie 首先從 LINE SHOPPING 開始介紹，並透過自身 Data team 的實習經驗中了解日常的工作內容，並分享在實習與在學校同時並行時的一些見解。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/525f03367bc34088b006617b6b46b216?slide=18" title="蔡EC：24歲開發一次成功" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>緊接 Lauren 分享了在 EC SPM 團隊中使用 Kafka 的經驗談，帶現場的觀眾認識在企業中是如何使用以及架構設計，並且透過 2024 農曆新年的活動認識更多案例。</p><blockquote><p>更多內容請見 Youtube</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/gABdQl0Nnt8?si=hKFgWiRXvcu3AHtC" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="QA-蝦米-QA？我的扣超讚的啊"><a href="#QA-蝦米-QA？我的扣超讚的啊" class="headerlink" title="QA 蝦米 QA？我的扣超讚的啊"></a>QA 蝦米 QA？我的扣超讚的啊</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/db34988fe80c49ae8b39fdee98cd8c89?slide=10" title="QA 蝦米 QA？我的扣超讚的啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>第二組則是由 Lawrence &amp; YT 分享在當任 QA 時的一些眉眉角角，首先 Lawrence 分享在 QA 的開發流程中，分為六個主要階段：</p><ul><li>分析：進行測試需求分析</li><li>設計：撰寫測試案例</li><li>開發：開發自動化腳本</li><li>測試：包括端到端測試（E2E）、關鍵用戶體驗測試（CUJ）及壓力測試</li><li>部署：實施持續整合（CI）和持續開發（CD）</li><li>維護：進行回歸測試和性能監控。</li></ul><p>這些步驟確保軟體質量和穩定性，並持續改進產品。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/db34988fe80c49ae8b39fdee98cd8c89?slide=20" title="QA 蝦米 QA？我的扣超讚的啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>下一部份 YT 則分享撰寫測試案例（Test Case）也會有技術債。常見的測試案例包括確認頁面上有「LINE 購物」的 logo、搜尋框元素、相機 icon、購物車 icon，以及確認跳轉頁面成功和商店頁面上有「專屬推薦」。這些測試案例對應不同的 Epic，如首頁標題 Banner 等。為了減少技術債，可以舉辦 workshop，讓團隊一起儘早識別並解決這些問題，並且可以透過不同的 ML 模型來解決類似的問題。</p><blockquote><p>更多內容請見</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/AQX97stGDw0?si=1TfkOzpQ2WoOgVir" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="這就很玄囉-從粽子看開發的世界"><a href="#這就很玄囉-從粽子看開發的世界" class="headerlink" title="這就很玄囉! 從粽子看開發的世界"></a>這就很玄囉! 從粽子看開發的世界</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/677d8ea950c845cc9a542b70930bfa40?slide=19" title="這就很玄囉! 從粽子看開發的世界" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>Chris 的實習生活主要分為三個部分：</p><ul><li>後端開發（Backend Development）：佔 60%的時間，專注於後端系統的開發工作</li><li>持續整合&#x2F;持續部署流程（CI&#x2F;CD Process）：佔 30%的時間，Chris 參與並優化 CI&#x2F;CD 流程，確保產品持續整合和自動部署</li><li>技術研究（Tech Research）：佔 10%的時間，Chris 進行新技術的研究和 Research，保持對技術的熟悉度</li></ul><p>此外，Chris 還會參與各種分享會（Sharing）和保持工作與生活的平衡（WLB），這些活動有助於提升團隊合作能力以及生活品質</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/677d8ea950c845cc9a542b70930bfa40?slide=16" title="這就很玄囉! 從粽子看開發的世界" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>Young 分享了他在 LINE FACT CHECKER 系統架構、產品改進方法以及專案開發 CI&#x2F;CD 流程中的經驗，並從中學習到如何改進產品：</p><ul><li>彈性（Resiliency）：透過 Rolling Update、Retry Strategy 和錯誤處理（如 Timeout）來提高系統的穩定性。</li><li>效率（Efficiency）：採用 Concurrent Design、Cache strategy（如 Redis）和 Horizontal Scaling 來提升系統效能。</li></ul><p>當中也學到更多專案開發 CI&#x2F;CD 流程：</p><ul><li>推送程式碼 GitHub 之後，透過 GitHub Actions 進行 Test、分析（SonarQube）、程式碼審查和封裝，最終將 COntainer 推送至 Harbor。</li><li>基礎設施 Manifest 變更時會透過 Webhook 同步到 ArgoCD，並部署到開發環境集群和產品環境的集群，最後透過 Grafana 進行監控。</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/AClk3Kp-z5U?si=wEQheEcLUVuxGSp5" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="從混亂到掌控：使用-Observability-揭開管家的神秘面紗"><a href="#從混亂到掌控：使用-Observability-揭開管家的神秘面紗" class="headerlink" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗"></a>從混亂到掌控：使用 Observability 揭開管家的神秘面紗</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d3101e26f074429b97c8da3be209743c?slide=10" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>首先 Tristan 帶來在學生時期很難學到的概念 - Observability，它是一個在軟體開發和運營中非常重要的概念。它指的是我們能夠深入了解和監控系統的內部運作，並從中獲取有價值的資訊和洞察力。透過實現可觀察性，我們可以更好地理解系統的行為、性能和問題，並能夠快速做出反應和解決。</p><p>在上面的程式碼中，提到了 Observability 的三大支柱：Metrics、Tracing 和 Logging。這些支柱提供了不同層面的資訊，幫助我們全面了解系統的運作狀態。</p><p>接著 Gary 分享<strong>高峰流量監控</strong>&amp;<strong>5 分鐘工作流程之謎</strong>的經驗談</p><h3 id="高峰流量監控"><a href="#高峰流量監控" class="headerlink" title="高峰流量監控"></a>高峰流量監控</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d3101e26f074429b97c8da3be209743c?slide=36" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>當數以萬計的用戶同時訪問系統時，伺服器會無法處理所有請求，為了避免用戶體驗不佳，團隊發現問題並調整 Server 的效能，提升系統在高峰期的穩定性和回應速度，改善用戶體驗</p><h3 id="5-分鐘工作流程之謎"><a href="#5-分鐘工作流程之謎" class="headerlink" title="5 分鐘工作流程之謎"></a>5 分鐘工作流程之謎</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d3101e26f074429b97c8da3be209743c?slide=41" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>每天執行多個工作流程以撈取用戶發票，發現許多工作流程需要超過 5 分鐘才能完成。團隊確定延遲原因並優化工作流程效能，顯著減少處理時間，提升系統效率。</p><p>這些案例展示了在高流量和複雜工作流程中，觀察性（Observability）如何幫助識別和解決系統問題，最終提升系統性能和用戶體驗。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/g7v_p3n_1Lw?si=m0j_2tkUKEf2Qmro" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="Lightning-Talk"><a href="#Lightning-Talk" class="headerlink" title="Lightning Talk"></a>Lightning Talk</h2><h3 id="你在-DevOps-什麼啦，我要趕快上線！"><a href="#你在-DevOps-什麼啦，我要趕快上線！" class="headerlink" title="你在 DevOps 什麼啦，我要趕快上線！"></a>你在 DevOps 什麼啦，我要趕快上線！</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/3c97c61de16647b388707b415027847c?slide=9" title="你在 DevOps 什麼啦，我要趕快上線！" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>Calista &amp; Ryan 分別透過自身的經驗，分享從學校到團隊中，DevOps 中間扮演的角色是多麽至關重要，以及為何要帶入這麼多的工具，持續讓專案可以在自動化的世界裡運行，並且確保產品的穩定性</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Bogq44fRQn4?si=8L6iQ_IgiSWPq_6B" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h3 id="寫出不管地震怎麼搖網站都不會壞的前端測試"><a href="#寫出不管地震怎麼搖網站都不會壞的前端測試" class="headerlink" title="寫出不管地震怎麼搖網站都不會壞的前端測試"></a>寫出不管地震怎麼搖網站都不會壞的前端測試</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/35af65b1313c40f3a1a8ca5afc2f9a55?slide=13" title="寫出不管地震怎麼搖網站都不會壞的前端測試" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>YU 作為前端實習生，在這次的分享中以前端為主軸，帶大家了解前端測試在其中扮演的重要性，開發過程中雖然功能很重要，但其實測試可以確保在 golden path 中的穩定性，並且讓用戶可以對產品有更多的信心去使用，而不會產品用到一半就莫名其妙壞掉</p><iframe width="560" height="315" src="https://www.youtube.com/embed/GH2yNgvOPCs?si=gI4ex1q2iAWppFcb" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h3 id="一起來跑-TDD，直到完成-User-Story-為止"><a href="#一起來跑-TDD，直到完成-User-Story-為止" class="headerlink" title="一起來跑 TDD，直到完成 User Story 為止"></a>一起來跑 TDD，直到完成 User Story 為止</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/824a73a6967343ecb95603933db8b1fa?slide=16" title="一起來跑 TDD，直到完成 User Story 為止" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>最後 Brandon 帶大家了解 TDD (Test-Driven Development)精神，TDD 強調在開發功能之前先撰寫測試，TDD 的主要目的是透過事前規劃的測試來提升程式碼質量和可測試性，並讓開發者對交付和重構更有信心。這一流程促使開發者在撰寫程式前可以更深入思考，從而讓程式碼品質更好</p><p>接著帶到 ATDD (Acceptance Test-Driven Development)，畢竟產品還是需要面對終端用戶，ATDD 是透過和 stakeholder 共同定義接受的測試範圍來確保需求被正確理解和實現。這一方法可以降低開發團隊與 stakeholder 之間的溝通成本，並確保最終產品符合用戶需求。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/VsHJr42VcHY?si=rr3hdPn_AtP8NtkJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p><img src="https://vos.line-scdn.net/landpress-content-v2-vcfc68aynwenkh3bno0ixfx8/1719475595313.JPG?updatedAt=1719475596000"></p><p>給即將從 LINE 畢業的同學，感謝你們在這段時間內的努力和貢獻！有你們的付出，LINE 才能持續在軟體生態中繼續發揚光大，不論未來如何，希望在這邊的所學能幫助各位在未來的職涯上更加順遂，希望你們能夠繼續保持對技術的熱情和追求卓越的態度，不斷學習和成長！</p><p>最後，衷心感謝當天參加活動的所有會眾 🫡 你們的參與和支持讓<strong>LINE TECH FRESH 畢業分享會</strong>更加成功和有意義。感謝你們的熱情參與和寶貴的意見分享。期待未來能夠再次在 LINE 相見，一起探討和分享軟體領域的知識和經驗！</p><h2 id="看到文末，若還不知道-LINE-TECH-FRESH…"><a href="#看到文末，若還不知道-LINE-TECH-FRESH…" class="headerlink" title="看到文末，若還不知道 LINE TECH FRESH…"></a>看到文末，若還不知道 LINE TECH FRESH…</h2><p>LINE TECH FRESH 是一個一年一約的技術實習計畫。這個計畫目標是培養出具有<strong>創新思維</strong>和<strong>解決問題能力</strong>的軟體工程師，有機會在 LINE 中獲得實際的工作經驗和專業知識，並與 LINE 的工程師團隊合作。這個計畫不僅僅是一個實習機會，還提供了專業的指導和培訓，幫助同學發展專業技能並能有個良好的軟體生涯起點。</p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://vos.line-scdn.net/landpress-content-v2-vcfc68aynwenkh3bno0ixfx8/1719472774665.png?updatedAt=1719472776000&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家好，我們是 LINE Developer Relations 團隊，不曉得大家從 LINE TECH FRESH 畢業分享會中是否有獲得哪些有趣的收穫呢？從 &lt;a href=&quot;https://techblog.lycorp.co.jp/zh-hant/line-tech-fresh-graduation-2024&quot;&gt;Save your time - TECH FRESH 畢業分享會 2024 @ LINE&lt;/a&gt;活動當中有許多介紹，以下就帶大家回味一下當天的內容囉！&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="TECH FRESH" scheme="https://nijialin.com/tags/TECH-FRESH/"/>
    
    <category term="Internship" scheme="https://nijialin.com/tags/Internship/"/>
    
  </entry>
  
  <entry>
    <title>Save your time - TECH FRESH 畢業分享會 2024 @ LINE</title>
    <link href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/"/>
    <id>https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/</id>
    <published>2024-05-20T11:19:07.000Z</published>
    <updated>2025-07-03T03:46:50.024Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://vos.line-scdn.net/landpress-content-v2_1761/1689497803877.png?updatedAt=1689497805000"></p><ul><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E4%BB%8B%E7%B4%B9">活動介紹</a><ul><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E8%B3%87%E8%A8%8A">活動資訊</a></li></ul></li><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E6%AD%B7%E5%8F%B2%E5%85%B8%E6%95%85">活動歷史典故</a></li><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E6%B5%81%E7%A8%8B">活動流程</a></li><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E7%B5%90%E8%AB%96">結論</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好！我們是 LINE Developer Relations 團隊，很高興向大家介紹一個特別的活動——<strong>2024 年 6 月 18 日</strong>舉行的 <strong>TECH FRESH 畢業分享會</strong>。去年我們首次開放對外的分享會，現場引起了取多迴響，我們在這個活動上學到了很多，因此希望透過今年的舉辦，能與更多同學分享我們 LINE TECH FRESH 的成長和收穫。</p><span id="more"></span><h1 id="活動介紹"><a href="#活動介紹" class="headerlink" title="活動介紹"></a>活動介紹</h1><p>在這個分享會中，我們的實習生將站上舞台，分享他們在 LINE 的點滴和成就，不僅能聽到第一手的實習經驗，還能深入了解 LINE 的工作環境與文化。無論你是對軟體生態充滿熱情的學生，還是正在尋找職業發展方向的求職者，我們都誠摯地邀請你來參加這場盛會。讓我們一起在這個活動中學習、交流、成長，為未來創造更多可能。</p><h2 id="活動資訊"><a href="#活動資訊" class="headerlink" title="活動資訊"></a>活動資訊</h2><p>活動：LINE TECH FRESH 畢業分享會<br>時間：<code>2024/06/18 18:00~21:30</code> (17:40 開放入場)<br>地點：LINE 台灣總部<br>報名：<a href="https://lin.ee/GqZLv2m/yltz">https://lin.ee/GqZLv2m/yltz</a></p><h1 id="活動歷史典故"><a href="#活動歷史典故" class="headerlink" title="活動歷史典故"></a>活動歷史典故</h1><p>去年首次對外公開，小小的空間(圖片)，現場人數也來到近百人，有許多同學來了解 LINE TECH FRESH 在軟體領域的耕耘成果，沒參加過的同學可能會很好奇，那畢業分享會到底在做什麼？以下概略地跟讀者介紹，並且可以搭配下文的<code>活動流程</code>搭配使用喔！</p><p>在 2023 年之前，TECH FRESH 會在畢業前夕，與 LINE 內部所有同仁分享整年的戰果，而 Mentor 也會在其中鼓勵同學並且提點未來軟體道路的一些眉眉角角。 (參考以下文)</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2022-graduation">【TECH FRESH 畢業分享會】原來實習有這些眉角？</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2021-gradute">【LINE TECH FRESH】2021 屆畢業囉！這一年來又有什麼新鮮事呢？</a></li></ul><p><img src="https://vos.line-scdn.net/landpress-content-v2_1761/1689498034174.jpg?updatedAt=1689498035000"></p><p>而在同學的內容整理當中，我們發現大家的內容都相當有料，思考著如何讓更多人瞭解 TECH FRESH 整年的實習過程究竟對職涯多有幫助，因此在去年我們決定對外展開。現場效果非常棒，將近有** 80 位來自不同學校的同學**參加，並且現場許多同學就直接交流起來，了解 TECH FRESH 們在當時考慮實習的顧慮點，以及後續的規劃，相信這會是一場讓參加的同學們收穫滿滿的活動！</p><p>今年我們一樣邀請應屆畢業生，與大家分享更不同層面的內容，詳細內容跟我們一起參考以下內容：</p><h1 id="活動流程"><a href="#活動流程" class="headerlink" title="活動流程"></a>活動流程</h1><p>這次的活動將會有以下幾個部分：</p><ul><li>Keynote：由 TECH FRESH people manager - Evan 為大家分享東西</li><li>實習生分享：我們有四組實習生將會上台分享他們在 LINE 的實習經驗，包括他們的學習過程，以及他們如何將學術理論應用到實際工作中。</li><li>Lightning Talk：我們還有四位現役 TECH FRESH 將進行快速的演講，分享他們在 LINE 的工作和學習經驗。</li><li>訪談環節：我們將進行一場訪談，邀請曾為 TECH FRESH 的學長姐，讓你更深入地了解我們的實習生們的經驗和感想。</li></ul><blockquote><p>活動僅開放給學生身分參加(現場審核)，同時現場將提供餐飲及小點心，因此歡迎各大專院校同學共襄盛舉 LINE TECH FRESH 畢業分享會！</p></blockquote><ul><li>18:00~18:05 開場</li><li>18:05~18:20 <strong>從實習到專家：LINE TECH FRESH 的成長軌跡</strong> Evan Lin</li><li>18:20~18:40 <strong>蔡 EC：24 歲開發一次成功</strong> Chiu Winnie, Yang Lauren</li><li>18:40~19:00 <strong>QA 蝦米 QA？我的扣超讚的啊</strong> Chen YT, Tsai Lawrence</li><li>19:00~19:20 <strong>這就很玄囉 從粽子看開發的世界</strong> Shin Chris, Chang Young</li><li>19:20~19:40 <strong>從混亂到掌控：使用 Observability 揭開管家的神秘面紗</strong> Wu Tristan, Hu Gary</li><li>19:40~20:00 攤位時間 (EC, Content, Central)</li><li>20:00~20:40 Lightning Talk<ul><li><strong>你在 DevOps 什麼啦，我要趕快上線！</strong> Wu Calista, Lee Ryan</li><li><strong>寫出不管地震怎麼搖，都能確保網站都不會壞的前端測試</strong>  Chen Yu</li><li><strong>一起來跑 TDD，直到完成 User Story 為止</strong> Lu Brandon</li></ul></li><li>20:40 ~ 20:50 大合照 @ 2F &amp; Ending</li><li>20:50 ~ 21:00 Q&amp;A 自由活動空間</li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這麼精彩內容如果錯過就要再等一年囉！趕快按下報名👉<a href="https://lin.ee/GqZLv2m/yltz">https://lin.ee/GqZLv2m/yltz</a>，並邀請週遭同學們一起來參加！更多 TECH FRESH 內容請參考以下清單，那我們就 2024&#x2F;06&#x2F;18 見啦！</p><ol><li><a href="https://techblog.lycorp.co.jp/zh-hant/techfresh-2024">LINE 實習筆記：TECH FRESH 的軟體探險之旅</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/line-tech-fresh-2024-summer">LINE TECH FRESH 2024 Summer Class 招募相關說明 (時程, 職缺)</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/frontend-try-exception-sitcon-2024">沒想過的前端錯誤處理 可能比你有做的還多 @ SITCON 2024</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/kubernetes-config-Secret-testing-with-twokey-testing-principles">LINE 旅遊 - How We Conduct Automated Kubernetes Config and Secret Testing with Two Key Testing Principles</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/From-Classroom-to-Data-Team-My-Journey-at-LINE">From Classroom to Data Team: My Journey @ LINE</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/beyond-development-as-a-tech-fresh">Beyond Development: Exploring the Multifaceted World of Engineering at LINE as a TECH FRESH</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/from-video-creator-to-qa-internship">關於我從拍片仔轉職 QA 的那件事</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/implementation-myself-by-different-department">非本科，又如何？ — 論非本科的自我實踐之路</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/embarking-on-a-machine-learning-internship-nycu-csie-visit">進擊的後端: Chris 實習經驗分享 @ 台大_輔大_北醫 GDSC 企業參訪</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/utopian-journey-my-ideal-internship-experience-at-line">Utopian Journey – My Ideal Internship Experience at LINE (臺師大企業參訪演講)</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/from-heart-to-software-engineering-intern">從心開始的純軟之路 – 一次解答非本科走進軟體業的迷思 @ 臺師大企業參訪</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/ncku-line-visit-2023">實習經驗分享 @ 成功大學企業參訪</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2022-graduation">【TECH FRESH 畢業分享會】原來實習有這些眉角？</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/nccu-gdsc-visit-line-2023/">政治大學 GDSC 校園參訪 - 資料工程 &amp; LINE TRAVEL工程團隊介紹</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/nycu-visit-line-202304/">陽明交大資工系-企業參訪：資料 &amp; 前端工程團隊介紹</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-internship-erin/">LINE 實習大小事</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/Tackle-the-infodemic-of-misinformation-from-LINE/">Tackle the infodemic of misinformation from LINE</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/tmp-visit-line-2023/">臺北醫學大學企業參訪 - Unleashing the Power of NLP : Innovations from LINE Data Dev</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2023-spring/">加入 LINE TECH FRESH，開啟你的職場新鮮人生！@ Vision 臺大校園徵才</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/tech-fresh-sharing-at-APCS">APCS 企業參訪 - What is it like to be a LINE TECH FRESH</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-interview-2022">LINE TECH FRESH 2022 面試分享</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/from-line-tech-fresh-to-liner">LINE TECH FRESH: 從實習到成為正職的經歷</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2020-graduate/">TECH FRESH 實習的一年間，除了開發還有什麼內部活動呢？</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/what-is-tech-fresh-interview/">【訪談】TECH FRESH 工作老實說 – 後續花絮與相關資訊整理</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/life-in-line-tech-fresh-sharing/">Life in LINE – 直擊 TECH FRESH 實習內容！</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/techpulse-2020-tech-fresh-session/">TECHPULSE 2020 青春主場 – TECH FRESH 議程與攤位介紹</a></li></ol><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://vos.line-scdn.net/landpress-content-v2_1761/1689497803877.png?updatedAt=1689497805000&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E5%89%8D%E8%A8%80&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E4%BB%8B%E7%B4%B9&quot;&gt;活動介紹&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E8%B3%87%E8%A8%8A&quot;&gt;活動資訊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E6%AD%B7%E5%8F%B2%E5%85%B8%E6%95%85&quot;&gt;活動歷史典故&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E6%B5%81%E7%A8%8B&quot;&gt;活動流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E7%B5%90%E8%AB%96&quot;&gt;結論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家好！我們是 LINE Developer Relations 團隊，很高興向大家介紹一個特別的活動——&lt;strong&gt;2024 年 6 月 18 日&lt;/strong&gt;舉行的 &lt;strong&gt;TECH FRESH 畢業分享會&lt;/strong&gt;。去年我們首次開放對外的分享會，現場引起了取多迴響，我們在這個活動上學到了很多，因此希望透過今年的舉辦，能與更多同學分享我們 LINE TECH FRESH 的成長和收穫。&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="TECH FRESH" scheme="https://nijialin.com/tags/TECH-FRESH/"/>
    
    <category term="Hiring" scheme="https://nijialin.com/tags/Hiring/"/>
    
  </entry>
  
  <entry>
    <title>在 Cloud Functions 上部署有 Open Data 功能的 LINE Bot | 摘要王, 天氣, 紅外線</title>
    <link href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/"/>
    <id>https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/</id>
    <published>2024-05-03T12:50:07.000Z</published>
    <updated>2025-07-03T03:46:50.022Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><ul><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#line-bot--gemini-pro-%E8%A8%AD%E5%AE%9A%E7%B4%B0%E7%AF%80%E8%AB%8B%E5%8F%83%E8%80%83-%E6%97%85%E8%A1%8C%E5%B0%8F%E5%B9%AB%E6%89%8B-line-bot-%E6%96%87%E7%AB%A0">LINE Bot &amp; Gemini Pro 設定細節請參考: 旅行小幫手 LINE Bot 文章</a><ul><li><a href="#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99">事前準備</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E9%97%9C%E6%96%BC-gemini-api-price">關於 Gemini API Price</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E6%B5%81%E7%A8%8B%E5%9C%96">流程圖</a></li></ul></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E4%BB%8B%E7%B4%B9">介紹</a><ul><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E8%A9%A6%E9%A1%8C%E7%AF%84%E4%BE%8B%E7%82%BA%E5%88%97%E5%87%BA%E4%BA%94%E5%80%8B%E9%A0%85%E7%9B%AE%E4%BF%AE%E6%94%B9-prompt-%E6%89%BE%E5%87%BA%E7%BE%A4%E7%B5%84%E7%9A%84%E5%A4%A7%E5%AE%B6%E6%9C%80%E8%BF%91%E9%97%9C%E6%B3%A8%E7%9A%84%E4%BA%8B%E9%A0%85">試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項</a></li></ul></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E5%A2%9E%E5%8A%A0%E5%A4%A9%E6%B0%A3-open-data-%E5%8A%9F%E8%83%BD">增加天氣 Open Data 功能</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E8%A1%9B%E6%98%9F%E9%9B%B2%E5%9C%96---%E6%98%AF%E5%90%A6%E6%9C%89%E9%9B%B2%E5%B1%A4">衛星雲圖 - 是否有雲層</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E6%B4%BB%E5%8B%95%E5%B0%8F%E7%B5%90">活動小結</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此篇文章為延續與政治大學 &amp; 臺北大學 GDSC 工作坊的文章，如果對於整合 LINE 官方帳號的相關資訊，可以參考本篇喔！</p><span id="more"></span><ul><li><a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">[BwAI workshop][Golang] LINE OA + CloudFunction + GeminiPro + Firebase &#x3D; 旅行小幫手 LINE 聊天機器人(1)： 景色辨識小幫手</a></li><li><a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop2/">[BwAI workshop][Golang] LINE OA + CloudFunction + GeminiPro + Firebase &#x3D; 旅行小幫手 LINE 聊天機器人(2)： Firebase Database 讓 LINEBot 有個超長記憶</a></li><li><a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop3/">[BwAI workshop][Golang] LINE OA + CloudFunction + GeminiPro + Firebase &#x3D; 旅行小幫手 LINE 聊天機器人(3)： 導入「名片小幫手」跟「收據小幫手」</a></li></ul><h1 id="LINE-Bot-amp-Gemini-Pro-設定細節請參考-旅行小幫手-LINE-Bot-文章"><a href="#LINE-Bot-amp-Gemini-Pro-設定細節請參考-旅行小幫手-LINE-Bot-文章" class="headerlink" title="LINE Bot &amp; Gemini Pro 設定細節請參考: 旅行小幫手 LINE Bot 文章"></a>LINE Bot &amp; Gemini Pro 設定細節請參考: <a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">旅行小幫手 LINE Bot 文章</a></h1><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p><img src="https://nijialin.com/images/2024/gemini-workshop/image-20240410165104899.png"></p><ul><li><a href="https://developers.line.biz/en/">LINE Developer Account</a>: 你只需要有 LINE 帳號就可以申請開發者帳號</li><li><a href="https://cloud.google.com/run?hl=zh-TW">Google Cloud Run</a>： Python 程式碼的部署平台，生成供 LINE Bot 使用的 webhook URL</li><li><a href="https://firebase.google.com/">Firebase</a>：建立 Realtime database，LINE Bot 可以記得你之前的對話，甚至可以回答許多有趣的問題</li><li><a href="https://aistudio.google.com/app/prompts/new_chat">Google AI Studio</a>: 可以透過這裡取得 Gemini Key</li><li>GitHub: Clone 專案部署的地方 - <a href="https://github.com/louis70109/linebot-summarize-cloud-functions-gemini">linebot-gemini-summarize</a></li></ul><h2 id="關於-Gemini-API-Price"><a href="#關於-Gemini-API-Price" class="headerlink" title="關於 Gemini API Price"></a>關於 Gemini API Price</h2><p>根據官方網站： <a href="https://ai.google.dev/pricing?hl=zh-tw">https://ai.google.dev/pricing?hl=zh-tw</a></p><p><img src="https://nijialin.com/images/2024/gemini-workshop/image-20240412195805278.png"></p><blockquote><p>細節請參考: <a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">旅行小幫手 LINE Bot 文章</a></p></blockquote><h2 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> ┌─┐</span><br><span class="line"> ║<span class="string">&quot;│</span></span><br><span class="line"> └┬┘</span><br><span class="line"> ┌┼┐</span><br><span class="line">  │            ┌─────┐          ┌──────────────┐               ┌────────┐          ┌──────┐</span><br><span class="line"> ┌┴┐           │Group│          │Webhook_Server│               │Firebase│          │Gemini│</span><br><span class="line">User           └─────┘          └──────┬───────┘               └────────┘          └──────┘</span><br><span class="line"> │    傳送文章訊息  │                    │                           │                  │</span><br><span class="line"> │ ──────────────&gt;│                    │                           │                  │</span><br><span class="line"> │                │     傳送用戶指令     │                           │                  │</span><br><span class="line"> │                │───────────────────&gt;│                           │                  │</span><br><span class="line"> │                │                    │   儲存聊天狀態在 Realtime DB│                  │</span><br><span class="line"> │                │                    │ ────────────────────────&gt; <span class="string">|                 │</span></span><br><span class="line"> │                │                    │           儲存完畢         │                  │</span><br><span class="line"> │                │                    │ &lt;──────────────────────── <span class="string">|                  │</span></span><br><span class="line"> │                │    回傳已完成文字    │                           │                  │</span><br><span class="line"> │                │&lt;───────────────────│                           │                  │</span><br><span class="line"> │   輸入 <span class="string">&quot;!摘要&quot;</span>  │                    │                           │                  │</span><br><span class="line"> │ ──────────────&gt;│                    │                           │                  │</span><br><span class="line"> │                │     傳送用戶指令     │                           │                  │</span><br><span class="line"> │                │───────────────────&gt;│                           │                  │</span><br><span class="line"> │                │                    │          抓取聊天記錄       │                  │</span><br><span class="line"> │                │                    │ ────────────────────────&gt; <span class="string">|                  │</span></span><br><span class="line"> │                │                    │           回傳清單         │                  │</span><br><span class="line"> │                │                    │ &lt;─────────────────────────<span class="string">|                  │</span></span><br><span class="line"> │                │                    │               下prompt 進行摘要運算            │</span><br><span class="line"> │                │                    │ ────────────────────────────────────────────&gt;<span class="string">|</span></span><br><span class="line"> │                │                    │                   回傳摘要清單                 │</span><br><span class="line"> │                │                    │ &lt;────────────────────────────────────────────<span class="string">|</span></span><br><span class="line"> │                │   回傳摘要資訊至群組  │                           │                  │</span><br><span class="line"> │                │&lt;───────────────────│                           │                  │</span><br><span class="line">User           ┌─────┐          ┌──────┴───────┐               ┌────────┐          ┌──────┐</span><br><span class="line"> ┌─┐           │Group│          │Webhook_Server│               │Firebase│          │Gemini│</span><br><span class="line"> ║<span class="string">&quot;│           └─────┘          └──────────────┘               └────────┘          └──────┘</span></span><br><span class="line"> └┬┘</span><br><span class="line"> ┌┼┐</span><br><span class="line">  │</span><br><span class="line"> ┌┴┐</span><br></pre></td></tr></table></figure><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><ol><li>首先到 GitHub 上 <a href="https://github.com/louis70109/linebot-summarize-cloud-functions-gemini">linebot-summarize-cloud-functions-gemini</a></li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/1.png"></p><ol start="2"><li>將 Code 轉貼到 Cloud Functions 上的介面，這邊使用 1st Gen || 2nd Gen 都不影響，如果有舊的也可以複製一個 functions 出來<ol><li>Function name 小雷：如果先建立了一個 <code>function-1</code> 的，然後砍掉之後，再建立一個名字一樣 <code>function-1</code> 的，LINE bot 這邊會打不到新的 webhook</li></ol></li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/2.png"></p><ol start="3"><li>加入以下的環境變數，並放上對應的參數，如果有找不到的 Key，請參考過往的系列文<ol><li>需要注意：因為使用 Python 關係，且之後圖片判斷功能，因此 Memory 會需要設定 <code>1GB</code></li></ol></li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ChannelSecret</span><br><span class="line">ChannelAccessToken</span><br><span class="line">GOOGLE<span class="emphasis">_GEMINI_API_KEY</span></span><br><span class="line"><span class="emphasis">FIREBASE_</span>URL</span><br></pre></td></tr></table></figure><p><img src="https://nijialin.com/images/2024/gemini-workshop/3.png"></p><ol start="4"><li>來到 GitHub 專案 <a href="https://github.com/louis70109/linebot-summarize-cloud-functions-gemini">linebot-gemini-summarize</a> 的 main.py，點選畫面上的按鈕複製程式碼</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/4.png"></p><ol start="5"><li>轉貼到 Cloud Functions 上，需要注意的地方是，預設為 JavaScript，因此這邊要先選擇 <code>Python 3.11</code>，接著<strong>進入點</strong>需要換成 <code>linebot</code>，main.py 以及 requirements.txt 裡面的內容都需要置換，後續才能部署</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/5.png"></p><ol start="6"><li>在 build 的過程，找到觸發網址的地方，將他複製起來</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/6.png"></p><ol start="7"><li>複製到 LINE Developer Console 的 webhook 地方，不用加任何的 sub-path</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/7.png"></p><ol start="8"><li>接著可以來到<a href="https://today.line.me/tw/v3/tab"> LINE TODAY </a>當中，假設現在有個爬蟲想做，模擬抓下來的動作，選擇自己喜歡的分類貼上，測試一樣 Gemini Pro 是否有通</li></ol><h2 id="試題：範例為列出五個項目，修改-prompt-找出群組的大家最近關注的事項"><a href="#試題：範例為列出五個項目，修改-prompt-找出群組的大家最近關注的事項" class="headerlink" title="試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項"></a>試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項</h2><p>假設你是一位喜歡音樂的人，但今天想關注籃球圈的群組，你會怎麼請 AI Bot 幫忙呢？試試看把 prompt 改掉吧！</p><h1 id="增加天氣-Open-Data-功能"><a href="#增加天氣-Open-Data-功能" class="headerlink" title="增加天氣 Open Data 功能"></a>增加天氣 Open Data 功能</h1><blockquote><p>這部分範例參考 - <a href="https://nijialin.com/2024/04/30/line-bot-cloudfunction-firebase-gemini-workshop-weather/">在 Cloud Run 上部署有 Open Data 功能的 LINE Bot | 摘要王, 天氣, 紅外線</a> 文章上的內容</p></blockquote><p><a href="https://gist.github.com/louis70109/d165be10be06d71708804e89410c969e">範例 code 在此</a>，這邊需要準備的部分:</p><ul><li>要到中央氣象局申請 API Key (<code>需要註冊</code>且拿到<code>授權碼</code>)<ul><li>天氣 Open Data json 下載位置：<a href="https://opendata.cwa.gov.tw/dataset/forecast/F-A0010-001">https://opendata.cwa.gov.tw/dataset/forecast/F-A0010-001</a></li><li>API 位置：<a href="https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-C0032-001">https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-C0032-001</a></li></ul></li><li>requirements.txt 裡面的套件需要加入 requests</li><li>將 API Key 放入環境變數 <code>OPEN_API</code> 當中</li><li>將相關的 code 貼上</li><li>在 Chatbot 中加入判斷式測試</li><li>再次部署 Cloud Functions</li></ul><blockquote><p><a href="https://github.com/louis70109/skatepark-CCTV-line/blob/main/main.py#L113">參考作法</a></p></blockquote><script src="https://gist.github.com/louis70109/d165be10be06d71708804e89410c969e.js"></script><h1 id="衛星雲圖-是否有雲層"><a href="#衛星雲圖-是否有雲層" class="headerlink" title="衛星雲圖 - 是否有雲層"></a>衛星雲圖 - 是否有雲層</h1><p><img src="https://nijialin.com/images/2024/gemini-workshop/cloud-on-taiwan.png"></p><p>有時候光看氣象根本不準，外面雨到底要不要下呢？ 請 Gemini vision 來幫忙看看台灣上方是否有大量雲層經過</p><ul><li>先天限制：兩個小時內會有圖片，當前時間的前十分鐘不會有照片<ul><li>ex: 當前是 14:30，14:20~14:30 都不會有照片</li><li>可以試著用時間套件+判斷式來檢測</li></ul></li></ul><blockquote><p>參考以下 code，請在專案中的 chatbot 判斷式中加入程式 &amp;套件放入 <code>requirements.txt</code>:</p></blockquote><script src="https://gist.github.com/louis70109/696d064f3d40a676d6326e921c20843e.js"></script><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E5%89%8D%E8%A8%80&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#line-bot--gemini-pro-%E8%A8%AD%E5%AE%9A%E7%B4%B0%E7%AF%80%E8%AB%8B%E5%8F%83%E8%80%83-%E6%97%85%E8%A1%8C%E5%B0%8F%E5%B9%AB%E6%89%8B-line-bot-%E6%96%87%E7%AB%A0&quot;&gt;LINE Bot &amp;amp; Gemini Pro 設定細節請參考: 旅行小幫手 LINE Bot 文章&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99&quot;&gt;事前準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E9%97%9C%E6%96%BC-gemini-api-price&quot;&gt;關於 Gemini API Price&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E6%B5%81%E7%A8%8B%E5%9C%96&quot;&gt;流程圖&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E4%BB%8B%E7%B4%B9&quot;&gt;介紹&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E8%A9%A6%E9%A1%8C%E7%AF%84%E4%BE%8B%E7%82%BA%E5%88%97%E5%87%BA%E4%BA%94%E5%80%8B%E9%A0%85%E7%9B%AE%E4%BF%AE%E6%94%B9-prompt-%E6%89%BE%E5%87%BA%E7%BE%A4%E7%B5%84%E7%9A%84%E5%A4%A7%E5%AE%B6%E6%9C%80%E8%BF%91%E9%97%9C%E6%B3%A8%E7%9A%84%E4%BA%8B%E9%A0%85&quot;&gt;試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E5%A2%9E%E5%8A%A0%E5%A4%A9%E6%B0%A3-open-data-%E5%8A%9F%E8%83%BD&quot;&gt;增加天氣 Open Data 功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E8%A1%9B%E6%98%9F%E9%9B%B2%E5%9C%96---%E6%98%AF%E5%90%A6%E6%9C%89%E9%9B%B2%E5%B1%A4&quot;&gt;衛星雲圖 - 是否有雲層&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E6%B4%BB%E5%8B%95%E5%B0%8F%E7%B5%90&quot;&gt;活動小結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;此篇文章為延續與政治大學 &amp;amp; 臺北大學 GDSC 工作坊的文章，如果對於整合 LINE 官方帳號的相關資訊，可以參考本篇喔！&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Serverless" scheme="https://nijialin.com/tags/Serverless/"/>
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Cloud Function" scheme="https://nijialin.com/tags/Cloud-Function/"/>
    
  </entry>
  
  <entry>
    <title>在 Cloud Run 上部署有 Open Data 功能的 LINE Bot | 摘要王, 天氣, 紅外線</title>
    <link href="https://nijialin.com/2024/04/30/line-bot-cloudrun-firebase-gemini-workshop-weather/"/>
    <id>https://nijialin.com/2024/04/30/line-bot-cloudrun-firebase-gemini-workshop-weather/</id>
    <published>2024-04-30T18:13:37.000Z</published>
    <updated>2025-07-03T03:46:50.022Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此為 Cloud Run + Firebase + Gemini 工作坊中的操作文，如果有興趣針對有記憶能力的 LINE Bot 以及整合各方 Open Data 歡迎參考以下的內容</p><span id="more"></span><h1 id="LINE-Bot-amp-Gemini-Pro-設定細節請參考-旅行小幫手-LINE-Bot-文章"><a href="#LINE-Bot-amp-Gemini-Pro-設定細節請參考-旅行小幫手-LINE-Bot-文章" class="headerlink" title="LINE Bot &amp; Gemini Pro 設定細節請參考: 旅行小幫手 LINE Bot 文章"></a>LINE Bot &amp; Gemini Pro 設定細節請參考: <a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">旅行小幫手 LINE Bot 文章</a></h1><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p><img src="https://nijialin.com/images/2024/gemini-workshop/image-20240410165104899.png"></p><ul><li><a href="https://developers.line.biz/en/">LINE Developer Account</a>: 你只需要有 LINE 帳號就可以申請開發者帳號</li><li><a href="https://cloud.google.com/run?hl=zh-TW">Google Cloud Run</a>： Python 程式碼的部署平台，生成供 LINE Bot 使用的 webhook URL</li><li><a href="https://firebase.google.com/">Firebase</a>：建立 Realtime database，LINE Bot 可以記得你之前的對話，甚至可以回答許多有趣的問題</li><li><a href="https://aistudio.google.com/app/prompts/new_chat">Google AI Studio</a>: 可以透過這裡取得 Gemini Key</li><li>GitHub: Clone 專案部署的地方 - <a href="https://github.com/louis70109/linebot-gemini-summarize">linebot-gemini-summarize</a></li></ul><h2 id="關於-Gemini-API-Price"><a href="#關於-Gemini-API-Price" class="headerlink" title="關於 Gemini API Price"></a>關於 Gemini API Price</h2><p>根據官方網站： <a href="https://ai.google.dev/pricing?hl=zh-tw">https://ai.google.dev/pricing?hl=zh-tw</a></p><p><img src="https://nijialin.com/images/2024/gemini-workshop/image-20240412195805278.png"></p><blockquote><p>細節請參考: <a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">旅行小幫手 LINE Bot 文章</a></p></blockquote><h2 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> ┌─┐</span><br><span class="line"> ║<span class="string">&quot;│</span></span><br><span class="line"> └┬┘</span><br><span class="line"> ┌┼┐</span><br><span class="line">  │            ┌─────┐          ┌──────────────┐               ┌────────┐          ┌──────┐</span><br><span class="line"> ┌┴┐           │Group│          │Webhook_Server│               │Firebase│          │Gemini│</span><br><span class="line">User           └─────┘          └──────┬───────┘               └────────┘          └──────┘</span><br><span class="line"> │    傳送文章訊息  │                    │                           │                  │</span><br><span class="line"> │ ──────────────&gt;│                    │                           │                  │</span><br><span class="line"> │                │     傳送用戶指令     │                           │                  │</span><br><span class="line"> │                │───────────────────&gt;│                           │                  │</span><br><span class="line"> │                │                    │   儲存聊天狀態在 Realtime DB│                  │</span><br><span class="line"> │                │                    │ ────────────────────────&gt; <span class="string">|                 │</span></span><br><span class="line"> │                │                    │           儲存完畢         │                  │</span><br><span class="line"> │                │                    │ &lt;──────────────────────── <span class="string">|                  │</span></span><br><span class="line"> │                │    回傳已完成文字    │                           │                  │</span><br><span class="line"> │                │&lt;───────────────────│                           │                  │</span><br><span class="line"> │   輸入 <span class="string">&quot;!摘要&quot;</span>  │                    │                           │                  │</span><br><span class="line"> │ ──────────────&gt;│                    │                           │                  │</span><br><span class="line"> │                │     傳送用戶指令     │                           │                  │</span><br><span class="line"> │                │───────────────────&gt;│                           │                  │</span><br><span class="line"> │                │                    │          抓取聊天記錄       │                  │</span><br><span class="line"> │                │                    │ ────────────────────────&gt; <span class="string">|                  │</span></span><br><span class="line"> │                │                    │           回傳清單         │                  │</span><br><span class="line"> │                │                    │ &lt;─────────────────────────<span class="string">|                  │</span></span><br><span class="line"> │                │                    │               下prompt 進行摘要運算            │</span><br><span class="line"> │                │                    │ ────────────────────────────────────────────&gt;<span class="string">|</span></span><br><span class="line"> │                │                    │                   回傳摘要清單                 │</span><br><span class="line"> │                │                    │ &lt;────────────────────────────────────────────<span class="string">|</span></span><br><span class="line"> │                │   回傳摘要資訊至群組  │                           │                  │</span><br><span class="line"> │                │&lt;───────────────────│                           │                  │</span><br><span class="line">User           ┌─────┐          ┌──────┴───────┐               ┌────────┐          ┌──────┐</span><br><span class="line"> ┌─┐           │Group│          │Webhook_Server│               │Firebase│          │Gemini│</span><br><span class="line"> ║<span class="string">&quot;│           └─────┘          └──────────────┘               └────────┘          └──────┘</span></span><br><span class="line"> └┬┘</span><br><span class="line"> ┌┼┐</span><br><span class="line">  │</span><br><span class="line"> ┌┴┐</span><br></pre></td></tr></table></figure><h1 id="先部署-從-Cloud-Run-介面來連結-GitHub-持續部署"><a href="#先部署-從-Cloud-Run-介面來連結-GitHub-持續部署" class="headerlink" title="先部署 - 從 Cloud Run 介面來連結 GitHub 持續部署"></a>先部署 - 從 Cloud Run 介面來連結 GitHub 持續部署</h1><ol><li>首先先 fork 專案 - <a href="https://github.com/louis70109/linebot-gemini-summarize">linebot-gemini-summarize</a>，方便後續操作</li><li>接著到 <a href="https://console.cloud.google.com/run?referrer=search&hl=zh-tw">Cloud Run 首頁</a>，點選上方的<code>建立服務</code></li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/select.jpeg"></p><ol start="3"><li>選擇外部資源(GitHub)，從專案中來偵測部署，此步驟後續會連動 GitHub</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/detail.jpeg"></p><ol start="4"><li>此步驟需要確保<code>認證</code>以及<code>Ingress control</code> 的部分，因為從 LINE 伺服器打來的流量對 Google Cloud 來說都是外來的，因此需要確定選項</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/env_setting.png"></p><ol start="5"><li>在部署之前，需要先設定環境變數，避免後續部署失敗；把該放入的環境變數放入<ol><li>環境變數清單請看 <a href="https://github.com/louis70109/linebot-gemini-summarize/blob/main/.env.sample">GitHub URL</a></li><li>LINE bot &#x2F; GEMINI pro &#x2F; Firebase 的取得詳細請往前看 <code>事前準備</code></li><li>API_ENV 需要為 <code>production</code>，否則會找 .env 檔案位置</li></ol></li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/github_ci.jpeg"></p><ol start="6"><li>在部署的同時可以到 GitHub 專案上看看部署的連動狀態，如此一來只要 GitHub 專案只要有更改，就會自動部署過去 Cloud Run</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/complete.jpeg"></p><p>完成之後就可以在 Cloud Run 介面上看到 Container 建立完成也部署上去</p><h1 id="摘要王-v2"><a href="#摘要王-v2" class="headerlink" title="摘要王 v2"></a>摘要王 v2</h1><p>在 2022 年底，Evan 寫了一篇如何透過 ChatGPT + LINE Bot 的<a href="https://engineering.linecorp.com/zh-hant/blog/linebot-chatgpt">群組摘要王文章</a>，如今用 Gemini Pro 再做一次效果也會差不多，當時的作法是用 Golang 的 queue 方式去處理，以下介紹另一個作法 - 用 Firebase 當作對話 session 的儲存位置，實現記憶這件事</p><p><a href="https://line-tw-official.weblog.to/archives/25515573.html">2023&#x2F;11&#x2F;06 訊息摘要功能上線！用 AI 總結社群聊天室訊息！</a></p><p>這次做的摘要王主要用以下技術，設定細節請參考「<a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop2/">LINE OA + CloudFunction + GeminiPro + Firebase &#x3D; 旅行小幫手 LINE 聊天機器人(2)： Firebase Database 讓 LINEBot 有個超長記憶</a>」：</p><ul><li>Firebase<ul><li>儲存對話歷史</li></ul></li><li>Gemini Pro<ul><li>透過 Firebase 的歷史對話，協助判斷</li></ul></li><li>以下選填<ul><li>Cloud Run: 部署用</li><li>Python: 快速開發</li></ul></li></ul><p>接著建立一個群組，並將剛剛建立的官方帳號邀請進去，此步驟需要到 LINE Dev Console 設定，否則會邀請不進去。</p><p>邀請進去後，群組內從 <a href="https://today.line.me/tw/v3/tab">LINE TODAY</a> 中抓取新聞片段貼貼至群組中，接著打上 <code>!摘要</code> 讓 LINE Bot 幫你整理！</p><blockquote><p>摘要王 v2 - <a href="https://github.com/louis70109/linebot-gemini-summarize/blob/main/main.py#L115">Sample code</a><br>試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項</p></blockquote><h3 id="結果截圖"><a href="#結果截圖" class="headerlink" title="結果截圖"></a>結果截圖</h3><p><img src="https://nijialin.com/images/2024/gemini-workshop/result.jpg"></p><h1 id="整合天氣模組"><a href="#整合天氣模組" class="headerlink" title="整合天氣模組"></a>整合天氣模組</h1><ul><li>天氣 Open Data json 下載位置：<a href="https://opendata.cwa.gov.tw/dataset/forecast/F-A0010-001">https://opendata.cwa.gov.tw/dataset/forecast/F-A0010-001</a></li><li>API 位置：<a href="https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-C0032-001">https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-C0032-001</a></li><li><code>需要註冊</code>且拿到<code>授權碼</code></li></ul><blockquote><p>請在專案中的 chatbot 判斷式中加入程式 &amp; 套件放入 requirements.txt<br>抓取天氣 API 的 <a href="https://github.com/louis70109/skatepark-CCTV-line/blob/main/utils/weather.py#L7">Python code</a></p></blockquote><h2 id="衛星雲圖-是否有雲層"><a href="#衛星雲圖-是否有雲層" class="headerlink" title="衛星雲圖 - 是否有雲層"></a>衛星雲圖 - 是否有雲層</h2><p><img src="https://nijialin.com/images/2024/gemini-workshop/cloud-on-taiwan.png"></p><p>有時候光看氣象根本不準，外面雨到底要不要下呢？ 請 Gemini vision 來幫忙看看台灣上方是否有大量雲層經過</p><ul><li>先天限制：兩個小時內會有圖片，當前時間的前十分鐘不會有照片<ul><li>ex: 當前是 14:30，14:20~14:30 都不會有照片</li><li>可以試著用時間套件+判斷式來檢測</li></ul></li></ul><blockquote><p>參考以下 code，請在專案中的 chatbot 判斷式中加入程式 &amp;套件放入 <code>requirements.txt</code>:</p></blockquote><script src="https://gist.github.com/louis70109/696d064f3d40a676d6326e921c20843e.js"></script><h2 id="地板是否為濕的？-Extra，需要透過爬蟲抓取-CCTV-影像"><a href="#地板是否為濕的？-Extra，需要透過爬蟲抓取-CCTV-影像" class="headerlink" title="地板是否為濕的？ (Extra，需要透過爬蟲抓取 CCTV 影像)"></a>地板是否為濕的？ (Extra，需要透過爬蟲抓取 CCTV 影像)</h2><p>如果你有常常需要外出的活動(跑步、滑板、打球…etc)，在台北經常需要確認天氣，除了看中央氣象局，可以透過 Gemini Vision 當作 OCR 用，判斷地板是不是濕的</p><blockquote><p><a href="https://github.com/louis70109/skatepark-CCTV-line/blob/main/utils/common.py#L30">SkatePark code</a></p></blockquote><blockquote><p>以下的 code 的網址為範例，可以抓任何網址為 <code>.jpg</code> 結尾的丟進去試試看。<br>請在專案中的 chatbot 判斷式中加入程式 &amp; 套件放入 requirements.txt</p></blockquote><script src="https://gist.github.com/louis70109/1c8f104eae54a3bcb23aad2347211064.js"></script><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;此為 Cloud Run + Firebase + Gemini 工作坊中的操作文，如果有興趣針對有記憶能力的 LINE Bot 以及整合各方 Open Data 歡迎參考以下的內容&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
    <category term="Open Data" scheme="https://nijialin.com/tags/Open-Data/"/>
    
  </entry>
  
  <entry>
    <title>日常快捷鍵 &amp; 小工具分享 | 沉浸翻譯, 切割視窗</title>
    <link href="https://nijialin.com/2024/04/18/upgrade-your-working/"/>
    <id>https://nijialin.com/2024/04/18/upgrade-your-working/</id>
    <published>2024-04-18T11:58:23.000Z</published>
    <updated>2025-07-03T03:46:50.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作為一位需要在電腦前面待上 8 小時以上的現代人，很多時候都需要花很多時間消化日常的資訊，以下快速分享近期經常使用的快捷鍵跟小工具，加速我日常作業的時間，把時間花在其他更有興趣的地方～</p><span id="more"></span><h1 id="日常快捷鍵"><a href="#日常快捷鍵" class="headerlink" title="日常快捷鍵"></a>日常快捷鍵</h1><p>以下這幾個快捷鍵基本上在<code>網頁</code>&amp;<code>編輯器</code>通常都共用，記下來練習下有助於日常工作</p><ul><li><code>CMD+W</code>: 關閉當前視窗</li><li><code>CMD+T</code>: 開新分頁</li><li><code>CMD+K</code>: attach url</li><li><code>CMD+L</code>: 跳至網址列並全選，通常會搭配 CMD+C，也可搭配後文的 Manico</li><li><code>CMD+SHIFT+[</code>: 往左，<code>]</code> 往右</li><li><code>CMD+P</code>: 列印，office 也共用</li><li><code>CMD+Q</code>: 關閉當前應用程式，緊急用</li></ul><p>因為使用了 HHKB，其中他的 Control 的位置跟一般鍵盤比較不同，但因為工作需要拿著電腦到處跑，因此我也把 Mac 的 Control 改到 caps 位置，換語言轉用 <code>control+空白鍵</code>，如此一來就比較少在切換語系時轉不太過去，導致無意間惱怒 caps 的功能 🤣</p><blockquote><p><a href="https://nijialin.com/2022/08/20/why-you-need-hhkb/">【HHKB】為什麼要它？怎麼在二手市集挑？</a></p></blockquote><h1 id="利用-Edge-的分隔畫面"><a href="#利用-Edge-的分隔畫面" class="headerlink" title="利用 Edge 的分隔畫面"></a>利用 Edge 的分隔畫面</h1><p><img src="https://nijialin.com/images/2024/working/split.png"></p><p>很多時候需要比對文件、翻譯結果、Code Review…etc，都需要切割視窗來輔助，這時候就可以直接用 Edge 內建的功能使用，方便又快速</p><h1 id="Manico-設定自己的快捷建"><a href="#Manico-設定自己的快捷建" class="headerlink" title="Manico - 設定自己的快捷建"></a><a href="https://apps.apple.com/tw/app/manico/id724472954?mt=12">Manico</a> - 設定自己的快捷建</h1><p><a href="https://apps.apple.com/tw/app/manico/id724472954?mt=12">Manico</a> 是一個 MacOS 的工具，專門來制定客製化的快捷鍵，像我都習慣使用左邊鍵盤的組合鍵來搭配，也配合 CMD+C CMD+V 這樣的手法用，這樣找個操作直覺比較一致</p><h1 id="沉浸翻譯-Chrome-套件"><a href="#沉浸翻譯-Chrome-套件" class="headerlink" title="沉浸翻譯 - Chrome 套件"></a><a href="https://chromewebstore.google.com/detail/%E6%B2%88%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AD%AF-%E7%B6%B2%E9%A0%81%E7%BF%BB%E8%AD%AF%E6%93%B4%E5%85%85-pdf%E7%BF%BB%E8%AD%AF-%E5%85%8D%E8%B2%BB/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-TW">沉浸翻譯</a> - Chrome 套件</h1><p><img src="https://nijialin.com/images/2024/working/translate.png"></p><p>不論是專案管理或擔任工程師，經常都需要看各種英文文件，或是各國語系的東西，過去都需要費工複製起來貼在 Google 翻譯，這時候可以使用 Chrome 套件 - <a href="https://chromewebstore.google.com/detail/%E6%B2%88%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AD%AF-%E7%B6%B2%E9%A0%81%E7%BF%BB%E8%AD%AF%E6%93%B4%E5%85%85-pdf%E7%BF%BB%E8%AD%AF-%E5%85%8D%E8%B2%BB/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-TW">沉浸翻譯</a> 來把頁面上的內容全部翻譯，不論現在是什麼語系都可以快速翻譯，幫助日常作業可以更快理解裡面內容，當然若想要翻譯更精準，裡面也可以放入各家 AI 或企業版的功能喔！</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作為一位需要在電腦前面待上 8 小時以上的現代人，很多時候都需要花很多時間消化日常的資訊，以下快速分享近期經常使用的快捷鍵跟小工具，加速我日常作業的時間，把時間花在其他更有興趣的地方～&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="Manico" scheme="https://nijialin.com/tags/Manico/"/>
    
    <category term="Chrome" scheme="https://nijialin.com/tags/Chrome/"/>
    
    <category term="翻譯" scheme="https://nijialin.com/tags/%E7%BF%BB%E8%AD%AF/"/>
    
  </entry>
  
  <entry>
    <title>幫 LINE Bot 加點回覆動畫魔法：Loading Animation 功能解析</title>
    <link href="https://nijialin.com/2024/04/18/line-bot-loading-animation-python/"/>
    <id>https://nijialin.com/2024/04/18/line-bot-loading-animation-python/</id>
    <published>2024-04-18T11:32:12.000Z</published>
    <updated>2025-07-03T03:46:50.022Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://developers.line.biz/assets/img/loading-animation.7aad3d6c.gif"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好！今天我們要聊聊 LINE Bot 最近更新的一個超酷炫的功能——Loading Animation。對於那些經常與 LINE 官方帳號互動的朋友來說，這一定是個期待已久的更新！</p><p>想象一下，當你向一個 LINE Bot 發送訊息，等待回應的時候，畫面上出現一個動畫效果，在視覺上告訴用戶 “訊息處理中，請稍等片刻”，是不是感覺整個用戶體驗都提升了呢？接下來來仔細看看這個功能的細節和如何實現它。</p><span id="more"></span><h1 id="為什麼需要-Loading-Animation？"><a href="#為什麼需要-Loading-Animation？" class="headerlink" title="為什麼需要 Loading Animation？"></a>為什麼需要 Loading Animation？</h1><p>在過去，當用戶向 LINE Bot 發送訊息後，可能需要等待一段時間才能收到回應。這段等待時間可能是因為後端正在處理複雜的查詢(或是搭配各種生成式 AI)。在這個等待過程中，用戶端缺乏足夠的回饋，可能會讓人感到焦慮或不確定是否需要重新發送訊息。</p><p>有了 Loading Animation，我們可以在這個等待時間內給用戶一個明確的視覺回饋，讓他們知道系統正在處理中，增強用戶等待時的體驗。</p><h1 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h1><p>根據<a href="https://developers.line.biz/en/news/2024/04/17/loading-indicator/">2024 年 4 月 17 日發布的新聞</a>，Messaging API 新增了一個 endpoint，允許開發者在用戶與 LINE 官方帳號互動時顯示 Loading Animation。這個動畫會在<strong>指定的秒數</strong>後自動消失，或者當你的 LINE 官方帳號<strong>發送了一則新訊息時消失</strong>。</p><blockquote><p>要使用這個功能，你需要確保用戶的 LINE 版本至少為 iOS 或 Android 的 13.16.0 版或更高版本。</p></blockquote><h1 id="如何實現？"><a href="#如何實現？" class="headerlink" title="如何實現？"></a>如何實現？</h1><p>我們來看一個簡單的 Python 範例，展示如何在你的 LINE Bot 中實現這個功能。首先，確保你已經安裝了 LINE Messaging API 的 Python SDK，然後按照以下步驟操作：</p><ul><li>引入所需的模組和設定 LINE Bot 的 Access Token</li><li>建立一個 AsyncApiClient 以及 AsyncMessagingApi 的實例<ul><li>此為選項，依照使用 Python 框架調整</li></ul></li><li>使用 show_loading_animation 方法來顯示 loading animation，並指定要顯示的秒數</li></ul><blockquote><p>參考官方的文件：<a href="https://github.com/line/line-bot-sdk-python/pull/622/files#diff-05cb5d307ecf35c70df85c3f7252bd9c90f6ec2155b743b26d7e4e4be019ed86">GitHub URL</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> linebot.v3.messaging <span class="keyword">import</span> ShowLoadingAnimationRequest</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">configuration = Configuration(</span><br><span class="line">    access_token=channel_access_token</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">async_api_client = AsyncApiClient(configuration)</span><br><span class="line">line_bot_api = AsyncMessagingApi(async_api_client)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> line_bot_api.show_loading_animation(ShowLoadingAnimationRequest(chatId=event.source.user_id, loadingSeconds=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>這個 Python 範例假設你已經有一個處理 LINE 訊息的程式，當 LINE Bot 接收到 webhook 訊息時，它會向用戶顯示一個持續 5 秒的 loading animation，<code>chatId</code> 則使用 <code>user_id</code> 為主。</p><blockquote><p>Loading 秒數需為 5 的倍數，目前最多 60 秒，預設為 20 秒 (<a href="https://developers.line.biz/en/reference/messaging-api/#display-a-loading-indicator-request-body">參考文件</a>)</p></blockquote><p>是不是很簡單呢？這個功能不僅可以提升用戶體驗，讓用戶在等待過程中感到更加舒適，也為你的 LINE Bot 增添了一點互動的趣味性。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>想了解更多細節，別忘了查看<a href="https://developers.line.biz/en/reference/messaging-api/#display-a-loading-indicator">官方文檔</a>和<a href="https://github.com/line/line-bot-sdk-python/releases/tag/3.11.0">官方 SDK 的 release note</a>。這次的更新真的很酷，我們非常期待看到大家如何在自己的 LINE Bot 中利用這個新功能來創造出更棒的用戶體驗！</p><p>就這樣，希望這篇文章能夠幫助大家更好地理解和使用 LINE Bot 的 Loading Animation 功能！</p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新訊息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://developers.line.biz/assets/img/loading-animation.7aad3d6c.gif&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家好！今天我們要聊聊 LINE Bot 最近更新的一個超酷炫的功能——Loading Animation。對於那些經常與 LINE 官方帳號互動的朋友來說，這一定是個期待已久的更新！&lt;/p&gt;
&lt;p&gt;想象一下，當你向一個 LINE Bot 發送訊息，等待回應的時候，畫面上出現一個動畫效果，在視覺上告訴用戶 “訊息處理中，請稍等片刻”，是不是感覺整個用戶體驗都提升了呢？接下來來仔細看看這個功能的細節和如何實現它。&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="Animation" scheme="https://nijialin.com/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>處理 Cloud Run 上的 Error loading ASGI app. Could not import module &quot;main&quot;.</title>
    <link href="https://nijialin.com/2024/04/07/handle-cloud-run-traffic-docker-container/"/>
    <id>https://nijialin.com/2024/04/07/handle-cloud-run-traffic-docker-container/</id>
    <published>2024-04-07T14:25:38.000Z</published>
    <updated>2025-07-03T03:46:50.020Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這兩天在寫之後工作坊需要用到的範例 <a href="https://github.com/louis70109/linebot-gemini-summarize">linebot-gemini-summarize</a>，結果遇到部屬上去有問題，以下快速筆記這次遇到的一些蠢事，往後需要更細心點才行🤣</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p><img src="https://nijialin.com/images/2024/cloudrun-traffic/log.png"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ ✖ ] Failed deploying the application to Cloud Run.</span><br><span class="line"><span class="keyword">Error: </span>reason=HealthCheckContainerError message=Revision &#x27;linebot-gemini-summarize<span class="string">-00003</span>-pmn&#x27; is not ready and cannot serve traffic. The user-provided container failed to start and listen on the port defined provided by the PORT=8080 environment variable. Logs for this revision might contain more information.</span><br></pre></td></tr></table></figure><ol><li>看到 cloud run log 上出現：<code>Error loading ASGI app. Could not import module &quot;main&quot;.</code><ol><li>檢查後發現自己 <a href="https://github.com/louis70109/linebot-gemini-summarize/blob/main/Dockerfile#L5">linebot-gemini-summarize</a> 的 Dockerfile 少了 WORKDIR</li></ol></li><li>後來加上去後還是出了一樣問題，log上寫沒有 LINE_CHANNEL_ACCESS_TOKEN 環境變數<ol><li>這邊可以用 app.json 去處理部屬上的問題</li></ol></li></ol><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>按照記憶有幾個 side project 似乎有遇到這個問題，如果也有遇到部屬不上去 cloud run的地方，不妨先檢查一下 Dockerfile 喔！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;這兩天在寫之後工作坊需要用到的範例 &lt;a href=&quot;https://github.com/louis70109/linebot-gemini-summarize&quot;&gt;linebot-gemini-summarize&lt;/a&gt;，結果遇到部屬上去有問題，以下快速筆記這次遇到的一些蠢事，往後需要更細心點才行🤣&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="FastAPI" scheme="https://nijialin.com/tags/FastAPI/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
    <category term="Gemini" scheme="https://nijialin.com/tags/Gemini/"/>
    
  </entry>
  
  <entry>
    <title>如何建立 fly.toml 並快速佈署至 Fly.io</title>
    <link href="https://nijialin.com/2024/04/04/flyio-quick-deploy-your-service/"/>
    <id>https://nijialin.com/2024/04/04/flyio-quick-deploy-your-service/</id>
    <published>2024-04-04T02:16:57.000Z</published>
    <updated>2025-07-03T03:46:50.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>最近因為有些專案需要有 local Volume，但在 Serverless 上要用偏麻煩，除機器上的本身功能以外，還需要另外開 VM 讓 Container 能夠 mount volume，因此需要類似 Heroku、Fly.io 這類的 SaaS 的服務，可以用很少量的費用去使用到 Database&#x2F;Volume 的功能…</p><span id="more"></span><p>過往使用 Heroku 經驗也是會睡眠之後把記憶體(SQLite)內容清乾淨，因此上一篇「<a href="https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/">在 Fly.io 上架設 Uptime Kuma 監控 Side Project</a>」時策之後發現不會被清掉，因此就延續這邊來介紹使用</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有用過 Heroku, Google Cloud, Amazon…+本篇 Fly.io，在一體式與分離式的雲服務基本上都用過</p><ul><li>像是 Heroku &amp; Fly.io 就可以一包 code 直接上，連 Database&#x2F;NoSQL 都可以直接弄</li><li>GCP&#x2F;AWS 則是可以獨立操作想要的功能，需要時在整合，比較乾淨也不會一次佈署搞的霧煞煞</li></ul><p>那基本上就是依需求為主，個別有好處也有各自的 config 需要讀寫，但反正概念上都差不多，先學一套剩下的都好處理 💪</p><h1 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>flyctl</span><br></pre></td></tr></table></figure><p>如果你已經有帳號的話</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fly auth login</span></span><br></pre></td></tr></table></figure><p>第一次還沒有 config 可以使用以下指令，透過 UI 的方式幫忙建立 Fly config</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fly <span class="built_in">launch</span></span><br></pre></td></tr></table></figure><p><img src="https://nijialin.com/images/2024/flyio/launch.png"></p><p>畫面上的東西確認後，會在專案下看到 fly.io 幫你建立的 fly.toml，範例如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fly.toml app configuration file generated for SERVICE_NAME on 2024-04-03T23:36:13+08:00</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See https://fly.io/docs/reference/configuration/ for information about how to use this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">app</span> = <span class="string">&#x27;SERVICE_NAME&#x27;</span></span><br><span class="line"><span class="attr">primary_region</span> = <span class="string">&#x27;sin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[env]</span></span><br><span class="line">  <span class="attr">LINE_CLIENT_ID</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">  <span class="attr">LINE_CLIENT_SECRET</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">  <span class="attr">LINE_REDIRECT_URI</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[http_service]</span></span><br><span class="line">  <span class="attr">internal_port</span> = <span class="number">8080</span></span><br><span class="line">  <span class="attr">force_https</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_stop_machines</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_start_machines</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">min_machines_running</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">processes</span> = [<span class="string">&#x27;app&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[[vm]]</span></span><br><span class="line">  <span class="attr">size</span> = <span class="string">&#x27;shared-cpu-1x&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第二次之後需要部屬："><a href="#第二次之後需要部屬：" class="headerlink" title="第二次之後需要部屬："></a>第二次之後需要部屬：</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fly deploy</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">...</span></span><br><span class="line"><span class="bullet"></span>image size: 1.0 GB</span><br><span class="line"></span><br><span class="line">Watch your deployment at https://fly.io/apps/SERVICE_NAME/monitoring</span><br><span class="line"></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code">Updating existing machines in &#x27;SERVICE_NAME&#x27; with rolling strategy</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code"> ✔ [1/2] Machine 9080110f700387 [app] update succeeded</span></span><br><span class="line"><span class="code"> ✔ [2/2] Machine e784e52b270168 [app] update succeeded</span></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code">Checking DNS configuration for SERVICE_NAME.fly.dev</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">Visit your newly deployed app at https://SERVICE_NAME.fly.dev/</span></span><br></pre></td></tr></table></figure><h2 id="如果-RAM-第一次部屬開太大怎麼辦？"><a href="#如果-RAM-第一次部屬開太大怎麼辦？" class="headerlink" title="如果 RAM 第一次部屬開太大怎麼辦？"></a>如果 RAM 第一次部屬開太大怎麼辦？</h2><p>參閱文件：<a href="https://fly.io/docs/apps/scale-machine/#add-ram">https://fly.io/docs/apps/scale-machine/#add-ram</a></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fly <span class="built_in">scale</span> memory <span class="number">512</span></span><br><span class="line">fly <span class="built_in">scale</span> <span class="keyword">show</span></span><br></pre></td></tr></table></figure><h2 id="我換電腦沒有當初的-fly-toml-檔案怎辦？"><a href="#我換電腦沒有當初的-fly-toml-檔案怎辦？" class="headerlink" title="我換電腦沒有當初的 fly.toml 檔案怎辦？"></a>我換電腦沒有當初的 fly.toml 檔案怎辦？</h2><p>只要電腦現在終端機有透過 <code>fly auth sign</code> 登入，接下來只要把專案 clone 下來，確定 <code>fly.toml</code> 裡面的 app 後面的名字一樣，進到終端機就可以 <code>fly status</code> 看看機器狀態囉！</p><h2 id="flask-deploy-有問題，一直-port-confuse"><a href="#flask-deploy-有問題，一直-port-confuse" class="headerlink" title="flask deploy 有問題，一直 port confuse"></a>flask deploy 有問題，一直 port confuse</h2><p>如果是依靠 gunicorn 部屬的讀者，以下應該會在 Dockerfile 裡面寫上這一段：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="selector-attr">[<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;api:app&quot;</span>, <span class="string">&quot;--log-file=-&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>然而這個啟動方式不論在 app.py 或是 Dockerfile 上寫了 EXPOSE port 為其他的，皆會預設 <code>127.0.0.1:8000</code>，這個舉動會讓 fly.io 感到困惑(confuse)，因為 fly.io 只聽 <code>0.0.0.0</code>，至於 port 應該是不影響，只是在 log 裡面一直看到 port confuse 覺得很奇怪</p><p>其中只要把 Dockerfile 裡面的 CMD 改成以下的就可以上去了，記得自己的 app.py 要改 port 喔！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="selector-attr">[<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;--host&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://technotrampoline.com/articles/deploying-a-python-flask-application-to-fly/">參考文章</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Fly.io 這邊還有很多功能可以使用，但大多都需要透過 command line 來操作，是一個比較開發者導向的 SaaS 的服務，但指令滿直觀的，或許都可以參考使用看看喔！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h1&gt;&lt;p&gt;最近因為有些專案需要有 local Volume，但在 Serverless 上要用偏麻煩，除機器上的本身功能以外，還需要另外開 VM 讓 Container 能夠 mount volume，因此需要類似 Heroku、Fly.io 這類的 SaaS 的服務，可以用很少量的費用去使用到 Database&amp;#x2F;Volume 的功能…&lt;/p&gt;</summary>
    
    
    
    <category term="Serverless" scheme="https://nijialin.com/categories/Serverless/"/>
    
    
    <category term="Serverless" scheme="https://nijialin.com/tags/Serverless/"/>
    
    <category term="Fly.io" scheme="https://nijialin.com/tags/Fly-io/"/>
    
  </entry>
  
  <entry>
    <title>在 Fly.io 上架設 Uptime Kuma 監控 Side Project</title>
    <link href="https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/"/>
    <id>https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/</id>
    <published>2024-03-24T13:21:50.000Z</published>
    <updated>2025-07-03T03:46:50.019Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/kuma/1.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於近期自己蓋了幾隻 side project，慢慢發現有些服務倒了我自己也不知道，但時間久了其實當下也會忘了要修哪…</p><p>也因公司內有 status page 可以看每個服務狀態，想想這需求我也需要，因此萌生了架 status page 來幫忙確認健康狀態，接下來看看怎麼操作吧</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>此次使用的是 <a href="https://github.com/louislam/uptime-kuma/tree/master">uptime-kuma</a>，本來想說可以直接上到 Google Cloud Run 上，除了自己弄不上去以外，也發現 uptime kuma 是使用 SQLite 來儲存資訊，這邊很有可能被 <a href="https://nijialin.com/2020/02/15/serverless-cold-start/">Cold Start 的問題</a>打到，因此這次使用 fly.io 來部署(<a href="https://github.com/louis70109/uptime-kuma-fly/blob/main/fly.toml">民間版本.toml</a>)</p><ol><li>有許多的 notification 可以串接，有支援 LINE Bot &amp; Notify</li></ol><p><img src="https://nijialin.com/images/2024/kuma/notification.png"></p><ol start="2"><li><p>初次進去就可以設帳密，但帳號只能一個還改不了 🫣</p></li><li><p>可設定群組，統一設定 notification 而不用各別弄</p></li><li><p>還沒研究怎麼把 SQLite 拔出來，看來有支援 MySQL</p></li><li><p>備份不求人，直接 Export 就可以了</p></li></ol><p><img src="https://nijialin.com/images/2024/kuma/backup.png"></p><ol start="6"><li>如何部署到 fly.io</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clone 專案到本地</span></span><br><span class="line">git clone https:<span class="string">//github.com/louis70109/uptime-kuma-fly.git</span></span><br><span class="line"><span class="comment"># 進入資料夾</span></span><br><span class="line"><span class="keyword">cd</span> uptime-kume-fly/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署，原先指令是 flyctl</span></span><br><span class="line">fly launch \</span><br><span class="line">  <span class="params">--copy-config</span> \</span><br><span class="line">  <span class="params">--auto-confirm</span> \</span><br><span class="line">  <span class="params">--ha=false</span> \</span><br><span class="line">  <span class="params">--name</span> uptime-kuma-nijia \</span><br><span class="line">  <span class="params">--now</span></span><br></pre></td></tr></table></figure><ol start="7"><li>如果想要在 fly.io 上客製化 domain，例如：<code>status.YOURDOMAIN.com</code></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fly certs <span class="built_in">create</span> <span class="built_in">status</span>.YOURDOMAIN.com</span><br><span class="line">fly certs <span class="built_in">create</span> <span class="string">&quot;*.YOURDOMAIN.com&quot;</span></span><br><span class="line">fly certs show <span class="string">&quot;*.YOURDOMAIN.com&quot;</span></span><br></pre></td></tr></table></figure><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>看 Fly.io 一個月租金寫 5 美元，但因為只有一個服務應該不會用到這麼多流量，這次除了架設 status page 以外，也來看看這邊租金是怎樣，如果 &lt; 100 台幣的話或許可以考慮繼續使用，畢竟人家提供方便的服務來使用也是挺棒的！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/kuma/1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由於近期自己蓋了幾隻 side project，慢慢發現有些服務倒了我自己也不知道，但時間久了其實當下也會忘了要修哪…&lt;/p&gt;
&lt;p&gt;也因公司內有 status page 可以看每個服務狀態，想想這需求我也需要，因此萌生了架 status page 來幫忙確認健康狀態，接下來看看怎麼操作吧&lt;/p&gt;</summary>
    
    
    
    <category term="Serverless" scheme="https://nijialin.com/categories/Serverless/"/>
    
    
    <category term="Serverless" scheme="https://nijialin.com/tags/Serverless/"/>
    
    <category term="Monitor" scheme="https://nijialin.com/tags/Monitor/"/>
    
    <category term="Fly.io" scheme="https://nijialin.com/tags/Fly-io/"/>
    
    <category term="Uptime Kuma" scheme="https://nijialin.com/tags/Uptime-Kuma/"/>
    
  </entry>
  
  <entry>
    <title>【青森】滑雪紀錄, 從秋田機場出發</title>
    <link href="https://nijialin.com/2024/03/02/aomori-sonwboarding-202402/"/>
    <id>https://nijialin.com/2024/03/02/aomori-sonwboarding-202402/</id>
    <published>2024-03-02T14:51:08.000Z</published>
    <updated>2025-07-03T03:46:50.017Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/aomori/S__19750974_0.jpg"></p><h1 id="班機-虎航"><a href="#班機-虎航" class="headerlink" title="班機-虎航"></a>班機-虎航</h1><p>這次跟著朋友一起訂機票，虎航只有禮拜四的班機可以飛秋田，這次訂了 22,000 NTD，雖然比去仙台貴上滿多的，但能下去看一下秋田犬也不錯 😄</p><blockquote><p>個人前往等級: 剛學會 S turn，比較陡的紅線有時候還是會怕怕的，時常還是會卡刃跌倒</p></blockquote><span id="more"></span><table><thead><tr><th align="left"></th><th align="left"></th><th align="left">班機</th><th></th></tr></thead><tbody><tr><td align="left">時間 2&#x2F;22</td><td align="left">08:30</td><td align="left"></td><td>12:40</td></tr><tr><td align="left">地點</td><td align="left">TPE</td><td align="left">IT 256</td><td>AXT</td></tr><tr><td align="left">時間 2&#x2F;29</td><td align="left">14:10</td><td align="left"></td><td>17:25</td></tr><tr><td align="left">地點</td><td align="left">AXT</td><td align="left">IT 257</td><td>TPE</td></tr></tbody></table><h2 id="秋田空港"><a href="#秋田空港" class="headerlink" title="秋田空港"></a>秋田空港</h2><p><img src="https://nijialin.com/images/2024/aomori/S__19750984_0.jpg"></p><p>秋田空港似乎是去年加開給虎航的，算起來也算是一個小機場，因此在這邊虎航的櫃位就很明顯，但回程時不能線上 check-in，不確定是不是小機場的緣故，但排隊其實很快，很多程序也都先手動處理(機票、對名單…etc)</p><h2 id="秋田出發到青森"><a href="#秋田出發到青森" class="headerlink" title="秋田出發到青森"></a>秋田出發到青森</h2><p><img src="https://nijialin.com/images/2024/aomori/S__5595140.jpg"></p><p>秋田機場下飛機後，需要先搭乘巴士到<strong>秋田站</strong>，參考上圖右側，這次我 12:40 抵達機場，小機場應該可以比較快出關，但也要趕在 14:15 抵達巴士站轉乘到秋田駛</p><p><img src="https://nijialin.com/images/2024/aomori/S__5595159.jpg"></p><p>接著需要搭乘 JR 到青森，以巴士約 40 分鐘左右，因此預計要搭乘到 15:00 之後的兩班到青森，抵達時間應該也晚上七點了</p><blockquote><p>如果搞不清楚 JR 怎麼搭，可以參考這邊文章 <a href="https://matcha-jp.com/tw/172">【最新 2024】日本新幹線攻略！一次搞懂購票方式、種類區分、座位</a></p></blockquote><blockquote><p>這次住在<a href="https://www.google.com/maps/place/APA%E9%A3%AF%E5%BA%97+%E9%9D%92%E6%A3%AE%E7%AB%99%E6%9D%B1/@40.8278806,140.7363861,17z/data=!3m1!4b1!4m9!3m8!1s0x5f9b9f1e13da284f:0xc5f50c8652edfa2b!5m2!4m1!1i2!8m2!3d40.8278766!4d140.7389664!16s%2Fg%2F1tnl16vv?authuser=0&entry=ttuhttps:/">APA 青森東</a></p></blockquote><h2 id="回程-秋田-機場"><a href="#回程-秋田-機場" class="headerlink" title="回程 秋田-機場"></a>回程 秋田-機場</h2><p>由於是最後一天住在秋田 <a href="https://www.google.com/maps/place/APA+HOTEL+AKITA-SENSHUKOEN/@39.7206179,140.1166995,17z/data=!3m1!4b1!4m9!3m8!1s0x5f8fc2bfe52953e5:0xc91ceb8b6c1eb81a!5m2!4m1!1i2!8m2!3d39.7206138!4d140.1192798!16s%2Fg%2F12m9km9lj?authuser=0&entry=ttu">APA 酒店 - 秋田千秋公園 (APA Hotel Akita-Senshukoen)</a>，然後 14:10 的飛機，因此先預估 11:30 從飯店出發，搭乘機場接送巴士去機場，時程 40 分鐘</p><blockquote><p><a href="https://maps.app.goo.gl/Ptum5uitHDe5Dkjo9">Google Map</a></p></blockquote><p><img src="https://nijialin.com/images/2024/aomori/2.png"></p><blockquote><p>秋田比較冷門，個人還是喜歡最後一天可以有地方逛，下次應該會去仙台搭飛機了 XD</p></blockquote><h1 id="雪場"><a href="#雪場" class="headerlink" title="雪場"></a>雪場</h1><p><img src="https://nijialin.com/images/2024/aomori/S__19750982_0.jpg"></p><h2 id="moyahills"><a href="#moyahills" class="headerlink" title="moyahills"></a><a href="http://moyahills.jp/index.html">moyahills</a></h2><p><img src="https://nijialin.com/images/2024/aomori/1.png"></p><p>在這裡待上一天熱身，會在這邊租雪具(<a href="https://moyahills.jp/winter/winter.html">URL</a>)，這次一樣會租雪板+鞋+帽子，然後自己帶護膝護臀</p><blockquote><p>租裝備 6000&#x3D;5000 板子鞋子+1000 帽子<br>3060 moyahills 雪票<br>總共 <strong>9060 yen</strong></p></blockquote><p><img src="https://nijialin.com/images/2024/aomori/20231214130801-0001.jpg"></p><p>備存一下地圖，這次只有滑一號纜車而已，其他地方因為雪太少沒辦法滑行(很多冰面)</p><h2 id="八甲田雪場"><a href="#八甲田雪場" class="headerlink" title="八甲田雪場"></a><a href="https://maps.app.goo.gl/dVVYec58396nDwmF7">八甲田雪場</a></h2><p><img src="https://nijialin.com/images/2024/aomori/S__19750976_0.jpg"></p><ul><li>營業時間以及票券的錢 <a href="http://www.hakkoda-ropeway.jp/guide">http://www.hakkoda-ropeway.jp/guide</a></li><li>這次八甲田買 <strong>11 回券</strong>，分別滑行三天 3、4、4 次，<ul><li>總共: <strong>10100 yen</strong></li></ul></li><li>有 Forest 以及 Direct 兩個線路，這次大多都在 Direct line 滑行練感覺</li><li>我來的時間是二月底，營業時間 9:00~15:40</li></ul><blockquote><p>好險第一天有在 Moyahills 練習，前幾天需要先評估滑雪狀態再決定要不要來 😆</p></blockquote><h3 id="現場排隊狀況"><a href="#現場排隊狀況" class="headerlink" title="現場排隊狀況"></a>現場排隊狀況</h3><p><img src="https://nijialin.com/images/2024/aomori/S__19750979_0.jpg"></p><p>排隊中午前平均要排 <strong>1~1.5</strong> 小時，中午之後大概 1 小時，如果像我一樣因為會累或是需要熱機比較久，避開午餐人潮可以第一趟下來 <strong>11 點</strong>餐廳開了就先吃，然後去現場排隊一個小時就消化好了可以開始滑行</p><blockquote><p>體感日本人跟中國人的數量大概 1:0.8 左右</p></blockquote><h3 id="其他雪場內筆記"><a href="#其他雪場內筆記" class="headerlink" title="其他雪場內筆記"></a>其他雪場內筆記</h3><p><img src="https://nijialin.com/images/2024/aomori/S__19750978_0.jpg"></p><ul><li>食物大概一千日元上下</li><li>一天租借裝備:<ul><li>裝備板子鞋子 4000</li><li>帽子 1000</li></ul></li></ul><blockquote><p>裝備 <strong>5000</strong> yen&#x2F;天</p></blockquote><h4 id="巴士時刻表"><a href="#巴士時刻表" class="headerlink" title="巴士時刻表"></a>巴士時刻表</h4><p>以下先做筆記提供給未來的自己看，但這次是跟著朋友包車從青森出發到八甲田</p><blockquote><p>這次去八甲田跟著同行包車，以下資訊提供給之後要去的我一些參考 XD</p></blockquote><h5 id="青森車站-雪場"><a href="#青森車站-雪場" class="headerlink" title="青森車站-雪場"></a>青森車站-雪場</h5><p><img src="https://nijialin.com/images/2024/aomori/491450597338513798.png"></p><ul><li><a href="https://maps.app.goo.gl/WMcRyvHcqBheBnMV9">GOOGLE MAP</a></li><li>地址：日本〒 030-0133 Aomori, Moya, Nashinoki− ６３</li></ul><h5 id="雪場-青森車站"><a href="#雪場-青森車站" class="headerlink" title="雪場-青森車站"></a>雪場-青森車站</h5><p><img src="https://nijialin.com/images/2024/aomori/491450553851708003.png"></p><h2 id="Aomori-Spring-Ski-Resort"><a href="#Aomori-Spring-Ski-Resort" class="headerlink" title="Aomori Spring Ski Resort"></a><a href="https://maps.app.goo.gl/WaRh4C9yDwm2qaV66?g_st=ic">Aomori Spring Ski Resort</a></h2><p><img src="https://nijialin.com/images/2024/aomori/md85_G_01.jpg"></p><p>有一天因為八甲田風太大沒有開，全體人員前往 Aomori spring 滑雪，這次去中間通往山頂的纜車沒開，也剛好藉這個機會把這邊都玩過一遍，體感這邊的紅線跟綠線等及差不多</p><p>這邊可以選擇要 5000 的 snowboard set 或 5500 版本，差異大概是板子跟鞋子都比較高級點，帽子一樣 1000，雪票 6200</p><blockquote><p>總共 🟰 <strong>12700</strong> yen 💴&#x2F;一天</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這次很幸運可以跟到很棒的滑雪團，也遇到補很多雪的日子(不用滑冰塊)，並且可以體驗到八甲田山的魔力，接下來明年再來去日本收集更多雪場！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/aomori/S__19750974_0.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;班機-虎航&quot;&gt;&lt;a href=&quot;#班機-虎航&quot; class=&quot;headerlink&quot; title=&quot;班機-虎航&quot;&gt;&lt;/a&gt;班機-虎航&lt;/h1&gt;&lt;p&gt;這次跟著朋友一起訂機票，虎航只有禮拜四的班機可以飛秋田，這次訂了 22,000 NTD，雖然比去仙台貴上滿多的，但能下去看一下秋田犬也不錯 😄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;個人前往等級: 剛學會 S turn，比較陡的紅線有時候還是會怕怕的，時常還是會卡刃跌倒&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="Japan" scheme="https://nijialin.com/tags/Japan/"/>
    
    <category term="Snowboard" scheme="https://nijialin.com/tags/Snowboard/"/>
    
    <category term="日本滑雪" scheme="https://nijialin.com/tags/%E6%97%A5%E6%9C%AC%E6%BB%91%E9%9B%AA/"/>
    
    <category term="青森" scheme="https://nijialin.com/tags/%E9%9D%92%E6%A3%AE/"/>
    
    <category term="八甲田山" scheme="https://nijialin.com/tags/%E5%85%AB%E7%94%B2%E7%94%B0%E5%B1%B1/"/>
    
  </entry>
  
</feed>
