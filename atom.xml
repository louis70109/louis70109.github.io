<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忍者工坊</title>
  
  
  <link href="https://nijialin.com/atom.xml" rel="self"/>
  
  <link href="https://nijialin.com/"/>
  <updated>2024-06-27T10:02:23.128Z</updated>
  <id>https://nijialin.com/</id>
  
  <author>
    <name>NiJia Lin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LINE TECH FRESH 2024 畢業分享會精彩回顧</title>
    <link href="https://nijialin.com/2024/06/27/line-techfresh-graduation-2024-result/"/>
    <id>https://nijialin.com/2024/06/27/line-techfresh-graduation-2024-result/</id>
    <published>2024-06-27T18:00:43.000Z</published>
    <updated>2024-06-27T10:02:23.128Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://vos.line-scdn.net/landpress-content-v2-vcfc68aynwenkh3bno0ixfx8/1719472774665.png?updatedAt=1719472776000"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好，我們是 LINE Developer Relations 團隊，不曉得大家從 LINE TECH FRESH 畢業分享會中是否有獲得哪些有趣的收穫呢？從 <a href="https://techblog.lycorp.co.jp/zh-hant/line-tech-fresh-graduation-2024">Save your time - TECH FRESH 畢業分享會 2024 @ LINE</a></p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><h1 id="為什麼要參加軟體實習生研討會？"><a href="#為什麼要參加軟體實習生研討會？" class="headerlink" title="為什麼要參加軟體實習生研討會？"></a>為什麼要參加軟體實習生研討會？</h1><p><img src="https://vos.line-scdn.net/landpress-content-v2-vcfc68aynwenkh3bno0ixfx8/1719472773499.png?updatedAt=1719472774000"></p><p>參加一場 LINE TECH FRESH 畢業分享會會帶來以下好處：</p><ul><li>學習機會：可以從優秀的 LINE TECH FRESH 講者獲得寶貴的實習經驗和見解</li><li>知識分享：參加活動要把握機會是與 LINE 的實習生以及 Mentor 交流和分享軟體領域的知識</li><li>自我推廣：除了聆聽演講外，參加活動也是展示自己專業知識和技能的好機會，多交流絕對是個好的選擇！</li></ul><h2 id="蔡-EC：24-歲開發一次成功"><a href="#蔡-EC：24-歲開發一次成功" class="headerlink" title="蔡 EC：24 歲開發一次成功"></a>蔡 EC：24 歲開發一次成功</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/525f03367bc34088b006617b6b46b216?slide=4" title="蔡EC：24歲開發一次成功" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>由 Winnie 首先從 LINE SHOPPING 開始介紹，並透過自身 Data team 的實習經驗中了解日常的工作內容，並分享在實習與在學校同時並行時的一些見解。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/525f03367bc34088b006617b6b46b216?slide=18" title="蔡EC：24歲開發一次成功" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>緊接 Lauren 分享了在 EC SPM 團隊中使用 Kafka 的經驗談，帶現場的觀眾認識在企業中是如何使用以及架構設計，並且透過 2024 農曆新年的活動認識更多案例。</p><blockquote><p>更多內容請見 Youtube</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/gABdQl0Nnt8?si=hKFgWiRXvcu3AHtC" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="QA-蝦米-QA？我的扣超讚的啊"><a href="#QA-蝦米-QA？我的扣超讚的啊" class="headerlink" title="QA 蝦米 QA？我的扣超讚的啊"></a>QA 蝦米 QA？我的扣超讚的啊</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/db34988fe80c49ae8b39fdee98cd8c89?slide=10" title="QA 蝦米 QA？我的扣超讚的啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>第二組則是由 Lawrence &amp; YT 分享在當任 QA 時的一些眉眉角角，首先 Lawrence 分享在 QA 的開發流程中，分為六個主要階段：</p><ul><li>分析：進行測試需求分析</li><li>設計：撰寫測試案例</li><li>開發：開發自動化腳本</li><li>測試：包括端到端測試（E2E）、關鍵用戶體驗測試（CUJ）及壓力測試</li><li>部署：實施持續整合（CI）和持續開發（CD）</li><li>維護：進行回歸測試和性能監控。</li></ul><p>這些步驟確保軟體質量和穩定性，並持續改進產品。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/db34988fe80c49ae8b39fdee98cd8c89?slide=20" title="QA 蝦米 QA？我的扣超讚的啊" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>下一部份 YT 則分享撰寫測試案例（Test Case）也會有技術債。常見的測試案例包括確認頁面上有「LINE 購物」的 logo、搜尋框元素、相機 icon、購物車 icon，以及確認跳轉頁面成功和商店頁面上有「專屬推薦」。這些測試案例對應不同的 Epic，如首頁標題 Banner 等。為了減少技術債，可以舉辦 workshop，讓團隊一起儘早識別並解決這些問題，並且可以透過不同的 ML 模型來解決類似的問題。</p><blockquote><p>更多內容請見</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/AQX97stGDw0?si=1TfkOzpQ2WoOgVir" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="這就很玄囉-從粽子看開發的世界"><a href="#這就很玄囉-從粽子看開發的世界" class="headerlink" title="這就很玄囉! 從粽子看開發的世界"></a>這就很玄囉! 從粽子看開發的世界</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/677d8ea950c845cc9a542b70930bfa40?slide=19" title="這就很玄囉! 從粽子看開發的世界" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>Chris 的實習生活主要分為三個部分：</p><ul><li>後端開發（Backend Development）：佔 60%的時間，專注於後端系統的開發工作</li><li>持續整合&#x2F;持續部署流程（CI&#x2F;CD Process）：佔 30%的時間，Chris 參與並優化 CI&#x2F;CD 流程，確保產品持續整合和自動部署</li><li>技術研究（Tech Research）：佔 10%的時間，Chris 進行新技術的研究和 Research，保持對技術的熟悉度</li></ul><p>此外，Chris 還會參與各種分享會（Sharing）和保持工作與生活的平衡（WLB），這些活動有助於提升團隊合作能力以及生活品質</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/677d8ea950c845cc9a542b70930bfa40?slide=16" title="這就很玄囉! 從粽子看開發的世界" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>Young 分享了他在 LINE FACT CHECKER 系統架構、產品改進方法以及專案開發 CI&#x2F;CD 流程中的經驗，並從中學習到如何改進產品：</p><ul><li>彈性（Resiliency）：透過 Rolling Update、Retry Strategy 和錯誤處理（如 Timeout）來提高系統的穩定性。</li><li>效率（Efficiency）：採用 Concurrent Design、Cache strategy（如 Redis）和 Horizontal Scaling 來提升系統效能。</li></ul><p>當中也學到更多專案開發 CI&#x2F;CD 流程：</p><ul><li>推送程式碼 GitHub 之後，透過 GitHub Actions 進行 Test、分析（SonarQube）、程式碼審查和封裝，最終將 COntainer 推送至 Harbor。</li><li>基礎設施 Manifest 變更時會透過 Webhook 同步到 ArgoCD，並部署到開發環境集群和產品環境的集群，最後透過 Grafana 進行監控。</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/AClk3Kp-z5U?si=wEQheEcLUVuxGSp5" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="從混亂到掌控：使用-Observability-揭開管家的神秘面紗"><a href="#從混亂到掌控：使用-Observability-揭開管家的神秘面紗" class="headerlink" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗"></a>從混亂到掌控：使用 Observability 揭開管家的神秘面紗</h2><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d3101e26f074429b97c8da3be209743c?slide=10" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>首先 Tristan 帶來在學生時期很難學到的概念 - Observability，它是一個在軟體開發和運營中非常重要的概念。它指的是我們能夠深入了解和監控系統的內部運作，並從中獲取有價值的資訊和洞察力。透過實現可觀察性，我們可以更好地理解系統的行為、性能和問題，並能夠快速做出反應和解決。</p><p>在上面的程式碼中，提到了 Observability 的三大支柱：Metrics、Tracing 和 Logging。這些支柱提供了不同層面的資訊，幫助我們全面了解系統的運作狀態。</p><p>接著 Gary 分享<strong>高峰流量監控</strong>&amp;<strong>5 分鐘工作流程之謎</strong>的經驗談</p><h3 id="高峰流量監控"><a href="#高峰流量監控" class="headerlink" title="高峰流量監控"></a>高峰流量監控</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d3101e26f074429b97c8da3be209743c?slide=36" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>當數以萬計的用戶同時訪問系統時，伺服器會無法處理所有請求，為了避免用戶體驗不佳，團隊發現問題並調整 Server 的效能，提升系統在高峰期的穩定性和回應速度，改善用戶體驗</p><h3 id="5-分鐘工作流程之謎"><a href="#5-分鐘工作流程之謎" class="headerlink" title="5 分鐘工作流程之謎"></a>5 分鐘工作流程之謎</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d3101e26f074429b97c8da3be209743c?slide=41" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>每天執行多個工作流程以撈取用戶發票，發現許多工作流程需要超過 5 分鐘才能完成。團隊確定延遲原因並優化工作流程效能，顯著減少處理時間，提升系統效率。</p><p>這些案例展示了在高流量和複雜工作流程中，觀察性（Observability）如何幫助識別和解決系統問題，最終提升系統性能和用戶體驗。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d3101e26f074429b97c8da3be209743c?slide=29" title="從混亂到掌控：使用 Observability 揭開管家的神秘面紗" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/g7v_p3n_1Lw?si=m0j_2tkUKEf2Qmro" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="Lightning-Talk"><a href="#Lightning-Talk" class="headerlink" title="Lightning Talk"></a>Lightning Talk</h2><h3 id="你在-DevOps-什麼啦，我要趕快上線！"><a href="#你在-DevOps-什麼啦，我要趕快上線！" class="headerlink" title="你在 DevOps 什麼啦，我要趕快上線！"></a>你在 DevOps 什麼啦，我要趕快上線！</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/3c97c61de16647b388707b415027847c?slide=9" title="你在 DevOps 什麼啦，我要趕快上線！" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>Calista &amp; Ryan 分別透過自身的經驗，分享從學校到團隊中，DevOps 中間扮演的角色是多麽至關重要，以及為何要帶入這麼多的工具，持續讓專案可以在自動化的世界裡運行，並且確保產品的穩定性</p><iframe width="560" height="315" src="https://www.youtube.com/embed/Bogq44fRQn4?si=8L6iQ_IgiSWPq_6B" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h3 id="寫出不管地震怎麼搖網站都不會壞的前端測試"><a href="#寫出不管地震怎麼搖網站都不會壞的前端測試" class="headerlink" title="寫出不管地震怎麼搖網站都不會壞的前端測試"></a>寫出不管地震怎麼搖網站都不會壞的前端測試</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/35af65b1313c40f3a1a8ca5afc2f9a55?slide=13" title="寫出不管地震怎麼搖網站都不會壞的前端測試" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>YU 作為前端實習生，在這次的分享中以前端為主軸，帶大家了解前端測試在其中扮演的重要性，開發過程中雖然功能很重要，但其實測試可以確保在 golden path 中的穩定性，並且讓用戶可以對產品有更多的信心去使用，而不會產品用到一半就莫名其妙壞掉</p><iframe width="560" height="315" src="https://www.youtube.com/embed/GH2yNgvOPCs?si=gI4ex1q2iAWppFcb" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h3 id="一起來跑-TDD，直到完成-User-Story-為止"><a href="#一起來跑-TDD，直到完成-User-Story-為止" class="headerlink" title="一起來跑 TDD，直到完成 User Story 為止"></a>一起來跑 TDD，直到完成 User Story 為止</h3><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/824a73a6967343ecb95603933db8b1fa?slide=16" title="一起來跑 TDD，直到完成 User Story 為止" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><p>最後 Brandon 帶大家了解 TDD (Test-Driven Development)精神，TDD 強調在開發功能之前先撰寫測試，TDD 的主要目的是透過事前規劃的測試來提升程式碼質量和可測試性，並讓開發者對交付和重構更有信心。這一流程促使開發者在撰寫程式前可以更深入思考，從而讓程式碼品質更好</p><p>接著帶到 ATDD (Acceptance Test-Driven Development)，畢竟產品還是需要面對終端用戶，ATDD 是透過和 stakeholder 共同定義接受的測試範圍來確保需求被正確理解和實現。這一方法可以降低開發團隊與 stakeholder 之間的溝通成本，並確保最終產品符合用戶需求。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/VsHJr42VcHY?si=rr3hdPn_AtP8NtkJ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p><img src="https://vos.line-scdn.net/landpress-content-v2-vcfc68aynwenkh3bno0ixfx8/1719475595313.JPG?updatedAt=1719475596000"></p><p>給即將從 LINE 畢業的同學，感謝你們在這段時間內的努力和貢獻！有你們的付出，LINE 才能持續在軟體生態中繼續發揚光大，不論未來如何，希望在這邊的所學能幫助各位在未來的職涯上更加順遂，希望你們能夠繼續保持對技術的熱情和追求卓越的態度，不斷學習和成長！</p><p>最後，衷心感謝當天參加活動的所有會眾 🫡 你們的參與和支持讓<strong>LINE TECH FRESH 畢業分享會</strong>更加成功和有意義。感謝你們的熱情參與和寶貴的意見分享。期待未來能夠再次在 LINE 相見，一起探討和分享軟體領域的知識和經驗！</p><h2 id="看到文末，若還不知道-LINE-TECH-FRESH…"><a href="#看到文末，若還不知道-LINE-TECH-FRESH…" class="headerlink" title="看到文末，若還不知道 LINE TECH FRESH…"></a>看到文末，若還不知道 LINE TECH FRESH…</h2><p>LINE TECH FRESH 是一個一年一約的技術實習計畫。這個計畫目標是培養出具有<strong>創新思維</strong>和<strong>解決問題能力</strong>的軟體工程師，有機會在 LINE 中獲得實際的工作經驗和專業知識，並與 LINE 的工程師團隊合作。這個計畫不僅僅是一個實習機會，還提供了專業的指導和培訓，幫助同學發展專業技能並能有個良好的軟體生涯起點。</p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://vos.line-scdn.net/landpress-content-v2-vcfc68aynwenkh3bno0ixfx8/1719472774665.png?updatedAt=1719472776000&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家好，我們是 LINE Developer Relations 團隊，不曉得大家從 LINE TECH FRESH 畢業分享會中是否有獲得哪些有趣的收穫呢？從 &lt;a href=&quot;https://techblog.lycorp.co.jp/zh-hant/line-tech-fresh-graduation-2024&quot;&gt;Save your time - TECH FRESH 畢業分享會 2024 @ LINE&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="TECH FRESH" scheme="https://nijialin.com/tags/TECH-FRESH/"/>
    
    <category term="Internship" scheme="https://nijialin.com/tags/Internship/"/>
    
  </entry>
  
  <entry>
    <title>Save your time - TECH FRESH 畢業分享會 2024 @ LINE</title>
    <link href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/"/>
    <id>https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/</id>
    <published>2024-05-20T11:19:07.000Z</published>
    <updated>2024-06-27T10:02:23.128Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://vos.line-scdn.net/landpress-content-v2_1761/1689497803877.png?updatedAt=1689497805000"></p><ul><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E4%BB%8B%E7%B4%B9">活動介紹</a><ul><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E8%B3%87%E8%A8%8A">活動資訊</a></li></ul></li><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E6%AD%B7%E5%8F%B2%E5%85%B8%E6%95%85">活動歷史典故</a></li><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E6%B5%81%E7%A8%8B">活動流程</a></li><li><a href="https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E7%B5%90%E8%AB%96">結論</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好！我們是 LINE Developer Relations 團隊，很高興向大家介紹一個特別的活動——<strong>2024 年 6 月 18 日</strong>舉行的 <strong>TECH FRESH 畢業分享會</strong>。去年我們首次開放對外的分享會，現場引起了取多迴響，我們在這個活動上學到了很多，因此希望透過今年的舉辦，能與更多同學分享我們 LINE TECH FRESH 的成長和收穫。</p><span id="more"></span><h1 id="活動介紹"><a href="#活動介紹" class="headerlink" title="活動介紹"></a>活動介紹</h1><p>在這個分享會中，我們的實習生將站上舞台，分享他們在 LINE 的點滴和成就，不僅能聽到第一手的實習經驗，還能深入了解 LINE 的工作環境與文化。無論你是對軟體生態充滿熱情的學生，還是正在尋找職業發展方向的求職者，我們都誠摯地邀請你來參加這場盛會。讓我們一起在這個活動中學習、交流、成長，為未來創造更多可能。</p><h2 id="活動資訊"><a href="#活動資訊" class="headerlink" title="活動資訊"></a>活動資訊</h2><p>活動：LINE TECH FRESH 畢業分享會<br>時間：<code>2024/06/18 18:00~21:30</code> (17:40 開放入場)<br>地點：LINE 台灣總部<br>報名：<a href="https://lin.ee/GqZLv2m/yltz">https://lin.ee/GqZLv2m/yltz</a></p><h1 id="活動歷史典故"><a href="#活動歷史典故" class="headerlink" title="活動歷史典故"></a>活動歷史典故</h1><p>去年首次對外公開，小小的空間(圖片)，現場人數也來到近百人，有許多同學來了解 LINE TECH FRESH 在軟體領域的耕耘成果，沒參加過的同學可能會很好奇，那畢業分享會到底在做什麼？以下概略地跟讀者介紹，並且可以搭配下文的<code>活動流程</code>搭配使用喔！</p><p>在 2023 年之前，TECH FRESH 會在畢業前夕，與 LINE 內部所有同仁分享整年的戰果，而 Mentor 也會在其中鼓勵同學並且提點未來軟體道路的一些眉眉角角。 (參考以下文)</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2022-graduation">【TECH FRESH 畢業分享會】原來實習有這些眉角？</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2021-gradute">【LINE TECH FRESH】2021 屆畢業囉！這一年來又有什麼新鮮事呢？</a></li></ul><p><img src="https://vos.line-scdn.net/landpress-content-v2_1761/1689498034174.jpg?updatedAt=1689498035000"></p><p>而在同學的內容整理當中，我們發現大家的內容都相當有料，思考著如何讓更多人瞭解 TECH FRESH 整年的實習過程究竟對職涯多有幫助，因此在去年我們決定對外展開。現場效果非常棒，將近有** 80 位來自不同學校的同學**參加，並且現場許多同學就直接交流起來，了解 TECH FRESH 們在當時考慮實習的顧慮點，以及後續的規劃，相信這會是一場讓參加的同學們收穫滿滿的活動！</p><p>今年我們一樣邀請應屆畢業生，與大家分享更不同層面的內容，詳細內容跟我們一起參考以下內容：</p><h1 id="活動流程"><a href="#活動流程" class="headerlink" title="活動流程"></a>活動流程</h1><p>這次的活動將會有以下幾個部分：</p><ul><li>Keynote：由 TECH FRESH people manager - Evan 為大家分享東西</li><li>實習生分享：我們有四組實習生將會上台分享他們在 LINE 的實習經驗，包括他們的學習過程，以及他們如何將學術理論應用到實際工作中。</li><li>Lightning Talk：我們還有四位現役 TECH FRESH 將進行快速的演講，分享他們在 LINE 的工作和學習經驗。</li><li>訪談環節：我們將進行一場訪談，邀請曾為 TECH FRESH 的學長姐，讓你更深入地了解我們的實習生們的經驗和感想。</li></ul><blockquote><p>活動僅開放給學生身分參加(現場審核)，同時現場將提供餐飲及小點心，因此歡迎各大專院校同學共襄盛舉 LINE TECH FRESH 畢業分享會！</p></blockquote><ul><li>18:00~18:05 開場</li><li>18:05~18:20 <strong>從實習到專家：LINE TECH FRESH 的成長軌跡</strong> Evan Lin</li><li>18:20~18:40 <strong>蔡 EC：24 歲開發一次成功</strong> Chiu Winnie, Yang Lauren</li><li>18:40~19:00 <strong>QA 蝦米 QA？我的扣超讚的啊</strong> Chen YT, Tsai Lawrence</li><li>19:00~19:20 <strong>這就很玄囉 從粽子看開發的世界</strong> Shin Chris, Chang Young</li><li>19:20~19:40 <strong>從混亂到掌控：使用 Observability 揭開管家的神秘面紗</strong> Wu Tristan, Hu Gary</li><li>19:40~20:00 攤位時間 (EC, Content, Central)</li><li>20:00~20:40 Lightning Talk<ul><li><strong>你在 DevOps 什麼啦，我要趕快上線！</strong> Wu Calista, Lee Ryan</li><li><strong>寫出不管地震怎麼搖，都能確保網站都不會壞的前端測試</strong>  Chen Yu</li><li><strong>一起來跑 TDD，直到完成 User Story 為止</strong> Lu Brandon</li></ul></li><li>20:40 ~ 20:50 大合照 @ 2F &amp; Ending</li><li>20:50 ~ 21:00 Q&amp;A 自由活動空間</li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這麼精彩內容如果錯過就要再等一年囉！趕快按下報名👉<a href="https://lin.ee/GqZLv2m/yltz">https://lin.ee/GqZLv2m/yltz</a>，並邀請週遭同學們一起來參加！更多 TECH FRESH 內容請參考以下清單，那我們就 2024&#x2F;06&#x2F;18 見啦！</p><ol><li><a href="https://techblog.lycorp.co.jp/zh-hant/techfresh-2024">LINE 實習筆記：TECH FRESH 的軟體探險之旅</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/line-tech-fresh-2024-summer">LINE TECH FRESH 2024 Summer Class 招募相關說明 (時程, 職缺)</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/frontend-try-exception-sitcon-2024">沒想過的前端錯誤處理 可能比你有做的還多 @ SITCON 2024</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/kubernetes-config-Secret-testing-with-twokey-testing-principles">LINE 旅遊 - How We Conduct Automated Kubernetes Config and Secret Testing with Two Key Testing Principles</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/From-Classroom-to-Data-Team-My-Journey-at-LINE">From Classroom to Data Team: My Journey @ LINE</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/beyond-development-as-a-tech-fresh">Beyond Development: Exploring the Multifaceted World of Engineering at LINE as a TECH FRESH</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/from-video-creator-to-qa-internship">關於我從拍片仔轉職 QA 的那件事</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/implementation-myself-by-different-department">非本科，又如何？ — 論非本科的自我實踐之路</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/embarking-on-a-machine-learning-internship-nycu-csie-visit">進擊的後端: Chris 實習經驗分享 @ 台大_輔大_北醫 GDSC 企業參訪</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/utopian-journey-my-ideal-internship-experience-at-line">Utopian Journey – My Ideal Internship Experience at LINE (臺師大企業參訪演講)</a></li><li><a href="https://techblog.lycorp.co.jp/zh-hant/from-heart-to-software-engineering-intern">從心開始的純軟之路 – 一次解答非本科走進軟體業的迷思 @ 臺師大企業參訪</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/ncku-line-visit-2023">實習經驗分享 @ 成功大學企業參訪</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2022-graduation">【TECH FRESH 畢業分享會】原來實習有這些眉角？</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/nccu-gdsc-visit-line-2023/">政治大學 GDSC 校園參訪 - 資料工程 &amp; LINE TRAVEL工程團隊介紹</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/nycu-visit-line-202304/">陽明交大資工系-企業參訪：資料 &amp; 前端工程團隊介紹</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-internship-erin/">LINE 實習大小事</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/Tackle-the-infodemic-of-misinformation-from-LINE/">Tackle the infodemic of misinformation from LINE</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/tmp-visit-line-2023/">臺北醫學大學企業參訪 - Unleashing the Power of NLP : Innovations from LINE Data Dev</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2023-spring/">加入 LINE TECH FRESH，開啟你的職場新鮮人生！@ Vision 臺大校園徵才</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/tech-fresh-sharing-at-APCS">APCS 企業參訪 - What is it like to be a LINE TECH FRESH</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-interview-2022">LINE TECH FRESH 2022 面試分享</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/from-line-tech-fresh-to-liner">LINE TECH FRESH: 從實習到成為正職的經歷</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-tech-fresh-2020-graduate/">TECH FRESH 實習的一年間，除了開發還有什麼內部活動呢？</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/what-is-tech-fresh-interview/">【訪談】TECH FRESH 工作老實說 – 後續花絮與相關資訊整理</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/life-in-line-tech-fresh-sharing/">Life in LINE – 直擊 TECH FRESH 實習內容！</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/techpulse-2020-tech-fresh-session/">TECHPULSE 2020 青春主場 – TECH FRESH 議程與攤位介紹</a></li></ol><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://vos.line-scdn.net/landpress-content-v2_1761/1689497803877.png?updatedAt=1689497805000&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E5%89%8D%E8%A8%80&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E4%BB%8B%E7%B4%B9&quot;&gt;活動介紹&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E8%B3%87%E8%A8%8A&quot;&gt;活動資訊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E6%AD%B7%E5%8F%B2%E5%85%B8%E6%95%85&quot;&gt;活動歷史典故&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E6%B4%BB%E5%8B%95%E6%B5%81%E7%A8%8B&quot;&gt;活動流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/20/line-tech-fresh-graduation-2024/#%E7%B5%90%E8%AB%96&quot;&gt;結論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家好！我們是 LINE Developer Relations 團隊，很高興向大家介紹一個特別的活動——&lt;strong&gt;2024 年 6 月 18 日&lt;/strong&gt;舉行的 &lt;strong&gt;TECH FRESH 畢業分享會&lt;/strong&gt;。去年我們首次開放對外的分享會，現場引起了取多迴響，我們在這個活動上學到了很多，因此希望透過今年的舉辦，能與更多同學分享我們 LINE TECH FRESH 的成長和收穫。&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="TECH FRESH" scheme="https://nijialin.com/tags/TECH-FRESH/"/>
    
    <category term="Hiring" scheme="https://nijialin.com/tags/Hiring/"/>
    
  </entry>
  
  <entry>
    <title>在 Cloud Functions 上部署有 Open Data 功能的 LINE Bot | 摘要王, 天氣, 紅外線</title>
    <link href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/"/>
    <id>https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/</id>
    <published>2024-05-03T12:50:07.000Z</published>
    <updated>2024-06-27T10:02:23.128Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><ul><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#line-bot--gemini-pro-%E8%A8%AD%E5%AE%9A%E7%B4%B0%E7%AF%80%E8%AB%8B%E5%8F%83%E8%80%83-%E6%97%85%E8%A1%8C%E5%B0%8F%E5%B9%AB%E6%89%8B-line-bot-%E6%96%87%E7%AB%A0">LINE Bot &amp; Gemini Pro 設定細節請參考: 旅行小幫手 LINE Bot 文章</a><ul><li><a href="#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99">事前準備</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E9%97%9C%E6%96%BC-gemini-api-price">關於 Gemini API Price</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E6%B5%81%E7%A8%8B%E5%9C%96">流程圖</a></li></ul></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E4%BB%8B%E7%B4%B9">介紹</a><ul><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E8%A9%A6%E9%A1%8C%E7%AF%84%E4%BE%8B%E7%82%BA%E5%88%97%E5%87%BA%E4%BA%94%E5%80%8B%E9%A0%85%E7%9B%AE%E4%BF%AE%E6%94%B9-prompt-%E6%89%BE%E5%87%BA%E7%BE%A4%E7%B5%84%E7%9A%84%E5%A4%A7%E5%AE%B6%E6%9C%80%E8%BF%91%E9%97%9C%E6%B3%A8%E7%9A%84%E4%BA%8B%E9%A0%85">試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項</a></li></ul></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E5%A2%9E%E5%8A%A0%E5%A4%A9%E6%B0%A3-open-data-%E5%8A%9F%E8%83%BD">增加天氣 Open Data 功能</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E8%A1%9B%E6%98%9F%E9%9B%B2%E5%9C%96---%E6%98%AF%E5%90%A6%E6%9C%89%E9%9B%B2%E5%B1%A4">衛星雲圖 - 是否有雲層</a></li><li><a href="https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E6%B4%BB%E5%8B%95%E5%B0%8F%E7%B5%90">活動小結</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此篇文章為延續與政治大學 &amp; 臺北大學 GDSC 工作坊的文章，如果對於整合 LINE 官方帳號的相關資訊，可以參考本篇喔！</p><span id="more"></span><ul><li><a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">[BwAI workshop][Golang] LINE OA + CloudFunction + GeminiPro + Firebase &#x3D; 旅行小幫手 LINE 聊天機器人(1)： 景色辨識小幫手</a></li><li><a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop2/">[BwAI workshop][Golang] LINE OA + CloudFunction + GeminiPro + Firebase &#x3D; 旅行小幫手 LINE 聊天機器人(2)： Firebase Database 讓 LINEBot 有個超長記憶</a></li><li><a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop3/">[BwAI workshop][Golang] LINE OA + CloudFunction + GeminiPro + Firebase &#x3D; 旅行小幫手 LINE 聊天機器人(3)： 導入「名片小幫手」跟「收據小幫手」</a></li></ul><h1 id="LINE-Bot-amp-Gemini-Pro-設定細節請參考-旅行小幫手-LINE-Bot-文章"><a href="#LINE-Bot-amp-Gemini-Pro-設定細節請參考-旅行小幫手-LINE-Bot-文章" class="headerlink" title="LINE Bot &amp; Gemini Pro 設定細節請參考: 旅行小幫手 LINE Bot 文章"></a>LINE Bot &amp; Gemini Pro 設定細節請參考: <a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">旅行小幫手 LINE Bot 文章</a></h1><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p><img src="https://nijialin.com/images/2024/gemini-workshop/image-20240410165104899.png"></p><ul><li><a href="https://developers.line.biz/en/">LINE Developer Account</a>: 你只需要有 LINE 帳號就可以申請開發者帳號</li><li><a href="https://cloud.google.com/run?hl=zh-TW">Google Cloud Run</a>： Python 程式碼的部署平台，生成供 LINE Bot 使用的 webhook URL</li><li><a href="https://firebase.google.com/">Firebase</a>：建立 Realtime database，LINE Bot 可以記得你之前的對話，甚至可以回答許多有趣的問題</li><li><a href="https://aistudio.google.com/app/prompts/new_chat">Google AI Studio</a>: 可以透過這裡取得 Gemini Key</li><li>GitHub: Clone 專案部署的地方 - <a href="https://github.com/louis70109/linebot-summarize-cloud-functions-gemini">linebot-gemini-summarize</a></li></ul><h2 id="關於-Gemini-API-Price"><a href="#關於-Gemini-API-Price" class="headerlink" title="關於 Gemini API Price"></a>關於 Gemini API Price</h2><p>根據官方網站： <a href="https://ai.google.dev/pricing?hl=zh-tw">https://ai.google.dev/pricing?hl=zh-tw</a></p><p><img src="https://nijialin.com/images/2024/gemini-workshop/image-20240412195805278.png"></p><blockquote><p>細節請參考: <a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">旅行小幫手 LINE Bot 文章</a></p></blockquote><h2 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> ┌─┐</span><br><span class="line"> ║<span class="string">&quot;│</span></span><br><span class="line"> └┬┘</span><br><span class="line"> ┌┼┐</span><br><span class="line">  │            ┌─────┐          ┌──────────────┐               ┌────────┐          ┌──────┐</span><br><span class="line"> ┌┴┐           │Group│          │Webhook_Server│               │Firebase│          │Gemini│</span><br><span class="line">User           └─────┘          └──────┬───────┘               └────────┘          └──────┘</span><br><span class="line"> │    傳送文章訊息  │                    │                           │                  │</span><br><span class="line"> │ ──────────────&gt;│                    │                           │                  │</span><br><span class="line"> │                │     傳送用戶指令     │                           │                  │</span><br><span class="line"> │                │───────────────────&gt;│                           │                  │</span><br><span class="line"> │                │                    │   儲存聊天狀態在 Realtime DB│                  │</span><br><span class="line"> │                │                    │ ────────────────────────&gt; <span class="string">|                 │</span></span><br><span class="line"> │                │                    │           儲存完畢         │                  │</span><br><span class="line"> │                │                    │ &lt;──────────────────────── <span class="string">|                  │</span></span><br><span class="line"> │                │    回傳已完成文字    │                           │                  │</span><br><span class="line"> │                │&lt;───────────────────│                           │                  │</span><br><span class="line"> │   輸入 <span class="string">&quot;!摘要&quot;</span>  │                    │                           │                  │</span><br><span class="line"> │ ──────────────&gt;│                    │                           │                  │</span><br><span class="line"> │                │     傳送用戶指令     │                           │                  │</span><br><span class="line"> │                │───────────────────&gt;│                           │                  │</span><br><span class="line"> │                │                    │          抓取聊天記錄       │                  │</span><br><span class="line"> │                │                    │ ────────────────────────&gt; <span class="string">|                  │</span></span><br><span class="line"> │                │                    │           回傳清單         │                  │</span><br><span class="line"> │                │                    │ &lt;─────────────────────────<span class="string">|                  │</span></span><br><span class="line"> │                │                    │               下prompt 進行摘要運算            │</span><br><span class="line"> │                │                    │ ────────────────────────────────────────────&gt;<span class="string">|</span></span><br><span class="line"> │                │                    │                   回傳摘要清單                 │</span><br><span class="line"> │                │                    │ &lt;────────────────────────────────────────────<span class="string">|</span></span><br><span class="line"> │                │   回傳摘要資訊至群組  │                           │                  │</span><br><span class="line"> │                │&lt;───────────────────│                           │                  │</span><br><span class="line">User           ┌─────┐          ┌──────┴───────┐               ┌────────┐          ┌──────┐</span><br><span class="line"> ┌─┐           │Group│          │Webhook_Server│               │Firebase│          │Gemini│</span><br><span class="line"> ║<span class="string">&quot;│           └─────┘          └──────────────┘               └────────┘          └──────┘</span></span><br><span class="line"> └┬┘</span><br><span class="line"> ┌┼┐</span><br><span class="line">  │</span><br><span class="line"> ┌┴┐</span><br></pre></td></tr></table></figure><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><ol><li>首先到 GitHub 上 <a href="https://github.com/louis70109/linebot-summarize-cloud-functions-gemini">linebot-summarize-cloud-functions-gemini</a></li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/1.png"></p><ol start="2"><li>將 Code 轉貼到 Cloud Functions 上的介面，這邊使用 1st Gen || 2nd Gen 都不影響，如果有舊的也可以複製一個 functions 出來<ol><li>Function name 小雷：如果先建立了一個 <code>function-1</code> 的，然後砍掉之後，再建立一個名字一樣 <code>function-1</code> 的，LINE bot 這邊會打不到新的 webhook</li></ol></li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/2.png"></p><ol start="3"><li>加入以下的環境變數，並放上對應的參數，如果有找不到的 Key，請參考過往的系列文<ol><li>需要注意：因為使用 Python 關係，且之後圖片判斷功能，因此 Memory 會需要設定 <code>1GB</code></li></ol></li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ChannelSecret</span><br><span class="line">ChannelAccessToken</span><br><span class="line">GOOGLE<span class="emphasis">_GEMINI_API_KEY</span></span><br><span class="line"><span class="emphasis">FIREBASE_</span>URL</span><br></pre></td></tr></table></figure><p><img src="https://nijialin.com/images/2024/gemini-workshop/3.png"></p><ol start="4"><li>來到 GitHub 專案 <a href="https://github.com/louis70109/linebot-summarize-cloud-functions-gemini">linebot-gemini-summarize</a> 的 main.py，點選畫面上的按鈕複製程式碼</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/4.png"></p><ol start="5"><li>轉貼到 Cloud Functions 上，需要注意的地方是，預設為 JavaScript，因此這邊要先選擇 <code>Python 3.11</code>，接著<strong>進入點</strong>需要換成 <code>linebot</code>，main.py 以及 requirements.txt 裡面的內容都需要置換，後續才能部署</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/5.png"></p><ol start="6"><li>在 build 的過程，找到觸發網址的地方，將他複製起來</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/6.png"></p><ol start="7"><li>複製到 LINE Developer Console 的 webhook 地方，不用加任何的 sub-path</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/7.png"></p><ol start="8"><li>接著可以來到<a href="https://today.line.me/tw/v3/tab"> LINE TODAY </a>當中，假設現在有個爬蟲想做，模擬抓下來的動作，選擇自己喜歡的分類貼上，測試一樣 Gemini Pro 是否有通</li></ol><h2 id="試題：範例為列出五個項目，修改-prompt-找出群組的大家最近關注的事項"><a href="#試題：範例為列出五個項目，修改-prompt-找出群組的大家最近關注的事項" class="headerlink" title="試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項"></a>試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項</h2><p>假設你是一位喜歡音樂的人，但今天想關注籃球圈的群組，你會怎麼請 AI Bot 幫忙呢？試試看把 prompt 改掉吧！</p><h1 id="增加天氣-Open-Data-功能"><a href="#增加天氣-Open-Data-功能" class="headerlink" title="增加天氣 Open Data 功能"></a>增加天氣 Open Data 功能</h1><blockquote><p>這部分範例參考 - <a href="https://nijialin.com/2024/04/30/line-bot-cloudfunction-firebase-gemini-workshop-weather/">在 Cloud Run 上部署有 Open Data 功能的 LINE Bot | 摘要王, 天氣, 紅外線</a> 文章上的內容</p></blockquote><p><a href="https://gist.github.com/louis70109/d165be10be06d71708804e89410c969e">範例 code 在此</a>，這邊需要準備的部分:</p><ul><li>要到中央氣象局申請 API Key (<code>需要註冊</code>且拿到<code>授權碼</code>)<ul><li>天氣 Open Data json 下載位置：<a href="https://opendata.cwa.gov.tw/dataset/forecast/F-A0010-001">https://opendata.cwa.gov.tw/dataset/forecast/F-A0010-001</a></li><li>API 位置：<a href="https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-C0032-001">https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-C0032-001</a></li></ul></li><li>requirements.txt 裡面的套件需要加入 requests</li><li>將 API Key 放入環境變數 <code>OPEN_API</code> 當中</li><li>將相關的 code 貼上</li><li>在 Chatbot 中加入判斷式測試</li><li>再次部署 Cloud Functions</li></ul><blockquote><p><a href="https://github.com/louis70109/skatepark-CCTV-line/blob/main/main.py#L113">參考作法</a></p></blockquote><script src="https://gist.github.com/louis70109/d165be10be06d71708804e89410c969e.js"></script><h1 id="衛星雲圖-是否有雲層"><a href="#衛星雲圖-是否有雲層" class="headerlink" title="衛星雲圖 - 是否有雲層"></a>衛星雲圖 - 是否有雲層</h1><p><img src="https://nijialin.com/images/2024/gemini-workshop/cloud-on-taiwan.png"></p><p>有時候光看氣象根本不準，外面雨到底要不要下呢？ 請 Gemini vision 來幫忙看看台灣上方是否有大量雲層經過</p><ul><li>先天限制：兩個小時內會有圖片，當前時間的前十分鐘不會有照片<ul><li>ex: 當前是 14:30，14:20~14:30 都不會有照片</li><li>可以試著用時間套件+判斷式來檢測</li></ul></li></ul><blockquote><p>參考以下 code，請在專案中的 chatbot 判斷式中加入程式 &amp;套件放入 <code>requirements.txt</code>:</p></blockquote><script src="https://gist.github.com/louis70109/696d064f3d40a676d6326e921c20843e.js"></script><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E5%89%8D%E8%A8%80&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#line-bot--gemini-pro-%E8%A8%AD%E5%AE%9A%E7%B4%B0%E7%AF%80%E8%AB%8B%E5%8F%83%E8%80%83-%E6%97%85%E8%A1%8C%E5%B0%8F%E5%B9%AB%E6%89%8B-line-bot-%E6%96%87%E7%AB%A0&quot;&gt;LINE Bot &amp;amp; Gemini Pro 設定細節請參考: 旅行小幫手 LINE Bot 文章&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99&quot;&gt;事前準備&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E9%97%9C%E6%96%BC-gemini-api-price&quot;&gt;關於 Gemini API Price&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E6%B5%81%E7%A8%8B%E5%9C%96&quot;&gt;流程圖&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E4%BB%8B%E7%B4%B9&quot;&gt;介紹&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E8%A9%A6%E9%A1%8C%E7%AF%84%E4%BE%8B%E7%82%BA%E5%88%97%E5%87%BA%E4%BA%94%E5%80%8B%E9%A0%85%E7%9B%AE%E4%BF%AE%E6%94%B9-prompt-%E6%89%BE%E5%87%BA%E7%BE%A4%E7%B5%84%E7%9A%84%E5%A4%A7%E5%AE%B6%E6%9C%80%E8%BF%91%E9%97%9C%E6%B3%A8%E7%9A%84%E4%BA%8B%E9%A0%85&quot;&gt;試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E5%A2%9E%E5%8A%A0%E5%A4%A9%E6%B0%A3-open-data-%E5%8A%9F%E8%83%BD&quot;&gt;增加天氣 Open Data 功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E8%A1%9B%E6%98%9F%E9%9B%B2%E5%9C%96---%E6%98%AF%E5%90%A6%E6%9C%89%E9%9B%B2%E5%B1%A4&quot;&gt;衛星雲圖 - 是否有雲層&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nijialin.com/2024/05/03/line-bot-cloud-functions-workshop/#%E6%B4%BB%E5%8B%95%E5%B0%8F%E7%B5%90&quot;&gt;活動小結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;此篇文章為延續與政治大學 &amp;amp; 臺北大學 GDSC 工作坊的文章，如果對於整合 LINE 官方帳號的相關資訊，可以參考本篇喔！&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Serverless" scheme="https://nijialin.com/tags/Serverless/"/>
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Cloud Function" scheme="https://nijialin.com/tags/Cloud-Function/"/>
    
  </entry>
  
  <entry>
    <title>在 Cloud Run 上部署有 Open Data 功能的 LINE Bot | 摘要王, 天氣, 紅外線</title>
    <link href="https://nijialin.com/2024/04/30/line-bot-cloudrun-firebase-gemini-workshop-weather/"/>
    <id>https://nijialin.com/2024/04/30/line-bot-cloudrun-firebase-gemini-workshop-weather/</id>
    <published>2024-04-30T18:13:37.000Z</published>
    <updated>2024-06-27T10:02:23.128Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此為 Cloud Run + Firebase + Gemini 工作坊中的操作文，如果有興趣針對有記憶能力的 LINE Bot 以及整合各方 Open Data 歡迎參考以下的內容</p><span id="more"></span><h1 id="LINE-Bot-amp-Gemini-Pro-設定細節請參考-旅行小幫手-LINE-Bot-文章"><a href="#LINE-Bot-amp-Gemini-Pro-設定細節請參考-旅行小幫手-LINE-Bot-文章" class="headerlink" title="LINE Bot &amp; Gemini Pro 設定細節請參考: 旅行小幫手 LINE Bot 文章"></a>LINE Bot &amp; Gemini Pro 設定細節請參考: <a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">旅行小幫手 LINE Bot 文章</a></h1><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p><img src="https://nijialin.com/images/2024/gemini-workshop/image-20240410165104899.png"></p><ul><li><a href="https://developers.line.biz/en/">LINE Developer Account</a>: 你只需要有 LINE 帳號就可以申請開發者帳號</li><li><a href="https://cloud.google.com/run?hl=zh-TW">Google Cloud Run</a>： Python 程式碼的部署平台，生成供 LINE Bot 使用的 webhook URL</li><li><a href="https://firebase.google.com/">Firebase</a>：建立 Realtime database，LINE Bot 可以記得你之前的對話，甚至可以回答許多有趣的問題</li><li><a href="https://aistudio.google.com/app/prompts/new_chat">Google AI Studio</a>: 可以透過這裡取得 Gemini Key</li><li>GitHub: Clone 專案部署的地方 - <a href="https://github.com/louis70109/linebot-gemini-summarize">linebot-gemini-summarize</a></li></ul><h2 id="關於-Gemini-API-Price"><a href="#關於-Gemini-API-Price" class="headerlink" title="關於 Gemini API Price"></a>關於 Gemini API Price</h2><p>根據官方網站： <a href="https://ai.google.dev/pricing?hl=zh-tw">https://ai.google.dev/pricing?hl=zh-tw</a></p><p><img src="https://nijialin.com/images/2024/gemini-workshop/image-20240412195805278.png"></p><blockquote><p>細節請參考: <a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop/">旅行小幫手 LINE Bot 文章</a></p></blockquote><h2 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> ┌─┐</span><br><span class="line"> ║<span class="string">&quot;│</span></span><br><span class="line"> └┬┘</span><br><span class="line"> ┌┼┐</span><br><span class="line">  │            ┌─────┐          ┌──────────────┐               ┌────────┐          ┌──────┐</span><br><span class="line"> ┌┴┐           │Group│          │Webhook_Server│               │Firebase│          │Gemini│</span><br><span class="line">User           └─────┘          └──────┬───────┘               └────────┘          └──────┘</span><br><span class="line"> │    傳送文章訊息  │                    │                           │                  │</span><br><span class="line"> │ ──────────────&gt;│                    │                           │                  │</span><br><span class="line"> │                │     傳送用戶指令     │                           │                  │</span><br><span class="line"> │                │───────────────────&gt;│                           │                  │</span><br><span class="line"> │                │                    │   儲存聊天狀態在 Realtime DB│                  │</span><br><span class="line"> │                │                    │ ────────────────────────&gt; <span class="string">|                 │</span></span><br><span class="line"> │                │                    │           儲存完畢         │                  │</span><br><span class="line"> │                │                    │ &lt;──────────────────────── <span class="string">|                  │</span></span><br><span class="line"> │                │    回傳已完成文字    │                           │                  │</span><br><span class="line"> │                │&lt;───────────────────│                           │                  │</span><br><span class="line"> │   輸入 <span class="string">&quot;!摘要&quot;</span>  │                    │                           │                  │</span><br><span class="line"> │ ──────────────&gt;│                    │                           │                  │</span><br><span class="line"> │                │     傳送用戶指令     │                           │                  │</span><br><span class="line"> │                │───────────────────&gt;│                           │                  │</span><br><span class="line"> │                │                    │          抓取聊天記錄       │                  │</span><br><span class="line"> │                │                    │ ────────────────────────&gt; <span class="string">|                  │</span></span><br><span class="line"> │                │                    │           回傳清單         │                  │</span><br><span class="line"> │                │                    │ &lt;─────────────────────────<span class="string">|                  │</span></span><br><span class="line"> │                │                    │               下prompt 進行摘要運算            │</span><br><span class="line"> │                │                    │ ────────────────────────────────────────────&gt;<span class="string">|</span></span><br><span class="line"> │                │                    │                   回傳摘要清單                 │</span><br><span class="line"> │                │                    │ &lt;────────────────────────────────────────────<span class="string">|</span></span><br><span class="line"> │                │   回傳摘要資訊至群組  │                           │                  │</span><br><span class="line"> │                │&lt;───────────────────│                           │                  │</span><br><span class="line">User           ┌─────┐          ┌──────┴───────┐               ┌────────┐          ┌──────┐</span><br><span class="line"> ┌─┐           │Group│          │Webhook_Server│               │Firebase│          │Gemini│</span><br><span class="line"> ║<span class="string">&quot;│           └─────┘          └──────────────┘               └────────┘          └──────┘</span></span><br><span class="line"> └┬┘</span><br><span class="line"> ┌┼┐</span><br><span class="line">  │</span><br><span class="line"> ┌┴┐</span><br></pre></td></tr></table></figure><h1 id="先部署-從-Cloud-Run-介面來連結-GitHub-持續部署"><a href="#先部署-從-Cloud-Run-介面來連結-GitHub-持續部署" class="headerlink" title="先部署 - 從 Cloud Run 介面來連結 GitHub 持續部署"></a>先部署 - 從 Cloud Run 介面來連結 GitHub 持續部署</h1><ol><li>首先先 fork 專案 - <a href="https://github.com/louis70109/linebot-gemini-summarize">linebot-gemini-summarize</a>，方便後續操作</li><li>接著到 <a href="https://console.cloud.google.com/run?referrer=search&hl=zh-tw">Cloud Run 首頁</a>，點選上方的<code>建立服務</code></li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/select.jpeg"></p><ol start="3"><li>選擇外部資源(GitHub)，從專案中來偵測部署，此步驟後續會連動 GitHub</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/detail.jpeg"></p><ol start="4"><li>此步驟需要確保<code>認證</code>以及<code>Ingress control</code> 的部分，因為從 LINE 伺服器打來的流量對 Google Cloud 來說都是外來的，因此需要確定選項</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/env_setting.png"></p><ol start="5"><li>在部署之前，需要先設定環境變數，避免後續部署失敗；把該放入的環境變數放入<ol><li>環境變數清單請看 <a href="https://github.com/louis70109/linebot-gemini-summarize/blob/main/.env.sample">GitHub URL</a></li><li>LINE bot &#x2F; GEMINI pro &#x2F; Firebase 的取得詳細請往前看 <code>事前準備</code></li><li>API_ENV 需要為 <code>production</code>，否則會找 .env 檔案位置</li></ol></li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/github_ci.jpeg"></p><ol start="6"><li>在部署的同時可以到 GitHub 專案上看看部署的連動狀態，如此一來只要 GitHub 專案只要有更改，就會自動部署過去 Cloud Run</li></ol><p><img src="https://nijialin.com/images/2024/gemini-workshop/complete.jpeg"></p><p>完成之後就可以在 Cloud Run 介面上看到 Container 建立完成也部署上去</p><h1 id="摘要王-v2"><a href="#摘要王-v2" class="headerlink" title="摘要王 v2"></a>摘要王 v2</h1><p>在 2022 年底，Evan 寫了一篇如何透過 ChatGPT + LINE Bot 的<a href="https://engineering.linecorp.com/zh-hant/blog/linebot-chatgpt">群組摘要王文章</a>，如今用 Gemini Pro 再做一次效果也會差不多，當時的作法是用 Golang 的 queue 方式去處理，以下介紹另一個作法 - 用 Firebase 當作對話 session 的儲存位置，實現記憶這件事</p><p><a href="https://line-tw-official.weblog.to/archives/25515573.html">2023&#x2F;11&#x2F;06 訊息摘要功能上線！用 AI 總結社群聊天室訊息！</a></p><p>這次做的摘要王主要用以下技術，設定細節請參考「<a href="https://www.evanlin.com/linebot-cloudfunc-firebase-gemini-workshop2/">LINE OA + CloudFunction + GeminiPro + Firebase &#x3D; 旅行小幫手 LINE 聊天機器人(2)： Firebase Database 讓 LINEBot 有個超長記憶</a>」：</p><ul><li>Firebase<ul><li>儲存對話歷史</li></ul></li><li>Gemini Pro<ul><li>透過 Firebase 的歷史對話，協助判斷</li></ul></li><li>以下選填<ul><li>Cloud Run: 部署用</li><li>Python: 快速開發</li></ul></li></ul><p>接著建立一個群組，並將剛剛建立的官方帳號邀請進去，此步驟需要到 LINE Dev Console 設定，否則會邀請不進去。</p><p>邀請進去後，群組內從 <a href="https://today.line.me/tw/v3/tab">LINE TODAY</a> 中抓取新聞片段貼貼至群組中，接著打上 <code>!摘要</code> 讓 LINE Bot 幫你整理！</p><blockquote><p>摘要王 v2 - <a href="https://github.com/louis70109/linebot-gemini-summarize/blob/main/main.py#L115">Sample code</a><br>試題：範例為列出五個項目，修改 prompt 找出群組的大家最近關注的事項</p></blockquote><h3 id="結果截圖"><a href="#結果截圖" class="headerlink" title="結果截圖"></a>結果截圖</h3><p><img src="https://nijialin.com/images/2024/gemini-workshop/result.jpg"></p><h1 id="整合天氣模組"><a href="#整合天氣模組" class="headerlink" title="整合天氣模組"></a>整合天氣模組</h1><ul><li>天氣 Open Data json 下載位置：<a href="https://opendata.cwa.gov.tw/dataset/forecast/F-A0010-001">https://opendata.cwa.gov.tw/dataset/forecast/F-A0010-001</a></li><li>API 位置：<a href="https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-C0032-001">https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-C0032-001</a></li><li><code>需要註冊</code>且拿到<code>授權碼</code></li></ul><blockquote><p>請在專案中的 chatbot 判斷式中加入程式 &amp; 套件放入 requirements.txt<br>抓取天氣 API 的 <a href="https://github.com/louis70109/skatepark-CCTV-line/blob/main/utils/weather.py#L7">Python code</a></p></blockquote><h2 id="衛星雲圖-是否有雲層"><a href="#衛星雲圖-是否有雲層" class="headerlink" title="衛星雲圖 - 是否有雲層"></a>衛星雲圖 - 是否有雲層</h2><p><img src="https://nijialin.com/images/2024/gemini-workshop/cloud-on-taiwan.png"></p><p>有時候光看氣象根本不準，外面雨到底要不要下呢？ 請 Gemini vision 來幫忙看看台灣上方是否有大量雲層經過</p><ul><li>先天限制：兩個小時內會有圖片，當前時間的前十分鐘不會有照片<ul><li>ex: 當前是 14:30，14:20~14:30 都不會有照片</li><li>可以試著用時間套件+判斷式來檢測</li></ul></li></ul><blockquote><p>參考以下 code，請在專案中的 chatbot 判斷式中加入程式 &amp;套件放入 <code>requirements.txt</code>:</p></blockquote><script src="https://gist.github.com/louis70109/696d064f3d40a676d6326e921c20843e.js"></script><h2 id="地板是否為濕的？-Extra，需要透過爬蟲抓取-CCTV-影像"><a href="#地板是否為濕的？-Extra，需要透過爬蟲抓取-CCTV-影像" class="headerlink" title="地板是否為濕的？ (Extra，需要透過爬蟲抓取 CCTV 影像)"></a>地板是否為濕的？ (Extra，需要透過爬蟲抓取 CCTV 影像)</h2><p>如果你有常常需要外出的活動(跑步、滑板、打球…etc)，在台北經常需要確認天氣，除了看中央氣象局，可以透過 Gemini Vision 當作 OCR 用，判斷地板是不是濕的</p><blockquote><p><a href="https://github.com/louis70109/skatepark-CCTV-line/blob/main/utils/common.py#L30">SkatePark code</a></p></blockquote><blockquote><p>以下的 code 的網址為範例，可以抓任何網址為 <code>.jpg</code> 結尾的丟進去試試看。<br>請在專案中的 chatbot 判斷式中加入程式 &amp; 套件放入 requirements.txt</p></blockquote><script src="https://gist.github.com/louis70109/1c8f104eae54a3bcb23aad2347211064.js"></script><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新消息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;此為 Cloud Run + Firebase + Gemini 工作坊中的操作文，如果有興趣針對有記憶能力的 LINE Bot 以及整合各方 Open Data 歡迎參考以下的內容&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
    <category term="Open Data" scheme="https://nijialin.com/tags/Open-Data/"/>
    
  </entry>
  
  <entry>
    <title>日常快捷鍵 &amp; 小工具分享 | 沉浸翻譯, 切割視窗</title>
    <link href="https://nijialin.com/2024/04/18/upgrade-your-working/"/>
    <id>https://nijialin.com/2024/04/18/upgrade-your-working/</id>
    <published>2024-04-18T11:58:23.000Z</published>
    <updated>2024-06-27T10:02:23.136Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作為一位需要在電腦前面待上 8 小時以上的現代人，很多時候都需要花很多時間消化日常的資訊，以下快速分享近期經常使用的快捷鍵跟小工具，加速我日常作業的時間，把時間花在其他更有興趣的地方～</p><span id="more"></span><h1 id="日常快捷鍵"><a href="#日常快捷鍵" class="headerlink" title="日常快捷鍵"></a>日常快捷鍵</h1><p>以下這幾個快捷鍵基本上在<code>網頁</code>&amp;<code>編輯器</code>通常都共用，記下來練習下有助於日常工作</p><ul><li><code>CMD+W</code>: 關閉當前視窗</li><li><code>CMD+T</code>: 開新分頁</li><li><code>CMD+K</code>: attach url</li><li><code>CMD+L</code>: 跳至網址列並全選，通常會搭配 CMD+C，也可搭配後文的 Manico</li><li><code>CMD+SHIFT+[</code>: 往左，<code>]</code> 往右</li><li><code>CMD+P</code>: 列印，office 也共用</li><li><code>CMD+Q</code>: 關閉當前應用程式，緊急用</li></ul><p>因為使用了 HHKB，其中他的 Control 的位置跟一般鍵盤比較不同，但因為工作需要拿著電腦到處跑，因此我也把 Mac 的 Control 改到 caps 位置，換語言轉用 <code>control+空白鍵</code>，如此一來就比較少在切換語系時轉不太過去，導致無意間惱怒 caps 的功能 🤣</p><blockquote><p><a href="https://nijialin.com/2022/08/20/why-you-need-hhkb/">【HHKB】為什麼要它？怎麼在二手市集挑？</a></p></blockquote><h1 id="利用-Edge-的分隔畫面"><a href="#利用-Edge-的分隔畫面" class="headerlink" title="利用 Edge 的分隔畫面"></a>利用 Edge 的分隔畫面</h1><p><img src="https://nijialin.com/images/2024/working/split.png"></p><p>很多時候需要比對文件、翻譯結果、Code Review…etc，都需要切割視窗來輔助，這時候就可以直接用 Edge 內建的功能使用，方便又快速</p><h1 id="Manico-設定自己的快捷建"><a href="#Manico-設定自己的快捷建" class="headerlink" title="Manico - 設定自己的快捷建"></a><a href="https://apps.apple.com/tw/app/manico/id724472954?mt=12">Manico</a> - 設定自己的快捷建</h1><p><a href="https://apps.apple.com/tw/app/manico/id724472954?mt=12">Manico</a> 是一個 MacOS 的工具，專門來制定客製化的快捷鍵，像我都習慣使用左邊鍵盤的組合鍵來搭配，也配合 CMD+C CMD+V 這樣的手法用，這樣找個操作直覺比較一致</p><h1 id="沉浸翻譯-Chrome-套件"><a href="#沉浸翻譯-Chrome-套件" class="headerlink" title="沉浸翻譯 - Chrome 套件"></a><a href="https://chromewebstore.google.com/detail/%E6%B2%88%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AD%AF-%E7%B6%B2%E9%A0%81%E7%BF%BB%E8%AD%AF%E6%93%B4%E5%85%85-pdf%E7%BF%BB%E8%AD%AF-%E5%85%8D%E8%B2%BB/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-TW">沉浸翻譯</a> - Chrome 套件</h1><p><img src="https://nijialin.com/images/2024/working/translate.png"></p><p>不論是專案管理或擔任工程師，經常都需要看各種英文文件，或是各國語系的東西，過去都需要費工複製起來貼在 Google 翻譯，這時候可以使用 Chrome 套件 - <a href="https://chromewebstore.google.com/detail/%E6%B2%88%E6%B5%B8%E5%BC%8F%E7%BF%BB%E8%AD%AF-%E7%B6%B2%E9%A0%81%E7%BF%BB%E8%AD%AF%E6%93%B4%E5%85%85-pdf%E7%BF%BB%E8%AD%AF-%E5%85%8D%E8%B2%BB/bpoadfkcbjbfhfodiogcnhhhpibjhbnh?hl=zh-TW">沉浸翻譯</a> 來把頁面上的內容全部翻譯，不論現在是什麼語系都可以快速翻譯，幫助日常作業可以更快理解裡面內容，當然若想要翻譯更精準，裡面也可以放入各家 AI 或企業版的功能喔！</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;作為一位需要在電腦前面待上 8 小時以上的現代人，很多時候都需要花很多時間消化日常的資訊，以下快速分享近期經常使用的快捷鍵跟小工具，加速我日常作業的時間，把時間花在其他更有興趣的地方～&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="Manico" scheme="https://nijialin.com/tags/Manico/"/>
    
    <category term="Chrome" scheme="https://nijialin.com/tags/Chrome/"/>
    
    <category term="翻譯" scheme="https://nijialin.com/tags/%E7%BF%BB%E8%AD%AF/"/>
    
  </entry>
  
  <entry>
    <title>幫 LINE Bot 加點回覆動畫魔法：Loading Animation 功能解析</title>
    <link href="https://nijialin.com/2024/04/18/line-bot-loading-animation-python/"/>
    <id>https://nijialin.com/2024/04/18/line-bot-loading-animation-python/</id>
    <published>2024-04-18T11:32:12.000Z</published>
    <updated>2024-06-27T10:02:23.128Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://developers.line.biz/assets/img/loading-animation.7aad3d6c.gif"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大家好！今天我們要聊聊 LINE Bot 最近更新的一個超酷炫的功能——Loading Animation。對於那些經常與 LINE 官方帳號互動的朋友來說，這一定是個期待已久的更新！</p><p>想象一下，當你向一個 LINE Bot 發送訊息，等待回應的時候，畫面上出現一個動畫效果，在視覺上告訴用戶 “訊息處理中，請稍等片刻”，是不是感覺整個用戶體驗都提升了呢？接下來來仔細看看這個功能的細節和如何實現它。</p><span id="more"></span><h1 id="為什麼需要-Loading-Animation？"><a href="#為什麼需要-Loading-Animation？" class="headerlink" title="為什麼需要 Loading Animation？"></a>為什麼需要 Loading Animation？</h1><p>在過去，當用戶向 LINE Bot 發送訊息後，可能需要等待一段時間才能收到回應。這段等待時間可能是因為後端正在處理複雜的查詢(或是搭配各種生成式 AI)。在這個等待過程中，用戶端缺乏足夠的回饋，可能會讓人感到焦慮或不確定是否需要重新發送訊息。</p><p>有了 Loading Animation，我們可以在這個等待時間內給用戶一個明確的視覺回饋，讓他們知道系統正在處理中，增強用戶等待時的體驗。</p><h1 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h1><p>根據<a href="https://developers.line.biz/en/news/2024/04/17/loading-indicator/">2024 年 4 月 17 日發布的新聞</a>，Messaging API 新增了一個 endpoint，允許開發者在用戶與 LINE 官方帳號互動時顯示 Loading Animation。這個動畫會在<strong>指定的秒數</strong>後自動消失，或者當你的 LINE 官方帳號<strong>發送了一則新訊息時消失</strong>。</p><blockquote><p>要使用這個功能，你需要確保用戶的 LINE 版本至少為 iOS 或 Android 的 13.16.0 版或更高版本。</p></blockquote><h1 id="如何實現？"><a href="#如何實現？" class="headerlink" title="如何實現？"></a>如何實現？</h1><p>我們來看一個簡單的 Python 範例，展示如何在你的 LINE Bot 中實現這個功能。首先，確保你已經安裝了 LINE Messaging API 的 Python SDK，然後按照以下步驟操作：</p><ul><li>引入所需的模組和設定 LINE Bot 的 Access Token</li><li>建立一個 AsyncApiClient 以及 AsyncMessagingApi 的實例<ul><li>此為選項，依照使用 Python 框架調整</li></ul></li><li>使用 show_loading_animation 方法來顯示 loading animation，並指定要顯示的秒數</li></ul><blockquote><p>參考官方的文件：<a href="https://github.com/line/line-bot-sdk-python/pull/622/files#diff-05cb5d307ecf35c70df85c3f7252bd9c90f6ec2155b743b26d7e4e4be019ed86">GitHub URL</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> linebot.v3.messaging <span class="keyword">import</span> ShowLoadingAnimationRequest</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">configuration = Configuration(</span><br><span class="line">    access_token=channel_access_token</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">async_api_client = AsyncApiClient(configuration)</span><br><span class="line">line_bot_api = AsyncMessagingApi(async_api_client)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> line_bot_api.show_loading_animation(ShowLoadingAnimationRequest(chatId=event.source.user_id, loadingSeconds=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>這個 Python 範例假設你已經有一個處理 LINE 訊息的程式，當 LINE Bot 接收到 webhook 訊息時，它會向用戶顯示一個持續 5 秒的 loading animation，<code>chatId</code> 則使用 <code>user_id</code> 為主。</p><blockquote><p>Loading 秒數需為 5 的倍數，目前最多 60 秒，預設為 20 秒 (<a href="https://developers.line.biz/en/reference/messaging-api/#display-a-loading-indicator-request-body">參考文件</a>)</p></blockquote><p>是不是很簡單呢？這個功能不僅可以提升用戶體驗，讓用戶在等待過程中感到更加舒適，也為你的 LINE Bot 增添了一點互動的趣味性。</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>想了解更多細節，別忘了查看<a href="https://developers.line.biz/en/reference/messaging-api/#display-a-loading-indicator">官方文檔</a>和<a href="https://github.com/line/line-bot-sdk-python/releases/tag/3.11.0">官方 SDK 的 release note</a>。這次的更新真的很酷，我們非常期待看到大家如何在自己的 LINE Bot 中利用這個新功能來創造出更棒的用戶體驗！</p><p>就這樣，希望這篇文章能夠幫助大家更好地理解和使用 LINE Bot 的 Loading Animation 功能！</p><h1 id="活動小結"><a href="#活動小結" class="headerlink" title="活動小結"></a>活動小結</h1><p>立即加入「LINE 開發者官方社群」官方帳號，就能收到第一手 Meetup 活動，或與開發者計畫有關的最新訊息的推播通知。▼</p><p>「LINE 開發者官方社群」官方帳號 ID：<a href="https://qr-official.line.me/gs/M_908lugfe_BW.png">@line_tw_dev</a></p><img src="https://qr-official.line.me/gs/M_908lugfe_BW.png" width="200" height="200"><h1 id="關於「LINE-開發社群計畫」"><a href="#關於「LINE-開發社群計畫」" class="headerlink" title="關於「LINE 開發社群計畫」"></a>關於「LINE 開發社群計畫」</h1><p>LINE 於 2019 年開始在台灣啟動「LINE 開發社群計畫」，將長期投入人力與資源在台灣舉辦對內對外、線上線下的開發者社群聚會、徵才日、開發者大會等，已經舉辦 30 場以上的活動。歡迎讀者們能夠持續回來查看最新的狀況。詳情請看:</p><ul><li><a href="https://engineering.linecorp.com/zh-hant/blog/2021-line-tw-devrel/">2021 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/2020-line-tw-devrel/">2020 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019-plan/">2019 年 LINE 開發社群計畫活動時程表</a></li><li><a href="https://engineering.linecorp.com/zh-hant/blog/line-taiwan-developer-relations-2019/">LINE Taiwan Developer Relations 2019 回顧與 2019 開發社群計畫報告</a></li></ul><style>  section.compact {    font-size: 150%    }  img[alt~="center"] {    display: block;    margin: 0 auto;  }</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://developers.line.biz/assets/img/loading-animation.7aad3d6c.gif&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大家好！今天我們要聊聊 LINE Bot 最近更新的一個超酷炫的功能——Loading Animation。對於那些經常與 LINE 官方帳號互動的朋友來說，這一定是個期待已久的更新！&lt;/p&gt;
&lt;p&gt;想象一下，當你向一個 LINE Bot 發送訊息，等待回應的時候，畫面上出現一個動畫效果，在視覺上告訴用戶 “訊息處理中，請稍等片刻”，是不是感覺整個用戶體驗都提升了呢？接下來來仔細看看這個功能的細節和如何實現它。&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="Animation" scheme="https://nijialin.com/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>處理 Cloud Run 上的 Error loading ASGI app. Could not import module &quot;main&quot;.</title>
    <link href="https://nijialin.com/2024/04/07/handle-cloud-run-traffic-docker-container/"/>
    <id>https://nijialin.com/2024/04/07/handle-cloud-run-traffic-docker-container/</id>
    <published>2024-04-07T14:25:38.000Z</published>
    <updated>2024-06-27T10:02:23.124Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這兩天在寫之後工作坊需要用到的範例 <a href="https://github.com/louis70109/linebot-gemini-summarize">linebot-gemini-summarize</a>，結果遇到部屬上去有問題，以下快速筆記這次遇到的一些蠢事，往後需要更細心點才行🤣</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p><img src="https://nijialin.com/images/2024/cloudrun-traffic/log.png"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ ✖ ] Failed deploying the application to Cloud Run.</span><br><span class="line"><span class="keyword">Error: </span>reason=HealthCheckContainerError message=Revision &#x27;linebot-gemini-summarize<span class="string">-00003</span>-pmn&#x27; is not ready and cannot serve traffic. The user-provided container failed to start and listen on the port defined provided by the PORT=8080 environment variable. Logs for this revision might contain more information.</span><br></pre></td></tr></table></figure><ol><li>看到 cloud run log 上出現：<code>Error loading ASGI app. Could not import module &quot;main&quot;.</code><ol><li>檢查後發現自己 <a href="https://github.com/louis70109/linebot-gemini-summarize/blob/main/Dockerfile#L5">linebot-gemini-summarize</a> 的 Dockerfile 少了 WORKDIR</li></ol></li><li>後來加上去後還是出了一樣問題，log上寫沒有 LINE_CHANNEL_ACCESS_TOKEN 環境變數<ol><li>這邊可以用 app.json 去處理部屬上的問題</li></ol></li></ol><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>按照記憶有幾個 side project 似乎有遇到這個問題，如果也有遇到部屬不上去 cloud run的地方，不妨先檢查一下 Dockerfile 喔！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;這兩天在寫之後工作坊需要用到的範例 &lt;a href=&quot;https://github.com/louis70109/linebot-gemini-summarize&quot;&gt;linebot-gemini-summarize&lt;/a&gt;，結果遇到部屬上去有問題，以下快速筆記這次遇到的一些蠢事，往後需要更細心點才行🤣&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="LINE Bot" scheme="https://nijialin.com/tags/LINE-Bot/"/>
    
    <category term="FastAPI" scheme="https://nijialin.com/tags/FastAPI/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
    <category term="Gemini" scheme="https://nijialin.com/tags/Gemini/"/>
    
  </entry>
  
  <entry>
    <title>如何建立 fly.toml 並快速佈署至 Fly.io</title>
    <link href="https://nijialin.com/2024/04/04/flyio-quick-deploy-your-service/"/>
    <id>https://nijialin.com/2024/04/04/flyio-quick-deploy-your-service/</id>
    <published>2024-04-04T02:16:57.000Z</published>
    <updated>2024-06-27T10:02:23.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>最近因為有些專案需要有 local Volume，但在 Serverless 上要用偏麻煩，除機器上的本身功能以外，還需要另外開 VM 讓 Container 能夠 mount volume，因此需要類似 Heroku、Fly.io 這類的 SaaS 的服務，可以用很少量的費用去使用到 Database&#x2F;Volume 的功能…</p><span id="more"></span><p>過往使用 Heroku 經驗也是會睡眠之後把記憶體(SQLite)內容清乾淨，因此上一篇「<a href="https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/">在 Fly.io 上架設 Uptime Kuma 監控 Side Project</a>」時策之後發現不會被清掉，因此就延續這邊來介紹使用</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有用過 Heroku, Google Cloud, Amazon…+本篇 Fly.io，在一體式與分離式的雲服務基本上都用過</p><ul><li>像是 Heroku &amp; Fly.io 就可以一包 code 直接上，連 Database&#x2F;NoSQL 都可以直接弄</li><li>GCP&#x2F;AWS 則是可以獨立操作想要的功能，需要時在整合，比較乾淨也不會一次佈署搞的霧煞煞</li></ul><p>那基本上就是依需求為主，個別有好處也有各自的 config 需要讀寫，但反正概念上都差不多，先學一套剩下的都好處理 💪</p><h1 id="操作步驟"><a href="#操作步驟" class="headerlink" title="操作步驟"></a>操作步驟</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>flyctl</span><br></pre></td></tr></table></figure><p>如果你已經有帳號的話</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fly auth login</span></span><br></pre></td></tr></table></figure><p>第一次還沒有 config 可以使用以下指令，透過 UI 的方式幫忙建立 Fly config</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fly <span class="built_in">launch</span></span><br></pre></td></tr></table></figure><p><img src="https://nijialin.com/images/2024/flyio/launch.png"></p><p>畫面上的東西確認後，會在專案下看到 fly.io 幫你建立的 fly.toml，範例如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fly.toml app configuration file generated for SERVICE_NAME on 2024-04-03T23:36:13+08:00</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See https://fly.io/docs/reference/configuration/ for information about how to use this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">app</span> = <span class="string">&#x27;SERVICE_NAME&#x27;</span></span><br><span class="line"><span class="attr">primary_region</span> = <span class="string">&#x27;sin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[env]</span></span><br><span class="line">  <span class="attr">LINE_CLIENT_ID</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">  <span class="attr">LINE_CLIENT_SECRET</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">  <span class="attr">LINE_REDIRECT_URI</span> = <span class="string">&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[http_service]</span></span><br><span class="line">  <span class="attr">internal_port</span> = <span class="number">8080</span></span><br><span class="line">  <span class="attr">force_https</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_stop_machines</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_start_machines</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">min_machines_running</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">processes</span> = [<span class="string">&#x27;app&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[[vm]]</span></span><br><span class="line">  <span class="attr">size</span> = <span class="string">&#x27;shared-cpu-1x&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第二次之後需要部屬："><a href="#第二次之後需要部屬：" class="headerlink" title="第二次之後需要部屬："></a>第二次之後需要部屬：</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fly deploy</span></span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">...</span></span><br><span class="line"><span class="bullet"></span>image size: 1.0 GB</span><br><span class="line"></span><br><span class="line">Watch your deployment at https://fly.io/apps/SERVICE_NAME/monitoring</span><br><span class="line"></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code">Updating existing machines in &#x27;SERVICE_NAME&#x27; with rolling strategy</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code"> ✔ [1/2] Machine 9080110f700387 [app] update succeeded</span></span><br><span class="line"><span class="code"> ✔ [2/2] Machine e784e52b270168 [app] update succeeded</span></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code">Checking DNS configuration for SERVICE_NAME.fly.dev</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">Visit your newly deployed app at https://SERVICE_NAME.fly.dev/</span></span><br></pre></td></tr></table></figure><h2 id="如果-RAM-第一次部屬開太大怎麼辦？"><a href="#如果-RAM-第一次部屬開太大怎麼辦？" class="headerlink" title="如果 RAM 第一次部屬開太大怎麼辦？"></a>如果 RAM 第一次部屬開太大怎麼辦？</h2><p>參閱文件：<a href="https://fly.io/docs/apps/scale-machine/#add-ram">https://fly.io/docs/apps/scale-machine/#add-ram</a></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fly <span class="built_in">scale</span> memory <span class="number">512</span></span><br><span class="line">fly <span class="built_in">scale</span> <span class="keyword">show</span></span><br></pre></td></tr></table></figure><h2 id="我換電腦沒有當初的-fly-toml-檔案怎辦？"><a href="#我換電腦沒有當初的-fly-toml-檔案怎辦？" class="headerlink" title="我換電腦沒有當初的 fly.toml 檔案怎辦？"></a>我換電腦沒有當初的 fly.toml 檔案怎辦？</h2><p>只要電腦現在終端機有透過 <code>fly auth sign</code> 登入，接下來只要把專案 clone 下來，確定 <code>fly.toml</code> 裡面的 app 後面的名字一樣，進到終端機就可以 <code>fly status</code> 看看機器狀態囉！</p><h2 id="flask-deploy-有問題，一直-port-confuse"><a href="#flask-deploy-有問題，一直-port-confuse" class="headerlink" title="flask deploy 有問題，一直 port confuse"></a>flask deploy 有問題，一直 port confuse</h2><p>如果是依靠 gunicorn 部屬的讀者，以下應該會在 Dockerfile 裡面寫上這一段：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="selector-attr">[<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;api:app&quot;</span>, <span class="string">&quot;--log-file=-&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>然而這個啟動方式不論在 app.py 或是 Dockerfile 上寫了 EXPOSE port 為其他的，皆會預設 <code>127.0.0.1:8000</code>，這個舉動會讓 fly.io 感到困惑(confuse)，因為 fly.io 只聽 <code>0.0.0.0</code>，至於 port 應該是不影響，只是在 log 裡面一直看到 port confuse 覺得很奇怪</p><p>其中只要把 Dockerfile 裡面的 CMD 改成以下的就可以上去了，記得自己的 app.py 要改 port 喔！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD <span class="selector-attr">[<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;--host&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://technotrampoline.com/articles/deploying-a-python-flask-application-to-fly/">參考文章</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Fly.io 這邊還有很多功能可以使用，但大多都需要透過 command line 來操作，是一個比較開發者導向的 SaaS 的服務，但指令滿直觀的，或許都可以參考使用看看喔！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;介紹&quot;&gt;&lt;a href=&quot;#介紹&quot; class=&quot;headerlink&quot; title=&quot;介紹&quot;&gt;&lt;/a&gt;介紹&lt;/h1&gt;&lt;p&gt;最近因為有些專案需要有 local Volume，但在 Serverless 上要用偏麻煩，除機器上的本身功能以外，還需要另外開 VM 讓 Container 能夠 mount volume，因此需要類似 Heroku、Fly.io 這類的 SaaS 的服務，可以用很少量的費用去使用到 Database&amp;#x2F;Volume 的功能…&lt;/p&gt;</summary>
    
    
    
    <category term="Serverless" scheme="https://nijialin.com/categories/Serverless/"/>
    
    
    <category term="Serverless" scheme="https://nijialin.com/tags/Serverless/"/>
    
    <category term="Fly.io" scheme="https://nijialin.com/tags/Fly-io/"/>
    
  </entry>
  
  <entry>
    <title>在 Fly.io 上架設 Uptime Kuma 監控 Side Project</title>
    <link href="https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/"/>
    <id>https://nijialin.com/2024/03/24/flyio-deploy-uptime-kuma/</id>
    <published>2024-03-24T13:21:50.000Z</published>
    <updated>2024-06-27T10:02:23.124Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/kuma/1.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於近期自己蓋了幾隻 side project，慢慢發現有些服務倒了我自己也不知道，但時間久了其實當下也會忘了要修哪…</p><p>也因公司內有 status page 可以看每個服務狀態，想想這需求我也需要，因此萌生了架 status page 來幫忙確認健康狀態，接下來看看怎麼操作吧</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>此次使用的是 <a href="https://github.com/louislam/uptime-kuma/tree/master">uptime-kuma</a>，本來想說可以直接上到 Google Cloud Run 上，除了自己弄不上去以外，也發現 uptime kuma 是使用 SQLite 來儲存資訊，這邊很有可能被 <a href="https://nijialin.com/2020/02/15/serverless-cold-start/">Cold Start 的問題</a>打到，因此這次使用 fly.io 來部署(<a href="https://github.com/louis70109/uptime-kuma-fly/blob/main/fly.toml">民間版本.toml</a>)</p><ol><li>有許多的 notification 可以串接，有支援 LINE Bot &amp; Notify</li></ol><p><img src="https://nijialin.com/images/2024/kuma/notification.png"></p><ol start="2"><li><p>初次進去就可以設帳密，但帳號只能一個還改不了 🫣</p></li><li><p>可設定群組，統一設定 notification 而不用各別弄</p></li><li><p>還沒研究怎麼把 SQLite 拔出來，看來有支援 MySQL</p></li><li><p>備份不求人，直接 Export 就可以了</p></li></ol><p><img src="https://nijialin.com/images/2024/kuma/backup.png"></p><ol start="6"><li>如何部署到 fly.io</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Clone 專案到本地</span></span><br><span class="line">git clone https:<span class="string">//github.com/louis70109/uptime-kuma-fly.git</span></span><br><span class="line"><span class="comment"># 進入資料夾</span></span><br><span class="line"><span class="keyword">cd</span> uptime-kume-fly/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署，原先指令是 flyctl</span></span><br><span class="line">fly launch \</span><br><span class="line">  <span class="params">--copy-config</span> \</span><br><span class="line">  <span class="params">--auto-confirm</span> \</span><br><span class="line">  <span class="params">--ha=false</span> \</span><br><span class="line">  <span class="params">--name</span> uptime-kuma-nijia \</span><br><span class="line">  <span class="params">--now</span></span><br></pre></td></tr></table></figure><ol start="7"><li>如果想要在 fly.io 上客製化 domain，例如：<code>status.YOURDOMAIN.com</code></li></ol><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fly certs <span class="built_in">create</span> <span class="built_in">status</span>.YOURDOMAIN.com</span><br><span class="line">fly certs <span class="built_in">create</span> <span class="string">&quot;*.YOURDOMAIN.com&quot;</span></span><br><span class="line">fly certs show <span class="string">&quot;*.YOURDOMAIN.com&quot;</span></span><br></pre></td></tr></table></figure><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>看 Fly.io 一個月租金寫 5 美元，但因為只有一個服務應該不會用到這麼多流量，這次除了架設 status page 以外，也來看看這邊租金是怎樣，如果 &lt; 100 台幣的話或許可以考慮繼續使用，畢竟人家提供方便的服務來使用也是挺棒的！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/kuma/1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由於近期自己蓋了幾隻 side project，慢慢發現有些服務倒了我自己也不知道，但時間久了其實當下也會忘了要修哪…&lt;/p&gt;
&lt;p&gt;也因公司內有 status page 可以看每個服務狀態，想想這需求我也需要，因此萌生了架 status page 來幫忙確認健康狀態，接下來看看怎麼操作吧&lt;/p&gt;</summary>
    
    
    
    <category term="Serverless" scheme="https://nijialin.com/categories/Serverless/"/>
    
    
    <category term="Serverless" scheme="https://nijialin.com/tags/Serverless/"/>
    
    <category term="Monitor" scheme="https://nijialin.com/tags/Monitor/"/>
    
    <category term="Fly.io" scheme="https://nijialin.com/tags/Fly-io/"/>
    
    <category term="Uptime Kuma" scheme="https://nijialin.com/tags/Uptime-Kuma/"/>
    
  </entry>
  
  <entry>
    <title>【青森】滑雪紀錄, 從秋田機場出發</title>
    <link href="https://nijialin.com/2024/03/02/aomori-sonwboarding-202402/"/>
    <id>https://nijialin.com/2024/03/02/aomori-sonwboarding-202402/</id>
    <published>2024-03-02T14:51:08.000Z</published>
    <updated>2024-06-27T10:02:23.120Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/aomori/S__19750974_0.jpg"></p><h1 id="班機-虎航"><a href="#班機-虎航" class="headerlink" title="班機-虎航"></a>班機-虎航</h1><p>這次跟著朋友一起訂機票，虎航只有禮拜四的班機可以飛秋田，這次訂了 22,000 NTD，雖然比去仙台貴上滿多的，但能下去看一下秋田犬也不錯 😄</p><blockquote><p>個人前往等級: 剛學會 S turn，比較陡的紅線有時候還是會怕怕的，時常還是會卡刃跌倒</p></blockquote><span id="more"></span><table><thead><tr><th align="left"></th><th align="left"></th><th align="left">班機</th><th></th></tr></thead><tbody><tr><td align="left">時間 2&#x2F;22</td><td align="left">08:30</td><td align="left"></td><td>12:40</td></tr><tr><td align="left">地點</td><td align="left">TPE</td><td align="left">IT 256</td><td>AXT</td></tr><tr><td align="left">時間 2&#x2F;29</td><td align="left">14:10</td><td align="left"></td><td>17:25</td></tr><tr><td align="left">地點</td><td align="left">AXT</td><td align="left">IT 257</td><td>TPE</td></tr></tbody></table><h2 id="秋田空港"><a href="#秋田空港" class="headerlink" title="秋田空港"></a>秋田空港</h2><p><img src="https://nijialin.com/images/2024/aomori/S__19750984_0.jpg"></p><p>秋田空港似乎是去年加開給虎航的，算起來也算是一個小機場，因此在這邊虎航的櫃位就很明顯，但回程時不能線上 check-in，不確定是不是小機場的緣故，但排隊其實很快，很多程序也都先手動處理(機票、對名單…etc)</p><h2 id="秋田出發到青森"><a href="#秋田出發到青森" class="headerlink" title="秋田出發到青森"></a>秋田出發到青森</h2><p><img src="https://nijialin.com/images/2024/aomori/S__5595140.jpg"></p><p>秋田機場下飛機後，需要先搭乘巴士到<strong>秋田站</strong>，參考上圖右側，這次我 12:40 抵達機場，小機場應該可以比較快出關，但也要趕在 14:15 抵達巴士站轉乘到秋田駛</p><p><img src="https://nijialin.com/images/2024/aomori/S__5595159.jpg"></p><p>接著需要搭乘 JR 到青森，以巴士約 40 分鐘左右，因此預計要搭乘到 15:00 之後的兩班到青森，抵達時間應該也晚上七點了</p><blockquote><p>如果搞不清楚 JR 怎麼搭，可以參考這邊文章 <a href="https://matcha-jp.com/tw/172">【最新 2024】日本新幹線攻略！一次搞懂購票方式、種類區分、座位</a></p></blockquote><blockquote><p>這次住在<a href="https://www.google.com/maps/place/APA%E9%A3%AF%E5%BA%97+%E9%9D%92%E6%A3%AE%E7%AB%99%E6%9D%B1/@40.8278806,140.7363861,17z/data=!3m1!4b1!4m9!3m8!1s0x5f9b9f1e13da284f:0xc5f50c8652edfa2b!5m2!4m1!1i2!8m2!3d40.8278766!4d140.7389664!16s%2Fg%2F1tnl16vv?authuser=0&entry=ttuhttps:/">APA 青森東</a></p></blockquote><h2 id="回程-秋田-機場"><a href="#回程-秋田-機場" class="headerlink" title="回程 秋田-機場"></a>回程 秋田-機場</h2><p>由於是最後一天住在秋田 <a href="https://www.google.com/maps/place/APA+HOTEL+AKITA-SENSHUKOEN/@39.7206179,140.1166995,17z/data=!3m1!4b1!4m9!3m8!1s0x5f8fc2bfe52953e5:0xc91ceb8b6c1eb81a!5m2!4m1!1i2!8m2!3d39.7206138!4d140.1192798!16s%2Fg%2F12m9km9lj?authuser=0&entry=ttu">APA 酒店 - 秋田千秋公園 (APA Hotel Akita-Senshukoen)</a>，然後 14:10 的飛機，因此先預估 11:30 從飯店出發，搭乘機場接送巴士去機場，時程 40 分鐘</p><blockquote><p><a href="https://maps.app.goo.gl/Ptum5uitHDe5Dkjo9">Google Map</a></p></blockquote><p><img src="https://nijialin.com/images/2024/aomori/2.png"></p><blockquote><p>秋田比較冷門，個人還是喜歡最後一天可以有地方逛，下次應該會去仙台搭飛機了 XD</p></blockquote><h1 id="雪場"><a href="#雪場" class="headerlink" title="雪場"></a>雪場</h1><p><img src="https://nijialin.com/images/2024/aomori/S__19750982_0.jpg"></p><h2 id="moyahills"><a href="#moyahills" class="headerlink" title="moyahills"></a><a href="http://moyahills.jp/index.html">moyahills</a></h2><p><img src="https://nijialin.com/images/2024/aomori/1.png"></p><p>在這裡待上一天熱身，會在這邊租雪具(<a href="https://moyahills.jp/winter/winter.html">URL</a>)，這次一樣會租雪板+鞋+帽子，然後自己帶護膝護臀</p><blockquote><p>租裝備 6000&#x3D;5000 板子鞋子+1000 帽子<br>3060 moyahills 雪票<br>總共 <strong>9060 yen</strong></p></blockquote><p><img src="https://nijialin.com/images/2024/aomori/20231214130801-0001.jpg"></p><p>備存一下地圖，這次只有滑一號纜車而已，其他地方因為雪太少沒辦法滑行(很多冰面)</p><h2 id="八甲田雪場"><a href="#八甲田雪場" class="headerlink" title="八甲田雪場"></a><a href="https://maps.app.goo.gl/dVVYec58396nDwmF7">八甲田雪場</a></h2><p><img src="https://nijialin.com/images/2024/aomori/S__19750976_0.jpg"></p><ul><li>營業時間以及票券的錢 <a href="http://www.hakkoda-ropeway.jp/guide">http://www.hakkoda-ropeway.jp/guide</a></li><li>這次八甲田買 <strong>11 回券</strong>，分別滑行三天 3、4、4 次，<ul><li>總共: <strong>10100 yen</strong></li></ul></li><li>有 Forest 以及 Direct 兩個線路，這次大多都在 Direct line 滑行練感覺</li><li>我來的時間是二月底，營業時間 9:00~15:40</li></ul><blockquote><p>好險第一天有在 Moyahills 練習，前幾天需要先評估滑雪狀態再決定要不要來 😆</p></blockquote><h3 id="現場排隊狀況"><a href="#現場排隊狀況" class="headerlink" title="現場排隊狀況"></a>現場排隊狀況</h3><p><img src="https://nijialin.com/images/2024/aomori/S__19750979_0.jpg"></p><p>排隊中午前平均要排 <strong>1~1.5</strong> 小時，中午之後大概 1 小時，如果像我一樣因為會累或是需要熱機比較久，避開午餐人潮可以第一趟下來 <strong>11 點</strong>餐廳開了就先吃，然後去現場排隊一個小時就消化好了可以開始滑行</p><blockquote><p>體感日本人跟中國人的數量大概 1:0.8 左右</p></blockquote><h3 id="其他雪場內筆記"><a href="#其他雪場內筆記" class="headerlink" title="其他雪場內筆記"></a>其他雪場內筆記</h3><p><img src="https://nijialin.com/images/2024/aomori/S__19750978_0.jpg"></p><ul><li>食物大概一千日元上下</li><li>一天租借裝備:<ul><li>裝備板子鞋子 4000</li><li>帽子 1000</li></ul></li></ul><blockquote><p>裝備 <strong>5000</strong> yen&#x2F;天</p></blockquote><h4 id="巴士時刻表"><a href="#巴士時刻表" class="headerlink" title="巴士時刻表"></a>巴士時刻表</h4><p>以下先做筆記提供給未來的自己看，但這次是跟著朋友包車從青森出發到八甲田</p><blockquote><p>這次去八甲田跟著同行包車，以下資訊提供給之後要去的我一些參考 XD</p></blockquote><h5 id="青森車站-雪場"><a href="#青森車站-雪場" class="headerlink" title="青森車站-雪場"></a>青森車站-雪場</h5><p><img src="https://nijialin.com/images/2024/aomori/491450597338513798.png"></p><ul><li><a href="https://maps.app.goo.gl/WMcRyvHcqBheBnMV9">GOOGLE MAP</a></li><li>地址：日本〒 030-0133 Aomori, Moya, Nashinoki− ６３</li></ul><h5 id="雪場-青森車站"><a href="#雪場-青森車站" class="headerlink" title="雪場-青森車站"></a>雪場-青森車站</h5><p><img src="https://nijialin.com/images/2024/aomori/491450553851708003.png"></p><h2 id="Aomori-Spring-Ski-Resort"><a href="#Aomori-Spring-Ski-Resort" class="headerlink" title="Aomori Spring Ski Resort"></a><a href="https://maps.app.goo.gl/WaRh4C9yDwm2qaV66?g_st=ic">Aomori Spring Ski Resort</a></h2><p><img src="https://nijialin.com/images/2024/aomori/md85_G_01.jpg"></p><p>有一天因為八甲田風太大沒有開，全體人員前往 Aomori spring 滑雪，這次去中間通往山頂的纜車沒開，也剛好藉這個機會把這邊都玩過一遍，體感這邊的紅線跟綠線等及差不多</p><p>這邊可以選擇要 5000 的 snowboard set 或 5500 版本，差異大概是板子跟鞋子都比較高級點，帽子一樣 1000，雪票 6200</p><blockquote><p>總共 🟰 <strong>12700</strong> yen 💴&#x2F;一天</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這次很幸運可以跟到很棒的滑雪團，也遇到補很多雪的日子(不用滑冰塊)，並且可以體驗到八甲田山的魔力，接下來明年再來去日本收集更多雪場！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/aomori/S__19750974_0.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;班機-虎航&quot;&gt;&lt;a href=&quot;#班機-虎航&quot; class=&quot;headerlink&quot; title=&quot;班機-虎航&quot;&gt;&lt;/a&gt;班機-虎航&lt;/h1&gt;&lt;p&gt;這次跟著朋友一起訂機票，虎航只有禮拜四的班機可以飛秋田，這次訂了 22,000 NTD，雖然比去仙台貴上滿多的，但能下去看一下秋田犬也不錯 😄&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;個人前往等級: 剛學會 S turn，比較陡的紅線有時候還是會怕怕的，時常還是會卡刃跌倒&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="Japan" scheme="https://nijialin.com/tags/Japan/"/>
    
    <category term="Snowboard" scheme="https://nijialin.com/tags/Snowboard/"/>
    
    <category term="日本滑雪" scheme="https://nijialin.com/tags/%E6%97%A5%E6%9C%AC%E6%BB%91%E9%9B%AA/"/>
    
    <category term="青森" scheme="https://nijialin.com/tags/%E9%9D%92%E6%A3%AE/"/>
    
    <category term="八甲田山" scheme="https://nijialin.com/tags/%E5%85%AB%E7%94%B2%E7%94%B0%E5%B1%B1/"/>
    
  </entry>
  
  <entry>
    <title>【DevFest 2023】Empowering Community-Driven Learning through Serverless Practice</title>
    <link href="https://nijialin.com/2024/02/18/google-devfest-2023-taipei-learn-serverless-from-communities/"/>
    <id>https://nijialin.com/2024/02/18/google-devfest-2023-taipei-learn-serverless-from-communities/</id>
    <published>2024-02-18T16:25:01.000Z</published>
    <updated>2024-06-27T10:02:23.124Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/devfest/1.png"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>經歷過連續兩週兩場 <a href="https://gdg.community.dev/events/details/google-gdg-taipei-presents-devfest-taipei-2023/">DevFest 2023</a> 的經驗(12&#x2F;9, 12&#x2F;16)，真的是把我畢生所學都拿出來榨乾了😆，但也很高興有機會在台中以及台北跟大家分享我在業餘時間透過 Google Cloud 開發 Side Project 的經驗談，以下內容為台北場內容，有興趣的跟著一起往下看吧！</p><span id="more"></span><h1 id="如何透過社群學習？"><a href="#如何透過社群學習？" class="headerlink" title="如何透過社群學習？"></a>如何透過社群學習？</h1><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/6b62f16e016244e9a9feca2057078f04?slide=6" title="Empowering Community-Driven Learning through Serverless Practice" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"></iframe><h2 id="Clone-Knowledge"><a href="#Clone-Knowledge" class="headerlink" title="Clone Knowledge"></a>Clone Knowledge</h2><p>知識是可以複製的，開源社群另一個好處就是不用重複造輪子，初學時可能看了許多文件與文章，但終於找到當中了一些範例，這時候當然就先把他抓下來使用看看囉！</p><p>以自學角度來說，我會推薦經常去複製許多專案，了解自己正在研究的東西有哪些方案，但同步要記得 License 的問題唷！如果商用時要記得備註來源，尊重原作者 ✍️</p><h2 id="Build-Example"><a href="#Build-Example" class="headerlink" title="Build Example"></a>Build Example</h2><script defer class="speakerdeck-embed" data-slide="32" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>當我們開始熟悉學習的內容(e.g. Public Cloud, LINE Bot, 程式語言…)，應該本機都有很多 Clone 下來的專案，藉由平日生活中有些週期性的事情，開始可以把前人的經驗拿來改寫，把它變成事宜些有趣的專案。</p><blockquote><p>上圖範例為我近期為了玩滑板做的爬蟲 - <a href="https://github.com/louis70109/skatepark-CCTV-line">louis70109&#x2F;skatepark-CCTV-line</a>，也是幫我解決我在台北時時常下雨不能出去玩的問題</p></blockquote><h2 id="Contribute-Expertise"><a href="#Contribute-Expertise" class="headerlink" title="Contribute Expertise"></a>Contribute Expertise</h2><p>隨著範例越寫越多，會發現有些相依專案有些以下問題：</p><ul><li>註解寫一半</li><li>README label、格式沒對齊</li><li>function name 有錯</li><li>駝峰語言用底線(<code>_</code>)<ul><li>CamelCase(駝峰), JavaScript: 駝峰式居多</li><li>snake*case(蛇行用法), Python: 基本上都用 <code>*</code> 命名變數與 function，但 Class 會用<code>駝峰</code>，這都能送 PR 幫忙調整</li></ul></li></ul><p>不論專案的大小、公司內外，都會有很多以上的問題，順手幫忙一起修，讓每個專案越來越完整！</p><blockquote><p>像前陣子我就剛好找到 nuxt.js 的範例註解沒寫完(<a href="https://github.com/nuxt/nuxt/pull/23999">PR #23999</a>)，幫忙修正掉，雖然看起來只是小事，但開源專案也是需要細心的人來一起幫忙監督，才能讓開源圈子越來越好唷！</p></blockquote><h1 id="為什麼我要用-Cloud-Run？"><a href="#為什麼我要用-Cloud-Run？" class="headerlink" title="為什麼我要用 Cloud Run？"></a>為什麼我要用 Cloud Run？</h1><p>Serverless 是個概念，主要讓開發者可以專注在開發上，資源沒在用時可以先冷卻(<a href="https://nijialin.com/2023/04/04/how-cloud-run-continuely-cronjob-background/">Cold Start 文章</a>)，而使用 Google 的 Cloud 又會有以下的優勢：</p><ul><li>彈性<ul><li>流量計價，我個人專案大概部署五個服務在 Cloud Run 上，資料庫都用 Firebase，一個月大概花費一百塊以內，基本上費用都不會太高</li><li>萬一專案真的紅了，Cloud Run 還能 auto scaling，Infra 的管理我們都不用管，這樣真的對於一個開發者來非常棒！</li></ul></li><li>易用性<ul><li>GCP 在開發者體驗上做得非常好，gcloud 指令方便文件也易讀，甚至部署上去不用寫一堆 config 設定，只要 deploy 上去接下來在介面上找問題即可！</li></ul></li><li>區域性：雖然都知道文件看英文可以獲得一手資訊，但有時候抓蟲看中文還是比較快！<ul><li>GCP 好處就是中文文件大部分都有支援</li><li>台灣也有機房</li><li>真的不行還可以找客服幫忙，若是企業又會更快些 (畢竟有錢)</li></ul></li></ul><h1 id="佈署方式的選擇與適用情況"><a href="#佈署方式的選擇與適用情況" class="headerlink" title="佈署方式的選擇與適用情況"></a>佈署方式的選擇與適用情況</h1><p>以下三種是我常用來部署自己專案的方式：</p><h2 id="gcloud-指令-速度-快"><a href="#gcloud-指令-速度-快" class="headerlink" title="gcloud 指令 (速度: 快)"></a>gcloud 指令 (速度: 快)</h2><script defer class="speakerdeck-embed" data-slide="16" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><ul><li>最直覺的操作方式，任何有部署經驗的人都會習慣的用法</li><li>通常公司電腦有資安阻擋，因此建議使用自己的電腦操作</li><li>多人團隊建議綁定自動部署</li></ul><h2 id="一鍵部署-Cloud-Shell-速度-中"><a href="#一鍵部署-Cloud-Shell-速度-中" class="headerlink" title="一鍵部署 Cloud Shell (速度: 中)"></a>一鍵部署 Cloud Shell (速度: 中)</h2><script defer class="speakerdeck-embed" data-slide="21" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><ul><li>在 quicklab、Cloud Function…etc 很多 GCP 服務都可使用</li><li>主要讓開發者在任何已登入的瀏覽器上直接操作，無需再另外 ssh 進去</li><li>若有資安軟體阻擋，這方式可以直接線上操作，安全又 <del>衛生</del> 守規定</li></ul><h2 id="GitHub-綁定自動部署-速度-慢"><a href="#GitHub-綁定自動部署-速度-慢" class="headerlink" title="GitHub 綁定自動部署 (速度: 慢)"></a>GitHub 綁定自動部署 (速度: 慢)</h2><script defer class="speakerdeck-embed" data-slide="23" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><ul><li>不論團隊大小，都很適合的方式</li><li>通通交給機器處理，不會有手動上沒有參數導致錯誤的問題</li><li>介面直接設定又穩定</li></ul><h1 id="雲端資源整合"><a href="#雲端資源整合" class="headerlink" title="雲端資源整合"></a>雲端資源整合</h1><h2 id="圖床功能比較"><a href="#圖床功能比較" class="headerlink" title="圖床功能比較"></a>圖床功能比較</h2><script defer class="speakerdeck-embed" data-slide="25" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>由於 Side Project 是閒暇時間實作，在求快下就使用 GitHub Repo 作為圖床，但建議別一次傳太大的檔案上去，如果是一些小圖片個人覺得很適合</p><p>如果專案上需要多些權限、階層控管，也需要做後續的整合，這邊就會建議使用 Cloud Storage 作為圖床</p><p>以上就看需求選擇，個人認為這費用不算高(當投資)，讓自己開發順手同時累積經驗比較重要喔！</p><h2 id="資料儲存"><a href="#資料儲存" class="headerlink" title="資料儲存"></a>資料儲存</h2><script defer class="speakerdeck-embed" data-slide="26" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>打從職涯剛開始都是使用 RDBMS 習慣，很常會先以 MySQL、PostgreSQL 為主，如果是自己擁有主機架設這成本較低</p><p>但隨著現在服務都放 Public Cloud，而 SQL 的費用曾經體驗過會非常高 💰，在服務上還可以選擇另一個非常棒的 NoSQL 服務 - <strong>Firebase</strong> 作為資料儲存的地方，這上面不僅有資料儲存功能，同時也能部署網站、分析…etc，文件式的操作方法在 Side Project 上非常快速也方便(<strong>畢竟沒啥邏輯</strong>)，並且能用 JSON 的方式讀取，操作起來就很像呼叫個 API Server 吐資料，上圖比較表也提供給大家～</p><h1 id="選擇適合的-Side-Project"><a href="#選擇適合的-Side-Project" class="headerlink" title="選擇適合的 Side Project"></a>選擇適合的 Side Project</h1><p>以下與大家分享在閒暇時間部署於 GCP 的幾個 Side Project：</p><script defer class="speakerdeck-embed" data-slide="31" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>由於用 LINE 是我每天必經之路，我製作了一個 LINE Bot 記錄我平常收集到的零碎資訊(網站、圖片、點子)，幫我儲存在 GitHub Repo 上，有時在搭交通工具時也會當<strong>暫時的</strong>部落格編輯器(回家再調格式)</p><script defer class="speakerdeck-embed" data-slide="32" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>近期因為愛上滑板 🛹，因此寫了一隻 LINE Bot 來擷取台北滑板場攝影機的畫面，畢竟台北市一個陰晴不定的都市，經常需要靠這隻 Bot 來幫我看看地板是否乾了沒，再決定要不要出門，避免浪費太多時間～</p><p><img src="https://qr-official.line.me/sid/L/556trgib.png" alt="CCTV LINE Bot"></p><blockquote><p>延伸閱讀：<a href="https://nijialin.com/2024/02/13/gcp-cloud-function-gen2-with-line-bot/">如何設定 Cloud Function 2nd gen 來改善截圖爬蟲的效率！</a></p></blockquote><p>另外一隻則是 Calendar Bot，透過 OpenAI 幫我整理凌亂的資訊，變成 Google Calendar 可以使用的方式。</p><p>因為 Google Calendar 可以透過 GET 網址的方式在已登入的瀏覽器上直接加入行事曆，因為個人使用習慣都在手機上安排行事曆，因此在 LINE Bot 這邊需要加上 <code>?openExternalBrowser=1</code> 的參數，強制在外部瀏覽器(Safari)打開，如此才會跳到 App 上操作</p><script defer class="speakerdeck-embed" data-slide="33" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>講了那麼多 LINE Bot，當然也有 Web 的工具，過去因為活動需要，想把 QR Code 變得更好看，能夠在背景放上圖片，因此自己做了一個網站，讓我<code>上傳圖片</code>以及<code>網址</code>，就能變成一個漂亮個 QR Code，看起來吸引力十足也不用靠設計師了 😆</p><h1 id="該帶走點什麼-✍️"><a href="#該帶走點什麼-✍️" class="headerlink" title="該帶走點什麼 ✍️"></a>該帶走點什麼 ✍️</h1><script defer class="speakerdeck-embed" data-slide="34" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>上述介紹了許多，因為是日常需要才使用，也就是有<code>事件</code>才會使用，因此個人認為在事件驅動開發的服務上就會很適合這些 Serverless 的雲服務，當然參數調整好也可以當一般常見的 SPA、CMS…etc</p><h2 id="1st-amp-2nd-Cloud-Function-跟-Cloud-Run-有什麼差嗎？"><a href="#1st-amp-2nd-Cloud-Function-跟-Cloud-Run-有什麼差嗎？" class="headerlink" title="1st &amp; 2nd Cloud Function 跟 Cloud Run 有什麼差嗎？"></a>1st &amp; 2nd Cloud Function 跟 Cloud Run 有什麼差嗎？</h2><script defer class="speakerdeck-embed" data-slide="36" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script><p>另外在 2023&#x2F;8&#x2F;10 Cloud Functions 也升級了，過往要做許多介接其他 GCP 服務大多都會使用 Cloud Run (Big Query、Cloud Storage、Eventarc..etc)，在這次的升級上讓 Functions 的底層置換成 Cloud Run，也就是說把底層都換成 Knative 的方式執行，如此一來 Google 能夠統一格式，用戶在操作上也不會搞混兩邊的 Container 差異</p><blockquote><ul><li>1st 用的方式有點像是 <a href="https://docs.openfaas.com/cli/install/">Open FaaS</a></li><li>2nd 用的 <a href="https://knative.dev/docs/">Knative</a><br>News: <a href="https://cloud.google.com/blog/products/serverless/cloud-functions-2nd-generation-now-generally-available">Cloud Functions 2nd gen is GA, delivering more events, compute and control</a></li></ul></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>最後再次感謝 GDG DevFest 2023 團隊給我這個演講機會來分享 - <a href="https://speakerdeck.com/line_developers_tw/empowering-community-driven-learning-through-serverless-practice?slide=45">Empowering Community-Driven Learning through Serverless Practice</a>，藉由這次的演講跟大家分享我做 Side Project 以來的一些心路歷程以及看法，若有任何的建議與回饋，都歡迎下方留言讓我知道唷！</p><script defer class="speakerdeck-embed" data-slide="45" data-id="6b62f16e016244e9a9feca2057078f04" data-ratio="1.7777777777777777" src="//speakerdeck.com/assets/embed.js"></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/devfest/1.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;經歷過連續兩週兩場 &lt;a href=&quot;https://gdg.community.dev/events/details/google-gdg-taipei-presents-devfest-taipei-2023/&quot;&gt;DevFest 2023&lt;/a&gt; 的經驗(12&amp;#x2F;9, 12&amp;#x2F;16)，真的是把我畢生所學都拿出來榨乾了😆，但也很高興有機會在台中以及台北跟大家分享我在業餘時間透過 Google Cloud 開發 Side Project 的經驗談，以下內容為台北場內容，有興趣的跟著一起往下看吧！&lt;/p&gt;</summary>
    
    
    
    <category term="研討會" scheme="https://nijialin.com/categories/%E7%A0%94%E8%A8%8E%E6%9C%83/"/>
    
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
    <category term="Knative" scheme="https://nijialin.com/tags/Knative/"/>
    
    <category term="DevFest" scheme="https://nijialin.com/tags/DevFest/"/>
    
    <category term="Side Project" scheme="https://nijialin.com/tags/Side-Project/"/>
    
    <category term="Community" scheme="https://nijialin.com/tags/Community/"/>
    
  </entry>
  
  <entry>
    <title>如何設定 Cloud Function 2nd gen 來改善截圖爬蟲的效率！</title>
    <link href="https://nijialin.com/2024/02/13/gcp-cloud-function-gen2-with-line-bot/"/>
    <id>https://nijialin.com/2024/02/13/gcp-cloud-function-gen2-with-line-bot/</id>
    <published>2024-02-13T13:34:01.000Z</published>
    <updated>2024-06-27T10:02:23.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介紹"><a href="#背景介紹" class="headerlink" title="背景介紹"></a>背景介紹</h1><p><img src="https://nijialin.com/images/2024/gcp/1.png"></p><p>過年改寫了我自己的在台北常使用的路上攝影機截圖工具，一開始求方便在每次請求來時會在容器當中開啟 chrome 去截圖，但由於是 MVP 以及沒有放 queue 在前面讓請求排隊，因此這樣的做法就無法提供給別人使用。</p><p>因此為了可用性，需要把截圖功能透過排程(cronjob)去實作，所以這次就將截圖功能改搬到 Cloud Function 並搭配 Cloud Scheduler 排程抓取。</p><span id="more"></span><blockquote><p>感謝 @timfanda35 協助糾正錯誤，Cloud Run 也可以透過 Scheduler 來觸發 - <a href="https://cloud.google.com/run/docs/triggering/using-scheduler">Running services on a schedule</a></p></blockquote><p>過往我很習慣在 Cloud Run 上實作任何的功能，這次也是第一次實際操作 Cloud Function，以下就介紹一下兩者是如何搭配使用的！</p><h2 id="台北板場截圖-LINE-Bot"><a href="#台北板場截圖-LINE-Bot" class="headerlink" title="台北板場截圖 LINE Bot"></a>台北板場截圖 LINE Bot</h2><blockquote><p>參考上一篇文章：<a href="https://nijialin.com/2023/11/13/line-bot-capture-image-cloud-run/">在 Google Cloud Run 上安裝 Chromium 抓取 CCTV 影像</a></p></blockquote><p><img src="https://qr-official.line.me/sid/L/556trgib.png"></p><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>以下會簡介 Cloud Function 操作完後如何銜接 Cloud Run 的步驟，那就繼續往下看吧！</p><h2 id="建立第一個-Cloud-Function"><a href="#建立第一個-Cloud-Function" class="headerlink" title="建立第一個 Cloud Function"></a>建立第一個 Cloud Function</h2><p><img src="https://nijialin.com/images/2024/gcp/2.png"></p><p>前往 <a href="https://console.cloud.google.com/functions/list?hl=zh-tw">Cloud Function</a>，並在介面上按下<mark>建立函式</mark>，即可看到相關畫面</p><h2 id="直接線上搭配-Cloud-Shell-開始寫程式測試！"><a href="#直接線上搭配-Cloud-Shell-開始寫程式測試！" class="headerlink" title="直接線上搭配 Cloud Shell 開始寫程式測試！"></a>直接線上搭配 Cloud Shell 開始寫程式測試！</h2><p><img src="https://nijialin.com/images/2024/gcp/3.png"></p><p>把基本資訊設定完後，Cloud Function 這邊跟其他 FaaS 差不多，都有提供編輯界面供撰寫。而這邊夠更棒的是，GCP 的服務很多是搭配 Cloud Shell 讓功能可以在<strong>部署前先測試</strong>好，確認沒問題再部署上去，讓小本開發的我們可以避免來回部署花費了很多流量 💰🤣</p><h2 id="寫完-Cloud-Function-了，那-2nd-Gen-有什麼用？"><a href="#寫完-Cloud-Function-了，那-2nd-Gen-有什麼用？" class="headerlink" title="寫完 Cloud Function 了，那 2nd Gen 有什麼用？"></a>寫完 Cloud Function 了，那 2nd Gen 有什麼用？</h2><p><img src="https://nijialin.com/images/2024/gcp/4.png"></p><p>部署完後進來看看 Cloud Function，會發現上面怎麼會有個<strong>第二代</strong>的字眼，簡單來說是 Google 把 Cloud Function 整合進 Cloud Run，過往 Function 也是另外起 Container 沒錯，但在雲平台上看起來就是兩個不同的服務，藉由這樣整合也讓 Function 能使用到 Cloud Run 上面的很多好處，也可以從介面上直接通往 Cloud Run 開始操作。</p><p>相關操作範例如：「Eventarc、處理來自 Cloud Storage 或 BigQuery 的長請求、更多的 Cloud Events、併發處理…etc」</p><blockquote><p>更多介紹:<br><a href="https://cloud.google.com/blog/products/serverless/introducing-the-next-generation-of-cloud-functions">Supercharge your event-driven architecture with new Cloud Functions (2nd gen)</a> &gt; <a href="https://cloud.google.com/functions/docs/concepts/version-comparison">Cloud Functions version comparison</a></p></blockquote><h2 id="Cloud-Function-怎麼去-Cloud-Run？"><a href="#Cloud-Function-怎麼去-Cloud-Run？" class="headerlink" title="Cloud Function 怎麼去 Cloud Run？"></a>Cloud Function 怎麼去 Cloud Run？</h2><p><img src="https://nijialin.com/images/2024/gcp/5.png"></p><p>此外也能從介面上直接點選 🍔 直接前往 Cloud Run 設定，或是想要複製更多 Function 讓 Cloud Scheduler 使用，也都是沒有問題的！</p><h2 id="換過去有什麼差？"><a href="#換過去有什麼差？" class="headerlink" title="換過去有什麼差？"></a>換過去有什麼差？</h2><p><img src="https://nijialin.com/images/2024/gcp/6.png"></p><p>來到這邊之後就會跟原本使用 Cloud Run 的習慣一樣了 👏，想設定任何的 Cloud Event 或是調整和容器相關的係數，皆能在這邊操作，就不用分兩個畫面去調整了～</p><h2 id="如何在-Cloud-Run-上看？"><a href="#如何在-Cloud-Run-上看？" class="headerlink" title="如何在 Cloud Run 上看？"></a>如何在 Cloud Run 上看？</h2><p><img src="https://nijialin.com/images/2024/gcp/6.png"></p><p>在 Cloud Run 中也能知道這個容器是透過誰來 Build，如此一來也不用擔心說會不會改天就忘了 🤣</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>這邊我的實作方式是在本地端先跑過一次 Code，再把程式轉貼上 Cloud Function 去測試，但這手動的步驟有點不優，往後若有開發上能夠讓體驗更好，我在另外寫一篇文章介紹，那就大家下回見囉！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景介紹&quot;&gt;&lt;a href=&quot;#背景介紹&quot; class=&quot;headerlink&quot; title=&quot;背景介紹&quot;&gt;&lt;/a&gt;背景介紹&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/gcp/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;過年改寫了我自己的在台北常使用的路上攝影機截圖工具，一開始求方便在每次請求來時會在容器當中開啟 chrome 去截圖，但由於是 MVP 以及沒有放 queue 在前面讓請求排隊，因此這樣的做法就無法提供給別人使用。&lt;/p&gt;
&lt;p&gt;因此為了可用性，需要把截圖功能透過排程(cronjob)去實作，所以這次就將截圖功能改搬到 Cloud Function 並搭配 Cloud Scheduler 排程抓取。&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
    <category term="Cloud Function" scheme="https://nijialin.com/tags/Cloud-Function/"/>
    
    <category term="Cloud Scheduler" scheme="https://nijialin.com/tags/Cloud-Scheduler/"/>
    
  </entry>
  
  <entry>
    <title>如何在主流前端框架上設定 GTM? 怎麼有些資料看起來沒收到?</title>
    <link href="https://nijialin.com/2024/01/28/google-analytics-and-tag-manager-setting-with-frontend-framework/"/>
    <id>https://nijialin.com/2024/01/28/google-analytics-and-tag-manager-setting-with-frontend-framework/</id>
    <published>2024-01-28T14:40:38.000Z</published>
    <updated>2024-01-30T04:26:32.045Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/ga/0.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於現在主流前端框架(Next, Nuxt)皆會透過 Virtual DOM 的方式渲染網站，在網站當中像是 class 就會有類似 <code>class=&quot;qwe-1234&quot;</code> 的呈現方式，且會階層往下，但這在 google analytics 當中抓資料會有問題，因為跟一般 SPA 網站渲染方式呈現比較不同</p><span id="more"></span><h2 id="延伸閱讀：Why-Virtual-DOM"><a href="#延伸閱讀：Why-Virtual-DOM" class="headerlink" title="延伸閱讀：Why Virtual DOM?"></a>延伸閱讀：Why Virtual DOM?</h2><blockquote><p>Next 或 Nuxt 前端框架使用 virtual DOM 的主要原因是為了提升網頁的效能和開發體驗。virtual DOM 是一種用 JavaScript 物件來模擬真實 DOM 的技術，它可以減少對真實 DOM 的操作，從而避免不必要的 reflow 或 repaint，這些過程會消耗瀏覽器的資源。virtual DOM 還可以利用 diff 演算法來計算出新舊 virtual DOM 之間的差異，並只更新有變動的部分，這樣可以進一步提高效率。<br>除了效能的優勢，virtual DOM 也可以讓開發者更方便地處理資料和畫面的變化，而不需要直接操作 DOM API。這樣可以減少程式碼的複雜度，並提高可讀性和可維護性。virtual DOM 還可以實現服務端渲染 (SSR)，這對於 SEO 和首頁載入速度有很大的幫助。</p></blockquote><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>假設我想在 GA 中監控事件以下範例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;qwe-123&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;asd-456&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;accountSetting&#x27;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我們會想在 GTM 後台設定抓取 <code>id=&#39;accountSetting&#39;</code>，設定就會跟以下很像：</p><p><img src="https://nijialin.com/images/2024/ga/1.png"></p><p>接著到 Tag Assistant (preview page) 中開啟 Debug mode 時，會發現事件似乎沒有被 Fire，以下先附上應該要成功的畫面：</p><p><img src="https://nijialin.com/images/2024/ga/4.png"></p><p>把事件點開之後才發現，怎麼內容都放在 Click Element(?) 初步猜測應該是 Virtual DOM 壓縮後讓 GA 找不到對應的欄位，因此將內容都放入 Element 當中，參考如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">  event:</span> <span class="string">&quot;gtm.click&quot;</span>,</span><br><span class="line"><span class="symbol">  gtm:</span> &#123;</span><br><span class="line"><span class="symbol">    uniqueEventId:</span> <span class="number">16</span>,</span><br><span class="line"><span class="symbol">    start:</span> <span class="number">1706415086221</span>, <span class="comment">// 開始時間</span></span><br><span class="line"><span class="symbol">    element:</span> <span class="string">&quot;HTMLImageElement: html &gt; body &gt; div#__next &gt; div.css-xg&quot;</span> +</span><br><span class="line">             <span class="string">&quot;fukl &gt; div.css-79njnh &gt; a.css-s401k6#accountSetting &gt; img&quot;</span>,</span><br><span class="line"><span class="symbol">    elementClasses:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">    elementId:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">    elementTarget:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">    elementUrl:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">    historyChangeSource:</span> <span class="string">&quot;pushState&quot;</span>,</span><br><span class="line"><span class="symbol">    oldUrl:</span> <span class="string">&quot;https://用戶訪問實際網址&quot;</span>,</span><br><span class="line"><span class="symbol">    newUrl:</span> <span class="string">&quot;https://應該是首頁&quot;</span>,</span><br><span class="line"></span><br><span class="line">    ...其餘監控資料</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="symbol">  eventCallback:</span> <span class="string">&quot;Function&quot;</span></span><br><span class="line"></span><br><span class="line">  ...其他自第義的內容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>經驗分享：在越接近首頁位置的 html id 以及 class 會被放到 Element ID(Class) 欄位當中，但隨著網頁的商業邏輯越來越多，包多層之後 GTM 會搞混，因此建議方式還是可以從 Element 裡面抓</p></blockquote><p>因此這邊能解的方式如下：</p><p><img src="https://nijialin.com/images/2024/ga/2.png"></p><p>透過 <code>CSS Selector</code> 來指定想 tracking 的 HTML tag，但這邊需要 Double confirm 的地方是，有時候實作上後面的階層可能不一定有東西，因此這邊能做的方式大概為:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#accountSetting, #accountSetting *</span><br></pre></td></tr></table></figure><blockquote><p>在 GTM CSS Selector 這邊可以用 <code>,</code> 來劃分條件，空白+<code>*</code> 則是代表後面不論接什麼，只要 ID &#x3D; accountSetting 就能 fire tracking，</p></blockquote><h2 id="Page-Path-的-contains-設定"><a href="#Page-Path-的-contains-設定" class="headerlink" title="Page Path 的 contains 設定"></a>Page Path 的 contains 設定</h2><p>建議使用 <code>contains</code>，因為可能會因為不同網站導流而在後面放了許多參數，只要路徑有符合就可以收進來<br><img src="https://nijialin.com/images/2024/ga/3.png"></p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>會發現這個操作方式是發現，設定了十幾個 click tracking event，結果只有幾個有成功，與同事合力才發現原來有前端框架的 Virtual DOM 影響的問題。</p><p>往後若想透過GA來收集用戶行為時，記得要先知道前端是如何構建而成，SPA or Web framework，才能知道自己抓的東西能夠符合團隊需求喔！</p><blockquote><p>預祝大家資料都能被好好的 tracking，數據收滿滿!!</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/ga/0.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由於現在主流前端框架(Next, Nuxt)皆會透過 Virtual DOM 的方式渲染網站，在網站當中像是 class 就會有類似 &lt;code&gt;class=&amp;quot;qwe-1234&amp;quot;&lt;/code&gt; 的呈現方式，且會階層往下，但這在 google analytics 當中抓資料會有問題，因為跟一般 SPA 網站渲染方式呈現比較不同&lt;/p&gt;</summary>
    
    
    
    <category term="學習紀錄" scheme="https://nijialin.com/categories/%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="GTM" scheme="https://nijialin.com/tags/GTM/"/>
    
    <category term="GA" scheme="https://nijialin.com/tags/GA/"/>
    
    <category term="Google Analytics" scheme="https://nijialin.com/tags/Google-Analytics/"/>
    
  </entry>
  
  <entry>
    <title>【雪之忍法帖】白馬滑雪旅程雜記</title>
    <link href="https://nijialin.com/2024/01/06/snowboarding-2023-to-2024/"/>
    <id>https://nijialin.com/2024/01/06/snowboarding-2023-to-2024/</id>
    <published>2024-01-06T07:16:13.000Z</published>
    <updated>2024-01-27T13:03:35.282Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2024/snowboard/DCDC9CA0-4FAB-4F1D-9A92-BF8A14FFFED9.jpg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大約在 9~10 月安排了這次跨年滑雪的旅程，以下就跟大家分享這次大約的花費，給未來想去白馬滑雪的朋友參考囉！</p><h1 id="TL-DR-大致花費"><a href="#TL-DR-大致花費" class="headerlink" title="TL;DR 大致花費"></a>TL;DR 大致花費</h1><ul><li><p>跨年機票 12&#x2F;27 - 1&#x2F;4 的國泰航空機票買了 16,000</p></li><li><p>一天住宿費大概在 1,500</p><span id="more"></span></li><li><p>一日券：6000 yen，大概台幣 1500</p></li><li><p>夜滑：4200 yen，大約台幣 1000</p></li><li><p>雪板&#x2F;雪鞋&#x2F;安全帽：五天 20,000 yen，一天大約台幣 1,100</p></li><li><p>長野-白馬巴士：大概 300 台幣一趟</p></li><li><p>東京-長野新幹線：2000 台幣</p></li></ul><h1 id="交通-東京-長野-白馬"><a href="#交通-東京-長野-白馬" class="headerlink" title="交通: 東京 - 長野 - 白馬"></a>交通: 東京 - 長野 - 白馬</h1><p>滑雪前因為有其他行程在東京，因此我先從 klook 上預約買了 <strong>東京-長野</strong> 以及 <strong>長野-東京</strong> 的，這邊手續費會被收 300-400 元，而回程因為不好訂票，需在 klook 重複訂幾次，klook app 上有個操作陷阱需要小心</p><blockquote><p>假設訂了 1&#x2F;3 沒成功，按了重新預定之後會在一兩秒後換成訂票當時的下週，當時我就太相信 app 且按太快，只能怪自己沒仔細看，如果有使用 klook 訂票要注意這問題唷！<br>但若是淡季去，建議就在現場買吧！不會被抽手續費唷</p></blockquote><p>關於長野如何到白馬，可以參考 <a href="https://www.alpico.co.jp/tc/timetable/nagano/r-nagano-hakuba/">ALPICO 的網站</a>，裡頭有中文介面，看著 <mark>长野站东口 ➡️ 白马八方巴士总站</mark> 即可，時間上看沒有預約的就好，這樣到現場排隊就可以了</p><h1 id="住宿-パルズイン雷鳥民宿"><a href="#住宿-パルズイン雷鳥民宿" class="headerlink" title="住宿 - パルズイン雷鳥民宿"></a>住宿 - パルズイン雷鳥民宿</h1><p><img src="https://nijialin.com/images/2024/snowboard/A8C5C045-0DA3-4C49-9678-A875FA1423AB.jpg"></p><p>這次 <a href="https://www.airbnb.com.tw/rooms/749618942384864422?source_impression_id=p3_1704449841_LgnAPsH9/fNsed5t">パルズイン雷鳥</a> 我是在 Airbnb 上訂的，這邊早餐會在前一天詢問預計幾點吃，早餐量也是一定讓你吃飽飽，晚餐也可以在裡面付費，附近沒啥吃的，在這裡吃也很美味～</p><p>此外可以在這裡買雪票，5500 yen 一張白馬五龍一日券(500 保證金)、共用衛浴有泡澡池、洗衣服 300 yen、烘乾 100 yen&#x2F;30 mins、有烘乾室、有雪場接駁車(走路比較快但爬山累)</p><blockquote><p>附近走路 15 mins 才有 7-11，因此去的話建議把宵夜跟補給品一次買齊</p></blockquote><h1 id="白馬五龍場地狀況"><a href="#白馬五龍場地狀況" class="headerlink" title="白馬五龍場地狀況"></a>白馬五龍場地狀況</h1><p><img src="https://nijialin.com/images/2024/snowboard/92350069-77F1-4F8D-9BA2-CBFCCD202389.jpg"></p><p>2023&#x2F;12 日本這邊是暖冬，因此今年雪其實不夠多，整體滑起來很像在滑冰塊(快接近小叮噹的人造雪)，但很幸運的在跨年夜滑從下雨換成下雪，至少補充的雪，也讓照片看起來比較美了～～</p><h1 id="坐到山頂先去看看雪地版本的地藏王"><a href="#坐到山頂先去看看雪地版本的地藏王" class="headerlink" title="坐到山頂先去看看雪地版本的地藏王"></a>坐到山頂先去看看雪地版本的地藏王</h1><p><img src="https://nijialin.com/images/2024/snowboard/8A4361C3-4B51-4450-82EE-0293AB2FFB6D.jpg"></p><p>來白馬五龍一定要來看一次山頂的地藏王，這次附近的雪量也算還行，不過因為不太懂爬山跟調整呼吸的技巧，導致這次上去有點缺氧，但整體來說有一次很棒的體驗！推薦大家千里迢迢坐車來，別忘了來山頂看看喔</p><h1 id="滑雪狀態"><a href="#滑雪狀態" class="headerlink" title="滑雪狀態"></a>滑雪狀態</h1><p><img src="https://nijialin.com/images/2024/snowboard/A60AAACA-1F2B-4516-86F0-047FB8D148F0.jpg"></p><p>理論上寫在已經在雪季了，但也因為暖冬所以雪量不夠，但身為滑雪愛好者們來這面也是很瘋狂，排隊也都沒在客氣，五龍新手區排隊應該都需要 5~10 mins，靠近午餐時間都會比較好排些，建議大家身上可以放些巧克力之類即時補充，等大家吃完再去吃，排隊也不用排這麼久。</p><p>雪場吃飯平均應該要花 2000 yen 左右，但來這邊也沒啥東西能吃，都來了還是在這邊吃吧！</p><p>這邊雪場可以滑到白馬 47 那邊，早上熱身完可以先滑過去吃飯，然後搭回山上再回白馬五龍～</p><h1 id="跨年夜-我可終於等到雪了！"><a href="#跨年夜-我可終於等到雪了！" class="headerlink" title="跨年夜: 我可終於等到雪了！"></a>跨年夜: 我可終於等到雪了！</h1><p><img src="https://nijialin.com/images/2024/snowboard/ECC593B7-3F2D-417A-9559-DB241FA90472.jpg"></p><p>這次白馬相關的 IG 都有寫說在五龍會有跨年煙火，當天夜滑 4200 yen 可以滑到 11:30(平常只到 9:00) 相當划算，我大概滑到 10:30 下去民宿洗澡換衣服再回來，時間算的都剛剛好～</p><h1 id="突發事件：-地震"><a href="#突發事件：-地震" class="headerlink" title="突發事件： 地震"></a>突發事件： 地震</h1><p><img src="https://nijialin.com/images/2024/snowboard/003BF295-A275-4C60-8141-0728598A470E.png"></p><p>因為之後要去其他地方滑雪，因此先安裝了 <strong>承換 NAVITIME</strong>，結果當天要地震前 app 一直推播通知，這點日本真的做得非常好，讓日本國內的民眾都可以快速接收到訊息 👍</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><img src="https://nijialin.com/images/2024/snowboard/C2FA518A-C020-4C65-9330-9F55967C8B48.jpg"></p><p>希望以上內容給預計有想之後跨年滑雪的讀者們參考參考，這次體驗也非常棒！雖然花了不少錢，但真的買到很多快樂 😆，那就後續的文章再繼續分享新東西給大家囉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2024/snowboard/DCDC9CA0-4FAB-4F1D-9A92-BF8A14FFFED9.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;大約在 9~10 月安排了這次跨年滑雪的旅程，以下就跟大家分享這次大約的花費，給未來想去白馬滑雪的朋友參考囉！&lt;/p&gt;
&lt;h1 id=&quot;TL-DR-大致花費&quot;&gt;&lt;a href=&quot;#TL-DR-大致花費&quot; class=&quot;headerlink&quot; title=&quot;TL;DR 大致花費&quot;&gt;&lt;/a&gt;TL;DR 大致花費&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;跨年機票 12&amp;#x2F;27 - 1&amp;#x2F;4 的國泰航空機票買了 16,000&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一天住宿費大概在 1,500&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="Japan" scheme="https://nijialin.com/tags/Japan/"/>
    
    <category term="Snowboard" scheme="https://nijialin.com/tags/Snowboard/"/>
    
  </entry>
  
  <entry>
    <title>2023  Personal Review</title>
    <link href="https://nijialin.com/2023/12/23/nijia-2023-review/"/>
    <id>https://nijialin.com/2023/12/23/nijia-2023-review/</id>
    <published>2023-12-23T04:42:18.000Z</published>
    <updated>2024-01-05T10:03:45.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/20231222_222229_ninja_cat.jpg"></p><h1 id="🐔-前言"><a href="#🐔-前言" class="headerlink" title="🐔 前言"></a>🐔 前言</h1><p>趁出國跨年之前來整理今年的一些事情，期許 2024 年的自己可以持續跨出舒適圈</p><p>自覺自己是一個很反骨的個性，不喜歡被定義就是<code>怎樣怎樣</code>的人，因此今年對我來說就是一直跨出舒適圈的一年，對我來說非常有趣，但偶爾有時候也是覺得自己到底在幹嘛，把自己搞這麼累 😄 因此也要適度地透過各種方式來平衡自己的身心健康 (<del>花錢就對了</del>)</p><span id="more"></span><h1 id="🦉-心態轉換"><a href="#🦉-心態轉換" class="headerlink" title="🦉 心態轉換"></a>🦉 心態轉換</h1><p>我覺得這最重要，因此還是要放前面點 👀️ 。進入三十歲之後，有種該為什麼負責的感覺浮現上來：</p><ul><li>許多事情與話在發生之前，總是會先想下它後面帶來的後果到底是什麼？做&#x2F;看到事前需要思考前因後果，在心中盤旋，像是跳舞一樣，需要先算好接下來的節拍大概會怎麼走，讓每一件小事能夠更好的被執行</li><li>今年一直感應不到成就感這件事，直到接觸到滑雪與滑板。一直對於自己運動學習能力相當有自信的我，居然會在這兩個運動上非常受挫，重新考驗自己在<strong>平衡</strong>上的控制力，也有種重新對於任何事情燃起鬥志的感覺</li><li>開始注重自身的需求，今年發生了很嚴重的胃食道逆流，把自己搞超慘，因此很多時候也開始要挑著吃了，不能想到什麼就要開吃<ul><li>但很多時候為了給自己心情好，就…………🎉️</li></ul></li><li>如果不知道當下該怎麼辦才好，就將時間安排好，按表操課，時間會帶你去你該到的地方 (<a href="https://nijialin.com/2023/11/22/nijia-30-years-old-4-quarter/">人生過了三分之一，做點紀錄</a>)</li><li>任何學習的東西都不會沒用，現在的所有選擇皆是過去點點所累積的，千萬別小看自己學的一切</li></ul><h1 id="🐳-工作上的挑戰"><a href="#🐳-工作上的挑戰" class="headerlink" title="🐳 工作上的挑戰"></a>🐳 工作上的挑戰</h1><ul><li><p>從年初的 TECHPULSE，親身經歷與學習許多專案的眉角，在隕石飛來飛去情況下還是讓研討會順利舉辦 🎉️ 現場人流來了 1400 位左右，也讓同仁們可以有個很棒的演講環境！經歷了兩屆的內部畢業展，今年首次將 TECH FRESH 畢業分享會對外，讓畢業的同學能夠有一個活動幫自己在 LINE 的實習生涯畫下個完美句點，擁有一個屬於實習生的活動。也讓這個空間能夠擠下 80 位參加者 🎉️</p></li><li><p>經歷了兩屆的內部畢業展，今年首次將 TECH FRESH 畢業分享會對外，讓畢業的同學能夠有一個活動幫自己在 LINE 的實習生涯畫下個完美句點，擁有一個屬於實習生的活動。也讓這個空間能夠擠下 80 位參加者 🎉️</p></li><li><p>下半年首度挑戰帶產品的專案，初期皆須要花上非常多時間去釐清與互相學習各種開發的習慣，希望這產品能夠越來越好，但既然還沒上線就之後再來分享經驗嚕！</p></li></ul><blockquote><p>今年也很感謝主管們的愛戴，拿了兩次的 spot bonus，讓我在挑戰不同 role 下還能夠被認可，無疑是對我職涯非常棒的推動力！</p></blockquote><h1 id="下班後-🎮🎿"><a href="#下班後-🎮🎿" class="headerlink" title="下班後 🎮🎿"></a>下班後 🎮🎿</h1><ul><li><p>買了小時候最喜歡打的快打旋風，剛好在他出新的時候跟上購買，經歷過瘋狂的研究後，也終於抵達人生第一次玩遊戲抵達最高的牌位 - 白金，雖然後續陸續時間沒調整好，加上需要大量練習而停擺，但這也是個非常棒的經驗！</p></li><li><p>另一個目前很喜歡的運動 - 滑板，一開始加入目標只是為了可以幫助我加強滑雪的技能而買了衝浪滑板，再玩了一陣子之後忽然愛上了地形帶來的誘惑。經驗不夠在美堤滑板場想玩 J 台，太相信自己運動神經下結果摔進醫院急診，搞得自己整個月右腳都怪怪的。 <a href="https://nijialin.com/2023/10/26/skateboard-rainbow-park/">【滑板】彩虹輪狀車練習場道路指引</a></p></li><li><p>而後來買了二手技術板來玩，忽然就著了魔似的一直玩，但因為玩它除了地形外，接下來就是要會玩到輪胎離開地面的動作，想想也是非常的高風險，因此在看同事也去請教練交網球學新技能，自己也找了教練來教學，讓自己的基礎可以打穩之後再來陸續挑戰更難的招式，希望滑雪玩回來之後不要放棄這個運動 👀️</p></li></ul><blockquote><p><a href="https://maps.app.goo.gl/i2FSt9AztSkuLiH78">滑板地圖清單</a></p></blockquote><h1 id="🎲-近期的體悟"><a href="#🎲-近期的體悟" class="headerlink" title="🎲 近期的體悟"></a>🎲 近期的體悟</h1><p>「<mark>價值是跟自己比，旁邊只是參考</mark>」：許多人喜歡各種比較薪水、環境、背景等等，但我想每個人的生活跟成長歷程都不同，不可同期比較，或許大家物以類聚，但終究對手還是自己，如果在當下很努力了卻也沒獲得自認的相對價值，那我相信去其他地方一定可以找到更適合自己的位置。</p><blockquote><p>不論是工作、運動、感情…etc</p></blockquote><p>「<mark>堅持下去</mark>」：去年陪著準備英文，本來以為自己會中斷，結果就持續在 Cambly 堅持到現在了，剛好在專案上也需要跟英文很好的韓國人對口，也讓我在溝通上至少不會怕了，盡可能的表達自己的需求，畢竟大家都不是 native，先怕就輸了！</p><blockquote><p>現在的成就，是過去的種種累積起來的，學的東西都不會沒用，總有一天會用到它</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/20231222_222229_ninja_cat.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;🐔-前言&quot;&gt;&lt;a href=&quot;#🐔-前言&quot; class=&quot;headerlink&quot; title=&quot;🐔 前言&quot;&gt;&lt;/a&gt;🐔 前言&lt;/h1&gt;&lt;p&gt;趁出國跨年之前來整理今年的一些事情，期許 2024 年的自己可以持續跨出舒適圈&lt;/p&gt;
&lt;p&gt;自覺自己是一個很反骨的個性，不喜歡被定義就是&lt;code&gt;怎樣怎樣&lt;/code&gt;的人，因此今年對我來說就是一直跨出舒適圈的一年，對我來說非常有趣，但偶爾有時候也是覺得自己到底在幹嘛，把自己搞這麼累 😄 因此也要適度地透過各種方式來平衡自己的身心健康 (&lt;del&gt;花錢就對了&lt;/del&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>【GCP】Pub/Sub Python 實戰紀錄 | DevFest 2023 台中工作坊</title>
    <link href="https://nijialin.com/2023/11/26/gcp-pubsub-python/"/>
    <id>https://nijialin.com/2023/11/26/gcp-pubsub-python/</id>
    <published>2023-11-26T14:52:34.000Z</published>
    <updated>2023-12-22T07:29:39.451Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/pubsub/OIG.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此篇文章為 <a href="https://gdg.community.dev/events/details/google-gdg-taichung-presents-devfest-taichung-2023/">2023&#x2F;12&#x2F;09 DevFest Taichung Serverless workshop</a> 步驟文章，如果有需要透過 GCP Pub&#x2F;Sub 將訊息轉打給訂閱的 Cloud Run endpoint，可以參考看看這篇文章喔！</p><span id="more"></span><h1 id="前置準備"><a href="#前置準備" class="headerlink" title="前置準備"></a>前置準備</h1><ul><li>需要有 GCP 的帳戶，有綁信用卡可開啟服務，且需要開啟個專案</li><li>需要有 LINE 帳號，且要能登入 <a href="https://developers.line.biz/console/">LINE Developer Console</a><ul><li>要能開啟一個 Provider + Channel</li></ul></li></ul><blockquote><p>範例專案：<a href="https://github.com/gcp-serverless-workshop/notifier-line-bot/tree/main">gcp-serverless-workshop&#x2F;notifier-line-bot</a></p></blockquote><h2 id="本地開發參考以下步驟"><a href="#本地開發參考以下步驟" class="headerlink" title="本地開發參考以下步驟"></a>本地開發參考以下步驟</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.<span class="keyword">com</span>:gcp-serverless-workshop/notifier-<span class="built_in">line</span>.git</span><br><span class="line"><span class="keyword">cd</span> notifier-<span class="built_in">line</span>/</span><br><span class="line"><span class="keyword">python3</span> -<span class="keyword">m</span> venv venv</span><br><span class="line"><span class="keyword">source</span> venv/bin/activate</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="服務使用介紹"><a href="#服務使用介紹" class="headerlink" title="服務使用介紹"></a>服務使用介紹</h1><p><img src="https://nijialin.com/images/2023/pubsub/1.png"></p><p>首先到 GCP 上的 <a href="https://console.cloud.google.com/cloudpubsub/topic/create">Pub&#x2F;Sub 服務</a>中按下<strong>建立主題</strong>，這邊很貼心的下方也有加上晚點會使用到的 topic name</p><p><img src="https://nijialin.com/images/2023/pubsub/2.png"></p><p>進到 Topic 頁面，往下滑找到<strong>建立訂閱項目</strong>，建立一個<strong>項目 ID</strong>，稍候測試與設定會需要用它</p><p><img src="https://nijialin.com/images/2023/pubsub/3.png"></p><h2 id="部署-Cloud-Run"><a href="#部署-Cloud-Run" class="headerlink" title="部署 Cloud Run"></a>部署 Cloud Run</h2><p>接著來到工作坊的專案 <a href="https://github.com/gcp-serverless-workshop/notifier-line-bot">gcp-serverless-workshop&#x2F;notifier-line-bot</a> 下，按下下方的部署按鈕，接下來會進入 Cloud Shell 的部分</p><p><img src="https://nijialin.com/images/2023/pubsub/cloudshell.png"></p><blockquote><p>Cloud Shell 有上限：<a href="https://cloud.google.com/shell/docs/quotas-limits">https://cloud.google.com/shell/docs/quotas-limits</a></p></blockquote><p>跟 cloud build 有關皆需要以下權限 (<a href="https://cloud.google.com/run/docs/deploying-source-code#permissions_required_to_deploy">URL</a>)</p><ul><li>Cloud Build Editor role</li><li>Artifact Registry Admin role</li><li>Storage Admin role</li><li>Cloud Run Admin role</li><li>Service Account User role</li></ul><h2 id="LINE-Bot-建立與設定-Cloud-Run-環境變數"><a href="#LINE-Bot-建立與設定-Cloud-Run-環境變數" class="headerlink" title="LINE Bot 建立與設定 Cloud Run 環境變數"></a>LINE Bot 建立與設定 Cloud Run 環境變數</h2><p>接著是建立官方帳號，詳細步驟請參考 <a href="https://developers.line.biz/en/docs/messaging-api/getting-started/#step-one-enable-use-of-messaging-api">LINE Developers 官方文件</a>，主要我們要做到可以<a href="https://developers.line.biz/en/docs/messaging-api/building-bot/#setting-webhook-url">設定 webhook URL 這個部分</a>，把剛剛佈署完的 Cloud Run 網址複製到 Webhook 欄位上： <code>https://CLOUD_RUN_URL/webhooks/line</code> (如果是使用這個<a href="https://github.com/gcp-serverless-workshop/notifier-line">範例專案</a>)</p><p><img src="https://nijialin.com/images/2023/pubsub/6.png"></p><ul><li>需要到 <a href="https://manager.line.biz/">Official Account Manager</a>將 LINE Bot 群組功能打開，以供測試使用</li><li>將 LINE Bot 的 ACCESS—TOKEN 以及 SECRET 放入 Cloud Run 環境變數中<ul><li>LINE_CHANNEL_ACCESS_TOKEN&#x3D;your_line_channel_access_token</li><li>LINE_CHANNEL_SECRET&#x3D;your_line_channel_secret</li></ul></li><li>把 Event 當中的 LINE 群組 ID 存下來放在 Cloud Run 環境變數中<ul><li>LINE_GROUP_ID&#x3D;</li></ul></li></ul><h2 id="回到-GCP-Pub-x2F-Sub-上"><a href="#回到-GCP-Pub-x2F-Sub-上" class="headerlink" title="回到 GCP Pub&#x2F;Sub 上"></a>回到 GCP Pub&#x2F;Sub 上</h2><p><img src="https://nijialin.com/images/2023/pubsub/4.png"></p><p>這部份把 Cloud Run 的 Domain 設定到 訂閱項目 ID(Subscribe Topic ID)上，進入到上圖的畫面，按下<strong>編輯</strong></p><p><img src="https://nijialin.com/images/2023/pubsub/5.png"></p><p>把傳送類型從 <strong>提取</strong> -&gt; <strong>推送</strong>，並且把**端點網址(Endpoint)**換成 Cloud Run 的 Domain，並加上 <code>/sub</code> (專案設定的路徑)</p><h2 id="寫一個-pub-py-來試試看"><a href="#寫一個-pub-py-來試試看" class="headerlink" title="寫一個 pub.py 來試試看"></a>寫一個 pub.py 來試試看</h2><p>參考 <a href="https://github.com/gcp-serverless-workshop/notifier-line-bot/blob/main/pub.py">gcp-serverless-workshop&#x2F;notifier-line</a>，我們可以針對線上環境去 pub data 去 topic，其中有些需要注意的：</p><ul><li>需到 GCP Service Accounts 中拿取一把金鑰，<code>放到本專案當中</code>，是 JSON 格式，並且把路徑置換<ul><li>第 9 行：<code>os.environ[&#39;GOOGLE_APPLICATION_CREDENTIALS&#39;] = &#39;YOUR_GCP_CA_PATH&#39;</code><ul><li>開啟終端機，執行 <code>pwd</code>，並且把檔案名字加在路徑後方</li></ul></li></ul></li><li>第 12 行：project_id &#x3D; “換成你 GCP Project ID”</li><li>第 13 行：topic_id &#x3D; “你剛剛建立的 TOPIC ID”</li></ul><h2 id="測試看看"><a href="#測試看看" class="headerlink" title="測試看看"></a>測試看看</h2><p><img src="https://nijialin.com/images/2023/pubsub/code.png"></p><p>接著可以在本地端 <code>python pub.py</code> 來把消息疼過 GCP CRED 打上去 Pub&#x2F;Sub，接下來看一下訊息有沒有轉打到 Cloud Run。</p><blockquote><p>如果測試發現有任何環節看不到，可以先在本地端把 API Server 起起來，然後用 ngrok 之類代理本地服務去測試，並且把 Pub&#x2F;Sub 服務的網址先換掉來 debug，接著再看看 pub.py 是否有東西沒準備好</p></blockquote><blockquote><p>ngrok 可以參考這篇文章 - <a href="https://ithelp.ithome.com.tw/articles/10249308">Day 20 GCP 公有雲_雲端事件消息傳遞服務實戰 - Pub&#x2F;Sub 組建測試之路</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p><img src="https://nijialin.com/images/2023/pubsub/intro.jpeg"></p><p>由於這次工作坊中的範例專案是先以 LINE 群組推播為主(Push Message)，因此在環境變數中會先有一個 <strong>LINE_GROUP_ID</strong> 來指定推送，如果有其他需求可以把 Flex Message 以及 Push Message 換成你想要的內容喔！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/pubsub/OIG.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;此篇文章為 &lt;a href=&quot;https://gdg.community.dev/events/details/google-gdg-taichung-presents-devfest-taichung-2023/&quot;&gt;2023&amp;#x2F;12&amp;#x2F;09 DevFest Taichung Serverless workshop&lt;/a&gt; 步驟文章，如果有需要透過 GCP Pub&amp;#x2F;Sub 將訊息轉打給訂閱的 Cloud Run endpoint，可以參考看看這篇文章喔！&lt;/p&gt;</summary>
    
    
    
    <category term="GCP" scheme="https://nijialin.com/categories/GCP/"/>
    
    
    <category term="Python" scheme="https://nijialin.com/tags/Python/"/>
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="GCP" scheme="https://nijialin.com/tags/GCP/"/>
    
    <category term="Pub/Sub" scheme="https://nijialin.com/tags/Pub-Sub/"/>
    
  </entry>
  
  <entry>
    <title>人生過了三分之一，做點紀錄</title>
    <link href="https://nijialin.com/2023/11/21/nijia-30-years-old-4-quarter/"/>
    <id>https://nijialin.com/2023/11/21/nijia-30-years-old-4-quarter/</id>
    <published>2023-11-21T16:48:29.000Z</published>
    <updated>2023-11-21T16:48:29.226Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/skateboard/S__15876103.jpg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想想最近又到了年末了，過往都會幫自己的一年做個結尾，但我覺得人生過了三分之一應該要經常的幫自己更新一下，避免未來開始忘東忘西時，卻忘了自己這陣子所獲得的一些寶貴經驗～</p><span id="more"></span><h1 id="近期一週行程-早、中、晚"><a href="#近期一週行程-早、中、晚" class="headerlink" title="近期一週行程(早、中、晚)"></a>近期一週行程(早、中、晚)</h1><ol><li>健身、上班、滑板</li><li>健身、上班、滑板、上英文課</li><li>睡飽、上班、打掃、上英文課</li><li>健身、上班、羽球社(滑板)</li><li>睡飽、上班、滑板<ol><li>近期太多參訪早上都不練 👀</li></ol></li><li>滑板、逛街、寫專案、打遊戲</li><li>滑板、逛街、寫專案、打遊戲</li></ol><p>之前寫過一篇「<a href="https://nijialin.com/2023/10/26/skateboard-rainbow-park/">【滑板】彩虹輪狀車練習場道路指引</a>」，為了年底滑雪去玩滑板，但自己實在太愛玩雙邊平衡，因此就跑來玩技術版，但因為摔太嚴重信心不足，只好請教練來幫我練動作…這邊還是很推薦各種運動初期別為了省錢，導致後面受傷傷錢又傷身 🥲，有點年紀了不能這樣摔。</p><blockquote><p>滑板同時也認識了很多同好，雖然以前都想著這些人應該很難接近，但加入這文化之後才發現他迷人的地方，但任何或運動都一樣，該給人家尊重的地方還是要給夠喔！</p></blockquote><h1 id="工作上的整理"><a href="#工作上的整理" class="headerlink" title="工作上的整理"></a>工作上的整理</h1><p>近期有機會帶專案，雖然性質跟正規專案有點不同，但也因此學了很多技能，也請教了許多公司的前輩，除了基本的敏捷流程以外，也學會整理資訊，讓作為 TPM 角色的我可以對整個專案的狀態更清晰，而不是淪為一個報告機器人的角色，這也讓我在工作的目標上做了一個很大的突破！也在這當中學習到許多合作的細節，讓雙方都能能在最短時間內抓到問題的重點，就算當中有些內容想了很氣，但還是要先回歸主題，到底要的東西是什麼…未來若有機會再來好好的分享過程。</p><h1 id="有什麼遺憾嗎？"><a href="#有什麼遺憾嗎？" class="headerlink" title="有什麼遺憾嗎？"></a>有什麼遺憾嗎？</h1><p>雖然人生過了三分之一，到了人生的其中一個 milestone，身邊很多同學都在結婚生小孩，但想想在這這年紀還可以玩自己喜歡的事情真的滿難得的！目標也是多多培養自己多元的興趣，除了工作上的努力，也要幫自己，並幫助自己重回那熱情滿滿的狀態，避免燃燒殆盡。</p><p>同時也覺得，人生在此時此刻的選擇上沒有一定的對錯，可能會對這陣子的某個行為覺得不應該，但我想這就是人生一部分，過去的點滴造就了現在的自己，想想他是未來的養分，應該就不會那麼的糾結過去那錯誤的選擇了，選錯再調整嘛～哪有什麼一定的對吧！</p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>雖然最近過的有點太滋潤了，但我想人生中許多時候就是要多多平衡一下自己身心理的狀態，在可控制的情況下我認為作些踰矩的事情是合理的</p><ul><li>不開心想吃東西但怕胖？吃</li><li>最近穿著都很黯淡？買</li><li>家具缺點什麼更好些？買</li></ul><p>以上也分享最近的一些心態上以及近期的狀態，歡迎分享你的點子跟觀點喔！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/skateboard/S__15876103.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;想想最近又到了年末了，過往都會幫自己的一年做個結尾，但我覺得人生過了三分之一應該要經常的幫自己更新一下，避免未來開始忘東忘西時，卻忘了自己這陣子所獲得的一些寶貴經驗～&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>處理 Python 中的 ImportError: cannot import name &#39;url_quote&#39; from &#39;werkzeug.urls</title>
    <link href="https://nijialin.com/2023/11/20/python-flask-url-quote-import-error-werkzeug/"/>
    <id>https://nijialin.com/2023/11/20/python-flask-url-quote-import-error-werkzeug/</id>
    <published>2023-11-20T04:22:49.000Z</published>
    <updated>2023-11-20T04:22:49.503Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期總算有空寫一些 side project，當然同時也會來 maintain 有在使用的專案，但因為過去都使用 Flask(近期都 FastAPI)，有些Code年久失修，或是有升級版本，都會造成 Cloud Run 上的佈署失敗，以下就提供解法給大家。</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>今天再翻新之前寫的 code，過去是使用 flask 撰寫 <a href="https://github.com/louis70109/line-bot-gitbub-actions-receiver">GitHub Link</a></p><p>因為本來只想說增加個 <a href="https://github.com/louis70109/line-bot-gitbub-actions-receiver/blob/master/controller/line_controller.py#L106">LINE Bot 的判斷式</a>，結果發現 log 一直出現<code>&quot;ImportError: cannot import name &#39;url_quote&#39; from &#39;werkzeug.urls&#39;&quot;</code></p><p>經過了搜尋之後發現可能是 Werkzeug 可能有升版本造成的，近期似乎升到 3.x.x，但由於我使用的 Flask 框架只吃到 2.2.x 版本，因此只要把以下兩個版本<a href="https://github.com/louis70109/line-bot-gitbub-actions-receiver/blob/master/requirements.txt#L9">鎖住在 requirements.txt</a> 就沒問題囉！</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Flask</span>==<span class="number">2</span>.<span class="number">2</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Werkzeug</span>==<span class="number">2</span>.<span class="number">2</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>參考 <a href="https://stackoverflow.com/questions/77213053/why-did-flask-start-failing-with-importerror-cannot-import-name-url-quote-fr">stack overflow</a></p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>大家在做完 side project 時可以使用 <code>pip freeze &gt; requirements.txt</code> 把版本鎖起來喔！這樣才會避免出現像我一樣的問題 😆</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近期總算有空寫一些 side project，當然同時也會來 maintain 有在使用的專案，但因為過去都使用 Flask(近期都 FastAPI)，有些Code年久失修，或是有升級版本，都會造成 Cloud Run 上的佈署失敗，以下就提供解法給大家。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://nijialin.com/categories/Python/"/>
    
    
    <category term="Python" scheme="https://nijialin.com/tags/Python/"/>
    
    <category term="Flask" scheme="https://nijialin.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>在 Google Cloud Run 上安裝 Chromium 抓取 CCTV 影像</title>
    <link href="https://nijialin.com/2023/11/13/line-bot-capture-image-cloud-run/"/>
    <id>https://nijialin.com/2023/11/13/line-bot-capture-image-cloud-run/</id>
    <published>2023-11-13T08:57:13.000Z</published>
    <updated>2023-11-13T08:57:13.047Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/common.jpeg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期因為有玩滑板，而且身處台北很容易下雨，因此需要找到加入了交流社群，其中設定了一些指令可以讓社群機器人可以提供 CCTV 的畫面，但其中因為需要去社群當中打指令對於一個剛加入的人有點害羞，有這些攝影機畫面真的可以幫助看是否要出門(大部分場地都室外)，但身為工程師會想要按個按鍵就出現，因此就有以下文章囉！</p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><h2 id="安裝-Chromium-在-Container-上"><a href="#安裝-Chromium-在-Container-上" class="headerlink" title="安裝 Chromium 在 Container 上"></a>安裝 Chromium 在 Container 上</h2><ol><li>很多人應該在測試時因為歷史關係，環境都已經有安裝，因此在 <code>requirements.txt</code> 上需要裝上:</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">selenium</span></span><br><span class="line"><span class="attribute">webdriver</span>-manager</span><br><span class="line"><span class="attribute">chromedriver</span>-binary==<span class="number">77</span>.<span class="number">0</span>.<span class="number">3865</span>.<span class="number">40</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>參考我的 Dockerfile (<a href="https://github.com/gcp-serverless-workshop/notifier-line/blob/main/Dockerfile#L6">URL</a>):</li></ol><blockquote><p>參考來自 <a href="https://dev.to/googlecloud/using-headless-chrome-with-cloud-run-3fdp">dev.to</a></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">RUN</span> apt-get update</span><br><span class="line"><span class="attribute">RUN</span> apt-get install -y gconf-service libasound<span class="number">2</span> libatk<span class="number">1</span>.<span class="number">0</span>-<span class="number">0</span> libcairo<span class="number">2</span> libcups<span class="number">2</span> libfontconfig<span class="number">1</span> libgdk-pixbuf<span class="number">2</span>.<span class="number">0</span>-<span class="number">0</span> libgtk-<span class="number">3</span>-<span class="number">0</span> libnspr<span class="number">4</span> libpango-<span class="number">1</span>.<span class="number">0</span>-<span class="number">0</span> libxss<span class="number">1</span> fonts-liberation libappindicator<span class="number">1</span> libnss<span class="number">3</span> lsb-release xdg-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Chrome</span></span><br><span class="line"><span class="attribute">RUN</span> wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd<span class="number">64</span>.deb</span><br><span class="line"><span class="attribute">RUN</span> dpkg -i google-chrome-stable_current_amd<span class="number">64</span>.deb; apt-get -fy install</span><br></pre></td></tr></table></figure><p>如此一來就可以在 <a href="https://github.com/gcp-serverless-workshop/notifier-line/blob/main/utils/image.py#L21">Container 上使用 Selenium </a>操作了，接下來當然就放在 API 去使用，以下講解一些在 LINE Bot 上使用需要的注意事項。</p><blockquote><p>感謝公司的 QA 同事大力協助，真的是術業有專攻！</p></blockquote><h2 id="在-LINE-Bot-上需要的注意事項"><a href="#在-LINE-Bot-上需要的注意事項" class="headerlink" title="在 LINE Bot 上需要的注意事項"></a>在 LINE Bot 上需要的注意事項</h2><ol><li>輸出圖片需要提供 URL (<a href="https://developers.line.biz/en/reference/messaging-api/#image-message">API Doc</a>)，這邊大家可以參考我過去寫的文章-<a href="https://nijialin.com/2022/10/02/upload-image-get-url-ways/#%E6%87%89%E7%94%A8-LINE-Bot-%E6%94%B6%E5%88%B0%E5%9C%96%E7%89%87%E5%BE%8C%E5%82%B3%E5%88%B0-GitHub-%E4%B8%A6%E4%BD%BF%E7%94%A8">應用 - LINE Bot 收到圖片後傳到 GitHub 並使用</a>，透過 <strong>Base64</strong> 的方式從 GitHub API 上傳到 Repo 中</li><li>注意: Repo 要記得是 <strong>Public</strong> 喔! 否則 LINE Server 會讀不到檔案</li><li>網址組成為: <code>f&quot;https://raw.githubusercontent.com/&#123;USER&#125;/&#123;REPO_NAME&#125;/&#123;master || main&#125;/&#123;IMAGE_NAME&#125;.png&quot;</code>，記得別用到網頁上看到的名字喔！</li><li>建議使用 Push Message 的方式發出(可搭配回覆訊息 Quote 功能)，因為抓圖片以及上傳其實很花時間<ol><li>如果回傳速度比較快，或許可以寫判斷式把 Reply 以及 Push Message 兩個搭配使用</li></ol></li></ol><blockquote><p>我自己日常紀錄的東西都放在<a href="https://github.com/louis70109/ideas-tree">這個 Repo</a></p></blockquote><h2 id="佈署在-Cloud-Run"><a href="#佈署在-Cloud-Run" class="headerlink" title="佈署在 Cloud Run"></a>佈署在 Cloud Run</h2><p>因為需要將 FastAPI 佈署在 Google Cloud Run 上面會需要測試，大家有需要可以參考我的<a href="https://github.com/gcp-serverless-workshop/notifier-line/blob/main/Dockerfile">Dockerfile</a>，建議使用 <code>uvicorn</code>，目前使用 <code>gunicorn</code> 遇到滿多問題還不知道怎麼排解，如果有相關經驗歡迎分享喔！</p><p>除了在本地端使用 gcloud Command line 佈署，也可以透過 Cloud Shell 的方式佈署，而在我的 Repo 上都有<a href="https://github.com/gcp-serverless-workshop/notifier-line#google-cloud-platform-%E4%BD%88%E7%BD%B2">設定一鍵佈署</a>，可以直接從 GitHub 直接跳到 GCP 的 Cloud Shell 上操作，相當方便!</p><blockquote><p>如果有需要一直測試佈署上去的環境，建議 Cloud Shell 使用時別急著關閉，可以重複把 Cloud Shell 裡的 Repo 重新 Pull 並且佈署，否則會踩到<strong>開啟 Shell 上限</strong>喔！</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/common.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近期因為有玩滑板，而且身處台北很容易下雨，因此需要找到加入了交流社群，其中設定了一些指令可以讓社群機器人可以提供 CCTV 的畫面，但其中因為需要去社群當中打指令對於一個剛加入的人有點害羞，有這些攝影機畫面真的可以幫助看是否要出門(大部分場地都室外)，但身為工程師會想要按個按鍵就出現，因此就有以下文章囉！&lt;/p&gt;</summary>
    
    
    
    <category term="LINE" scheme="https://nijialin.com/categories/LINE/"/>
    
    
    <category term="LINE" scheme="https://nijialin.com/tags/LINE/"/>
    
    <category term="Google" scheme="https://nijialin.com/tags/Google/"/>
    
    <category term="Cloud Run" scheme="https://nijialin.com/tags/Cloud-Run/"/>
    
  </entry>
  
  <entry>
    <title>【滑板】彩虹輪狀車練習場道路指引</title>
    <link href="https://nijialin.com/2023/10/26/skateboard-rainbow-park/"/>
    <id>https://nijialin.com/2023/10/26/skateboard-rainbow-park/</id>
    <published>2023-10-26T04:19:46.000Z</published>
    <updated>2023-10-26T04:19:46.086Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nijialin.com/images/2023/skateboard/S__15876103.jpg"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由於最近迷上了衝浪滑板，但本身又是一個很喜歡挑戰許多不同的地方，但因為我在<strong>彩虹輪狀車練習場</strong>外面迷路了很久，以下分享一下道路指引 😆</p><p>地點：<a href="https://maps.app.goo.gl/U4GfNdgZdfG4HXrz6">https://maps.app.goo.gl/U4GfNdgZdfG4HXrz6</a></p><span id="more"></span><h1 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h1><p>這邊不是一個捷運會到的地方，如果從西湖捷運站過來的話，就需要搭 藍 7 or 藍 26 就可以到附近了；另外的選項也可以使用 GoShare or WeMoo 之類的共享機車即可前往。</p><p><img src="https://nijialin.com/images/2023/skateboard/S__15876101.jpg"></p><p>一般抵達的路徑應該會在<a href="https://maps.app.goo.gl/Vostsxjf578t9HNi9">內湖科工 D-總部大樓</a>附近找不到入口，他有一個地下道可以過馬路，位置請參考如上圖。</p><blockquote><p>我在這邊迷路了好久 XD</p></blockquote><p><img src="https://nijialin.com/images/2023/skateboard/S__15876104.jpg"></p><p>會到一個地下道，這裡進來通常都已經開始滑了</p><p><img src="https://nijialin.com/images/2023/skateboard/S__15876105.jpg"></p><p>出來之後還要爬一下河堤的樓梯，翻牆過去</p><p><img src="https://nijialin.com/images/2023/skateboard/S__15876106.jpg"></p><p>上來之後就會看到很空曠的河堤以及極限運動場，傍晚來真的很漂亮！</p><p><img src="https://nijialin.com/images/2023/skateboard/S__15876107.jpg"></p><p>這邊場地就有很多 pump 的地方，來玩的朋友一定要把護具都帶好再來，護腕、護肘、護膝、護墊都要帶好！我才看到有人裸裝直接摔，看了真的很痛 🥲</p><blockquote><p>之前因為挑戰 J 台而摔了一個大傷，大家來玩的時候要把一些基本的平衡都練好還是比較好喔</p></blockquote><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>以上分享<strong>彩虹輪狀車練習場</strong>的道路指引給大家，台北有很多很棒的滑板場，推薦大家都去挑戰看看！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nijialin.com/images/2023/skateboard/S__15876103.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由於最近迷上了衝浪滑板，但本身又是一個很喜歡挑戰許多不同的地方，但因為我在&lt;strong&gt;彩虹輪狀車練習場&lt;/strong&gt;外面迷路了很久，以下分享一下道路指引 😆&lt;/p&gt;
&lt;p&gt;地點：&lt;a href=&quot;https://maps.app.goo.gl/U4GfNdgZdfG4HXrz6&quot;&gt;https://maps.app.goo.gl/U4GfNdgZdfG4HXrz6&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日記" scheme="https://nijialin.com/categories/%E6%97%A5%E8%A8%98/"/>
    
    
    <category term="Skateboard" scheme="https://nijialin.com/tags/Skateboard/"/>
    
    <category term="滑板" scheme="https://nijialin.com/tags/%E6%BB%91%E6%9D%BF/"/>
    
  </entry>
  
</feed>
